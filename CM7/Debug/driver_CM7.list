
driver_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004624  08004624  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004624  08004624  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004624  08004624  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  24000000  0800462c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  24000064  08004690  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000108  08004690  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079d8  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ce  00000000  00000000  00027a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  00028f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00029448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b981  00000000  00000000  000298d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056bf  00000000  00000000  00055259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f26eb  00000000  00000000  0005a918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d78  00000000  00000000  0014d058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004164 	.word	0x08004164

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08004164 	.word	0x08004164

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <init_Bluetooh>:
char* get_number_of_slaved_can_be_scanned(short parameter);
void disconn_BLE(void);

//---------------------------------
void init_Bluetooh(USART_TypeDef *USARTx)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	Bluetooh_USART = USARTx;
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <init_Bluetooh+0x1c>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6013      	str	r3, [r2, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	24000080 	.word	0x24000080

080003b0 <get_Version>:
	}
}
}

char* get_Version(void)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f001 ff88 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 80003bc:	2300      	movs	r3, #0
 80003be:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+VERSION\r\n";
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <get_Version+0xa4>)
 80003c2:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 80003c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c8:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80003ca:	e025      	b.n	8000418 <get_Version+0x68>
		size = 0 ;
 80003cc:	2300      	movs	r3, #0
 80003ce:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80003d0:	4b21      	ldr	r3, [pc, #132]	; (8000458 <get_Version+0xa8>)
 80003d2:	681c      	ldr	r4, [r3, #0]
 80003d4:	68f8      	ldr	r0, [r7, #12]
 80003d6:	f7ff ff83 	bl	80002e0 <strlen>
 80003da:	4603      	mov	r3, r0
 80003dc:	461a      	mov	r2, r3
 80003de:	68f9      	ldr	r1, [r7, #12]
 80003e0:	4620      	mov	r0, r4
 80003e2:	f002 f9d7 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 80003e6:	2064      	movs	r0, #100	; 0x64
 80003e8:	f001 ff70 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <get_Version+0xa8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	1d3a      	adds	r2, r7, #4
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 fa09 	bl	800280c <uart_get_buffer>
 80003fa:	6178      	str	r0, [r7, #20]
		try_count++ ;
 80003fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000400:	b29b      	uxth	r3, r3
 8000402:	3301      	adds	r3, #1
 8000404:	b29b      	uxth	r3, r3
 8000406:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 8000408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800040c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000410:	d102      	bne.n	8000418 <get_Version+0x68>
		{
			error("Get Version is failed");
 8000412:	4812      	ldr	r0, [pc, #72]	; (800045c <get_Version+0xac>)
 8000414:	f002 fc48 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d9d6      	bls.n	80003cc <get_Version+0x1c>
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b45      	cmp	r3, #69	; 0x45
 8000424:	d104      	bne.n	8000430 <get_Version+0x80>
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b52      	cmp	r3, #82	; 0x52
 800042e:	d0cd      	beq.n	80003cc <get_Version+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 8000430:	490b      	ldr	r1, [pc, #44]	; (8000460 <get_Version+0xb0>)
 8000432:	6978      	ldr	r0, [r7, #20]
 8000434:	f002 ff3a 	bl	80032ac <strtok>
 8000438:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d103      	bne.n	8000448 <get_Version+0x98>
		 {
			 return get_Version();
 8000440:	f7ff ffb6 	bl	80003b0 <get_Version>
 8000444:	4603      	mov	r3, r0
 8000446:	e000      	b.n	800044a <get_Version+0x9a>
		 }else
		 {
			 return token ;
 8000448:	68bb      	ldr	r3, [r7, #8]
		 }
}
 800044a:	4618      	mov	r0, r3
 800044c:	371c      	adds	r7, #28
 800044e:	46bd      	mov	sp, r7
 8000450:	bd90      	pop	{r4, r7, pc}
 8000452:	bf00      	nop
 8000454:	08004264 	.word	0x08004264
 8000458:	24000080 	.word	0x24000080
 800045c:	08004274 	.word	0x08004274
 8000460:	080041c0 	.word	0x080041c0

08000464 <get_BLEAddr>:

char* get_BLEAddr(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 800046a:	2064      	movs	r0, #100	; 0x64
 800046c:	f001 ff2e 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+LADDR\r\n";
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <get_BLEAddr+0xb8>)
 8000476:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 8000478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047c:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 800047e:	e025      	b.n	80004cc <get_BLEAddr+0x68>
		size = 0 ;
 8000480:	2300      	movs	r3, #0
 8000482:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <get_BLEAddr+0xbc>)
 8000486:	681c      	ldr	r4, [r3, #0]
 8000488:	68f8      	ldr	r0, [r7, #12]
 800048a:	f7ff ff29 	bl	80002e0 <strlen>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	68f9      	ldr	r1, [r7, #12]
 8000494:	4620      	mov	r0, r4
 8000496:	f002 f97d 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f001 ff16 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <get_BLEAddr+0xbc>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f002 f9af 	bl	800280c <uart_get_buffer>
 80004ae:	6178      	str	r0, [r7, #20]
		try_count++ ;
 80004b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	3301      	adds	r3, #1
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 80004bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004c4:	d102      	bne.n	80004cc <get_BLEAddr+0x68>
		{
			error("Get BLE ADDR is failed");
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <get_BLEAddr+0xc0>)
 80004c8:	f002 fbee 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d9d6      	bls.n	8000480 <get_BLEAddr+0x1c>
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b45      	cmp	r3, #69	; 0x45
 80004d8:	d104      	bne.n	80004e4 <get_BLEAddr+0x80>
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	3301      	adds	r3, #1
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b52      	cmp	r3, #82	; 0x52
 80004e2:	d0cd      	beq.n	8000480 <get_BLEAddr+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 80004e4:	4910      	ldr	r1, [pc, #64]	; (8000528 <get_BLEAddr+0xc4>)
 80004e6:	6978      	ldr	r0, [r7, #20]
 80004e8:	f002 fee0 	bl	80032ac <strtok>
 80004ec:	60b8      	str	r0, [r7, #8]
	 token = strtok(token, "=");
 80004ee:	490f      	ldr	r1, [pc, #60]	; (800052c <get_BLEAddr+0xc8>)
 80004f0:	68b8      	ldr	r0, [r7, #8]
 80004f2:	f002 fedb 	bl	80032ac <strtok>
 80004f6:	60b8      	str	r0, [r7, #8]
	 token = strtok(NULL," ");
 80004f8:	490d      	ldr	r1, [pc, #52]	; (8000530 <get_BLEAddr+0xcc>)
 80004fa:	2000      	movs	r0, #0
 80004fc:	f002 fed6 	bl	80032ac <strtok>
 8000500:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d103      	bne.n	8000510 <get_BLEAddr+0xac>
		 {
			 return get_BLEAddr();
 8000508:	f7ff ffac 	bl	8000464 <get_BLEAddr>
 800050c:	4603      	mov	r3, r0
 800050e:	e000      	b.n	8000512 <get_BLEAddr+0xae>
		 }else
		 {
			 return token ;
 8000510:	68bb      	ldr	r3, [r7, #8]
		 }
}
 8000512:	4618      	mov	r0, r3
 8000514:	371c      	adds	r7, #28
 8000516:	46bd      	mov	sp, r7
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	bf00      	nop
 800051c:	0800428c 	.word	0x0800428c
 8000520:	24000080 	.word	0x24000080
 8000524:	08004298 	.word	0x08004298
 8000528:	080041c0 	.word	0x080041c0
 800052c:	080041c4 	.word	0x080041c4
 8000530:	080041c8 	.word	0x080041c8

08000534 <get_Name>:
char* get_Name(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f001 fec6 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+NAME\r\n";
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <get_Name+0xb8>)
 8000546:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 800054e:	e025      	b.n	800059c <get_Name+0x68>
		size = 0 ;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <get_Name+0xbc>)
 8000556:	681c      	ldr	r4, [r3, #0]
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	f7ff fec1 	bl	80002e0 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	68f9      	ldr	r1, [r7, #12]
 8000564:	4620      	mov	r0, r4
 8000566:	f002 f915 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 800056a:	2064      	movs	r0, #100	; 0x64
 800056c:	f001 feae 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <get_Name+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	1d3a      	adds	r2, r7, #4
 8000576:	4611      	mov	r1, r2
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f947 	bl	800280c <uart_get_buffer>
 800057e:	6178      	str	r0, [r7, #20]
		try_count++ ;
 8000580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000584:	b29b      	uxth	r3, r3
 8000586:	3301      	adds	r3, #1
 8000588:	b29b      	uxth	r3, r3
 800058a:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 800058c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000594:	d102      	bne.n	800059c <get_Name+0x68>
		{
			error("Get NAME is failed");
 8000596:	4817      	ldr	r0, [pc, #92]	; (80005f4 <get_Name+0xc0>)
 8000598:	f002 fb86 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d9d6      	bls.n	8000550 <get_Name+0x1c>
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b45      	cmp	r3, #69	; 0x45
 80005a8:	d104      	bne.n	80005b4 <get_Name+0x80>
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b52      	cmp	r3, #82	; 0x52
 80005b2:	d0cd      	beq.n	8000550 <get_Name+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <get_Name+0xc4>)
 80005b6:	6978      	ldr	r0, [r7, #20]
 80005b8:	f002 fe78 	bl	80032ac <strtok>
 80005bc:	60b8      	str	r0, [r7, #8]
	 token = strtok(token, "=");
 80005be:	490f      	ldr	r1, [pc, #60]	; (80005fc <get_Name+0xc8>)
 80005c0:	68b8      	ldr	r0, [r7, #8]
 80005c2:	f002 fe73 	bl	80032ac <strtok>
 80005c6:	60b8      	str	r0, [r7, #8]
	 token = strtok(NULL," ");
 80005c8:	490d      	ldr	r1, [pc, #52]	; (8000600 <get_Name+0xcc>)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f002 fe6e 	bl	80032ac <strtok>
 80005d0:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d103      	bne.n	80005e0 <get_Name+0xac>
		 {
			 return get_Name();
 80005d8:	f7ff ffac 	bl	8000534 <get_Name>
 80005dc:	4603      	mov	r3, r0
 80005de:	e000      	b.n	80005e2 <get_Name+0xae>
		 }else
		 {
			 return token ;
 80005e0:	68bb      	ldr	r3, [r7, #8]
		 }
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	080042b0 	.word	0x080042b0
 80005f0:	24000080 	.word	0x24000080
 80005f4:	080042bc 	.word	0x080042bc
 80005f8:	080041c0 	.word	0x080041c0
 80005fc:	080041c4 	.word	0x080041c4
 8000600:	080041c8 	.word	0x080041c8

08000604 <set_Name>:
void set_Name(char* name)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b09f      	sub	sp, #124	; 0x7c
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	systickDelayMs(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f001 fe5d 	bl	80022cc <systickDelayMs>
		char* temp ;
		unsigned long size = 0 ;
 8000612:	2300      	movs	r3, #0
 8000614:	66fb      	str	r3, [r7, #108]	; 0x6c
		char cmd[100] ;
		strcpy(cmd,"AT+NAME");
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <set_Name+0xcc>)
 800061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000620:	e883 0003 	stmia.w	r3, {r0, r1}
		strcat(cmd,name);
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fe26 	bl	800327c <strcat>
		strcat(cmd,"\r\n");
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fe53 	bl	80002e0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4413      	add	r3, r2
 8000644:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <set_Name+0xd0>)
 8000646:	8811      	ldrh	r1, [r2, #0]
 8000648:	7892      	ldrb	r2, [r2, #2]
 800064a:	8019      	strh	r1, [r3, #0]
 800064c:	709a      	strb	r2, [r3, #2]
		short try_count = -1 ;
 800064e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000652:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000656:	e02b      	b.n	80006b0 <set_Name+0xac>
			size = 0 ;
 8000658:	2300      	movs	r3, #0
 800065a:	66fb      	str	r3, [r7, #108]	; 0x6c
			uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <set_Name+0xd4>)
 800065e:	681c      	ldr	r4, [r3, #0]
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe3b 	bl	80002e0 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4619      	mov	r1, r3
 8000674:	4620      	mov	r0, r4
 8000676:	f002 f88d 	bl	8002794 <uart_send_string>
			systickDelayMs(100);
 800067a:	2064      	movs	r0, #100	; 0x64
 800067c:	f001 fe26 	bl	80022cc <systickDelayMs>
			temp = uart_get_buffer(Bluetooh_USART, &size);
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <set_Name+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f8be 	bl	800280c <uart_get_buffer>
 8000690:	6778      	str	r0, [r7, #116]	; 0x74
			try_count++ ;
 8000692:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8000696:	b29b      	uxth	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b29b      	uxth	r3, r3
 800069c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
			if(try_count ==1000)
 80006a0:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80006a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006a8:	d102      	bne.n	80006b0 <set_Name+0xac>
			{
				error("Set NAME is failed");
 80006aa:	480c      	ldr	r0, [pc, #48]	; (80006dc <set_Name+0xd8>)
 80006ac:	f002 fafc 	bl	8002ca8 <error>
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80006b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d9d0      	bls.n	8000658 <set_Name+0x54>
 80006b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b45      	cmp	r3, #69	; 0x45
 80006bc:	d104      	bne.n	80006c8 <set_Name+0xc4>
 80006be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006c0:	3301      	adds	r3, #1
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b52      	cmp	r3, #82	; 0x52
 80006c6:	d0c7      	beq.n	8000658 <set_Name+0x54>
			}
		}
}
 80006c8:	bf00      	nop
 80006ca:	377c      	adds	r7, #124	; 0x7c
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}
 80006d0:	080042d0 	.word	0x080042d0
 80006d4:	080041c0 	.word	0x080041c0
 80006d8:	24000080 	.word	0x24000080
 80006dc:	080042d8 	.word	0x080042d8

080006e0 <get_Pin>:


char* get_Pin(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f001 fdf0 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+PIN\r\n";
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <get_Pin+0xb8>)
 80006f2:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 80006f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f8:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80006fa:	e025      	b.n	8000748 <get_Pin+0x68>
		size = 0 ;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <get_Pin+0xbc>)
 8000702:	681c      	ldr	r4, [r3, #0]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f7ff fdeb 	bl	80002e0 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	68f9      	ldr	r1, [r7, #12]
 8000710:	4620      	mov	r0, r4
 8000712:	f002 f83f 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f001 fdd8 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <get_Pin+0xbc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f871 	bl	800280c <uart_get_buffer>
 800072a:	6178      	str	r0, [r7, #20]
		try_count++ ;
 800072c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000730:	b29b      	uxth	r3, r3
 8000732:	3301      	adds	r3, #1
 8000734:	b29b      	uxth	r3, r3
 8000736:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 8000738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800073c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000740:	d102      	bne.n	8000748 <get_Pin+0x68>
		{
			error("Get PIN is failed");
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <get_Pin+0xc0>)
 8000744:	f002 fab0 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d9d6      	bls.n	80006fc <get_Pin+0x1c>
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b45      	cmp	r3, #69	; 0x45
 8000754:	d104      	bne.n	8000760 <get_Pin+0x80>
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b52      	cmp	r3, #82	; 0x52
 800075e:	d0cd      	beq.n	80006fc <get_Pin+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 8000760:	4910      	ldr	r1, [pc, #64]	; (80007a4 <get_Pin+0xc4>)
 8000762:	6978      	ldr	r0, [r7, #20]
 8000764:	f002 fda2 	bl	80032ac <strtok>
 8000768:	60b8      	str	r0, [r7, #8]
	 token = strtok(token, "=");
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <get_Pin+0xc8>)
 800076c:	68b8      	ldr	r0, [r7, #8]
 800076e:	f002 fd9d 	bl	80032ac <strtok>
 8000772:	60b8      	str	r0, [r7, #8]
	 token = strtok(NULL," ");
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <get_Pin+0xcc>)
 8000776:	2000      	movs	r0, #0
 8000778:	f002 fd98 	bl	80032ac <strtok>
 800077c:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d103      	bne.n	800078c <get_Pin+0xac>
		 {
			 return get_Pin();
 8000784:	f7ff ffac 	bl	80006e0 <get_Pin>
 8000788:	4603      	mov	r3, r0
 800078a:	e000      	b.n	800078e <get_Pin+0xae>
		 }else
		 {
			 return token ;
 800078c:	68bb      	ldr	r3, [r7, #8]
		 }
}
 800078e:	4618      	mov	r0, r3
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	bf00      	nop
 8000798:	080042ec 	.word	0x080042ec
 800079c:	24000080 	.word	0x24000080
 80007a0:	080042f8 	.word	0x080042f8
 80007a4:	080041c0 	.word	0x080041c0
 80007a8:	080041c4 	.word	0x080041c4
 80007ac:	080041c8 	.word	0x080041c8

080007b0 <set_Pin>:
void set_Pin(char* Pin)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b09f      	sub	sp, #124	; 0x7c
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	systickDelayMs(100);
 80007b8:	2064      	movs	r0, #100	; 0x64
 80007ba:	f001 fd87 	bl	80022cc <systickDelayMs>
		char* temp ;
		unsigned long size = 0 ;
 80007be:	2300      	movs	r3, #0
 80007c0:	66fb      	str	r3, [r7, #108]	; 0x6c
		char cmd[100] ;
		strcpy(cmd,"AT+PIN");
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <set_Pin+0xd4>)
 80007c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007cc:	6018      	str	r0, [r3, #0]
 80007ce:	3304      	adds	r3, #4
 80007d0:	8019      	strh	r1, [r3, #0]
 80007d2:	3302      	adds	r3, #2
 80007d4:	0c0a      	lsrs	r2, r1, #16
 80007d6:	701a      	strb	r2, [r3, #0]
		strcat(cmd,Pin);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fd4c 	bl	800327c <strcat>
		strcat(cmd,"\r\n");
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fd79 	bl	80002e0 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4413      	add	r3, r2
 80007f8:	4a23      	ldr	r2, [pc, #140]	; (8000888 <set_Pin+0xd8>)
 80007fa:	8811      	ldrh	r1, [r2, #0]
 80007fc:	7892      	ldrb	r2, [r2, #2]
 80007fe:	8019      	strh	r1, [r3, #0]
 8000800:	709a      	strb	r2, [r3, #2]
		short try_count = -1 ;
 8000802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000806:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 800080a:	e02b      	b.n	8000864 <set_Pin+0xb4>
			size = 0 ;
 800080c:	2300      	movs	r3, #0
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c
			uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <set_Pin+0xdc>)
 8000812:	681c      	ldr	r4, [r3, #0]
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd61 	bl	80002e0 <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4619      	mov	r1, r3
 8000828:	4620      	mov	r0, r4
 800082a:	f001 ffb3 	bl	8002794 <uart_send_string>
			systickDelayMs(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f001 fd4c 	bl	80022cc <systickDelayMs>
			temp = uart_get_buffer(Bluetooh_USART, &size);
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <set_Pin+0xdc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 ffe4 	bl	800280c <uart_get_buffer>
 8000844:	6778      	str	r0, [r7, #116]	; 0x74
			try_count++ ;
 8000846:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800084a:	b29b      	uxth	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b29b      	uxth	r3, r3
 8000850:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
			if(try_count ==1000)
 8000854:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8000858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800085c:	d102      	bne.n	8000864 <set_Pin+0xb4>
			{
				error("Set PIN is failed");
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <set_Pin+0xe0>)
 8000860:	f002 fa22 	bl	8002ca8 <error>
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000866:	2b02      	cmp	r3, #2
 8000868:	d9d0      	bls.n	800080c <set_Pin+0x5c>
 800086a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b45      	cmp	r3, #69	; 0x45
 8000870:	d104      	bne.n	800087c <set_Pin+0xcc>
 8000872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000874:	3301      	adds	r3, #1
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b52      	cmp	r3, #82	; 0x52
 800087a:	d0c7      	beq.n	800080c <set_Pin+0x5c>
			}
		}

}
 800087c:	bf00      	nop
 800087e:	377c      	adds	r7, #124	; 0x7c
 8000880:	46bd      	mov	sp, r7
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	0800430c 	.word	0x0800430c
 8000888:	080041c0 	.word	0x080041c0
 800088c:	24000080 	.word	0x24000080
 8000890:	08004314 	.word	0x08004314

08000894 <get_Broadcast_Interval>:

short get_Broadcast_Interval(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f001 fd16 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+ADVI\r\n";
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <get_Broadcast_Interval+0x104>)
 80008a6:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80008ae:	e025      	b.n	80008fc <get_Broadcast_Interval+0x68>
		size = 0 ;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <get_Broadcast_Interval+0x108>)
 80008b6:	681c      	ldr	r4, [r3, #0]
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f7ff fd11 	bl	80002e0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	68f9      	ldr	r1, [r7, #12]
 80008c4:	4620      	mov	r0, r4
 80008c6:	f001 ff65 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 80008ca:	2064      	movs	r0, #100	; 0x64
 80008cc:	f001 fcfe 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <get_Broadcast_Interval+0x108>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1d3a      	adds	r2, r7, #4
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 ff97 	bl	800280c <uart_get_buffer>
 80008de:	6178      	str	r0, [r7, #20]
		try_count++ ;
 80008e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 80008ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f4:	d102      	bne.n	80008fc <get_Broadcast_Interval+0x68>
		{
			error("Get Broadcast is failed");
 80008f6:	482a      	ldr	r0, [pc, #168]	; (80009a0 <get_Broadcast_Interval+0x10c>)
 80008f8:	f002 f9d6 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d9d6      	bls.n	80008b0 <get_Broadcast_Interval+0x1c>
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b45      	cmp	r3, #69	; 0x45
 8000908:	d104      	bne.n	8000914 <get_Broadcast_Interval+0x80>
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b52      	cmp	r3, #82	; 0x52
 8000912:	d0cd      	beq.n	80008b0 <get_Broadcast_Interval+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 8000914:	4923      	ldr	r1, [pc, #140]	; (80009a4 <get_Broadcast_Interval+0x110>)
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f002 fcc8 	bl	80032ac <strtok>
 800091c:	60b8      	str	r0, [r7, #8]
	 token = strtok(token, "=");
 800091e:	4922      	ldr	r1, [pc, #136]	; (80009a8 <get_Broadcast_Interval+0x114>)
 8000920:	68b8      	ldr	r0, [r7, #8]
 8000922:	f002 fcc3 	bl	80032ac <strtok>
 8000926:	60b8      	str	r0, [r7, #8]
	 token = strtok(NULL," ");
 8000928:	4920      	ldr	r1, [pc, #128]	; (80009ac <get_Broadcast_Interval+0x118>)
 800092a:	2000      	movs	r0, #0
 800092c:	f002 fcbe 	bl	80032ac <strtok>
 8000930:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d103      	bne.n	8000940 <get_Broadcast_Interval+0xac>
		 {
			 return get_Broadcast_Interval();
 8000938:	f7ff ffac 	bl	8000894 <get_Broadcast_Interval>
 800093c:	4603      	mov	r3, r0
 800093e:	e026      	b.n	800098e <get_Broadcast_Interval+0xfa>
		 }else
		 {
			 switch((char)*token)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3b30      	subs	r3, #48	; 0x30
 8000946:	2b06      	cmp	r3, #6
 8000948:	d81e      	bhi.n	8000988 <get_Broadcast_Interval+0xf4>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <get_Broadcast_Interval+0xbc>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	0800096d 	.word	0x0800096d
 8000954:	08000971 	.word	0x08000971
 8000958:	08000975 	.word	0x08000975
 800095c:	08000979 	.word	0x08000979
 8000960:	0800097d 	.word	0x0800097d
 8000964:	08000981 	.word	0x08000981
 8000968:	08000985 	.word	0x08000985
			 		{
			 		case 48:
			 			return 0;
 800096c:	2300      	movs	r3, #0
 800096e:	e00e      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 49:
			 			return 1;
 8000970:	2301      	movs	r3, #1
 8000972:	e00c      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 50:
			 			return 2;
 8000974:	2302      	movs	r3, #2
 8000976:	e00a      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 51:
			 			return 3;
 8000978:	2303      	movs	r3, #3
 800097a:	e008      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 52:
			 			return 4;
 800097c:	2304      	movs	r3, #4
 800097e:	e006      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 53:
			 			return 5;
 8000980:	2305      	movs	r3, #5
 8000982:	e004      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		case 54:
			 			return 6;
 8000984:	2306      	movs	r3, #6
 8000986:	e002      	b.n	800098e <get_Broadcast_Interval+0xfa>
			 		default:
			 			error("BlueTooh Broadcast Error");
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <get_Broadcast_Interval+0x11c>)
 800098a:	f002 f98d 	bl	8002ca8 <error>
			 		}
		 }
}
 800098e:	4618      	mov	r0, r3
 8000990:	371c      	adds	r7, #28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	bf00      	nop
 8000998:	08004328 	.word	0x08004328
 800099c:	24000080 	.word	0x24000080
 80009a0:	08004334 	.word	0x08004334
 80009a4:	080041c0 	.word	0x080041c0
 80009a8:	080041c4 	.word	0x080041c4
 80009ac:	080041c8 	.word	0x080041c8
 80009b0:	0800434c 	.word	0x0800434c

080009b4 <get_Authentication_type>:
				}
			}

}
short get_Authentication_type(void)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f001 fc86 	bl	80022cc <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
	char* cmd = "AT+TYPE\r\n";
 80009c4:	4b32      	ldr	r3, [pc, #200]	; (8000a90 <get_Authentication_type+0xdc>)
 80009c6:	60fb      	str	r3, [r7, #12]
	short try_count = -1 ;
 80009c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009cc:	827b      	strh	r3, [r7, #18]
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80009ce:	e025      	b.n	8000a1c <get_Authentication_type+0x68>
		size = 0 ;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <get_Authentication_type+0xe0>)
 80009d6:	681c      	ldr	r4, [r3, #0]
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f7ff fc81 	bl	80002e0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	68f9      	ldr	r1, [r7, #12]
 80009e4:	4620      	mov	r0, r4
 80009e6:	f001 fed5 	bl	8002794 <uart_send_string>
		systickDelayMs(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f001 fc6e 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <get_Authentication_type+0xe0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1d3a      	adds	r2, r7, #4
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ff07 	bl	800280c <uart_get_buffer>
 80009fe:	6178      	str	r0, [r7, #20]
		try_count++ ;
 8000a00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3301      	adds	r3, #1
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 8000a0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a14:	d102      	bne.n	8000a1c <get_Authentication_type+0x68>
		{
			error("Get Authentication is failed");
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <get_Authentication_type+0xe4>)
 8000a18:	f002 f946 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d9d6      	bls.n	80009d0 <get_Authentication_type+0x1c>
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b45      	cmp	r3, #69	; 0x45
 8000a28:	d104      	bne.n	8000a34 <get_Authentication_type+0x80>
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b52      	cmp	r3, #82	; 0x52
 8000a32:	d0cd      	beq.n	80009d0 <get_Authentication_type+0x1c>
		}
	}
	 char * token = strtok(temp, "\r\n");
 8000a34:	4919      	ldr	r1, [pc, #100]	; (8000a9c <get_Authentication_type+0xe8>)
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f002 fc38 	bl	80032ac <strtok>
 8000a3c:	60b8      	str	r0, [r7, #8]
	 token = strtok(token, "=");
 8000a3e:	4918      	ldr	r1, [pc, #96]	; (8000aa0 <get_Authentication_type+0xec>)
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f002 fc33 	bl	80032ac <strtok>
 8000a46:	60b8      	str	r0, [r7, #8]
	 token = strtok(NULL," ");
 8000a48:	4916      	ldr	r1, [pc, #88]	; (8000aa4 <get_Authentication_type+0xf0>)
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f002 fc2e 	bl	80032ac <strtok>
 8000a50:	60b8      	str	r0, [r7, #8]
		if(token == NULL)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <get_Authentication_type+0xac>
		 {
			 return get_Authentication_type();
 8000a58:	f7ff ffac 	bl	80009b4 <get_Authentication_type>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	e013      	b.n	8000a88 <get_Authentication_type+0xd4>
		 }else
		 {
			 switch((char)*token)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b32      	cmp	r3, #50	; 0x32
 8000a66:	d00a      	beq.n	8000a7e <get_Authentication_type+0xca>
 8000a68:	2b32      	cmp	r3, #50	; 0x32
 8000a6a:	dc0a      	bgt.n	8000a82 <get_Authentication_type+0xce>
 8000a6c:	2b30      	cmp	r3, #48	; 0x30
 8000a6e:	d002      	beq.n	8000a76 <get_Authentication_type+0xc2>
 8000a70:	2b31      	cmp	r3, #49	; 0x31
 8000a72:	d002      	beq.n	8000a7a <get_Authentication_type+0xc6>
 8000a74:	e005      	b.n	8000a82 <get_Authentication_type+0xce>
			 		{
			 		case 48:
			 			return 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e006      	b.n	8000a88 <get_Authentication_type+0xd4>
			 		case 49:
			 			return 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e004      	b.n	8000a88 <get_Authentication_type+0xd4>
			 		case 50:
			 			return 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e002      	b.n	8000a88 <get_Authentication_type+0xd4>
			 		default:
			 			error("BlueTooh BLE Authentication Error");
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <get_Authentication_type+0xf4>)
 8000a84:	f002 f910 	bl	8002ca8 <error>
			 		}
		 }
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	08004388 	.word	0x08004388
 8000a94:	24000080 	.word	0x24000080
 8000a98:	08004394 	.word	0x08004394
 8000a9c:	080041c0 	.word	0x080041c0
 8000aa0:	080041c4 	.word	0x080041c4
 8000aa4:	080041c8 	.word	0x080041c8
 8000aa8:	080043b4 	.word	0x080043b4

08000aac <get_Baud_Rate>:
void set_Authentication_type(short type);

unsigned long get_Baud_Rate(void)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 8000ab2:	2064      	movs	r0, #100	; 0x64
 8000ab4:	f001 fc0a 	bl	80022cc <systickDelayMs>
	char* temp ;
		unsigned long size = 0 ;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
		char* cmd = "AT+BAUD\r\n";
 8000abc:	4b40      	ldr	r3, [pc, #256]	; (8000bc0 <get_Baud_Rate+0x114>)
 8000abe:	60fb      	str	r3, [r7, #12]
		short try_count = -1 ;
 8000ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac4:	827b      	strh	r3, [r7, #18]
		//Wait until receive bluetooh responds
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000ac6:	e024      	b.n	8000b12 <get_Baud_Rate+0x66>
			size = 0 ;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000acc:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <get_Baud_Rate+0x118>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fc05 	bl	80002e0 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68f9      	ldr	r1, [r7, #12]
 8000adc:	4620      	mov	r0, r4
 8000ade:	f001 fe59 	bl	8002794 <uart_send_string>
		systickDelayMs(200);
 8000ae2:	20c8      	movs	r0, #200	; 0xc8
 8000ae4:	f001 fbf2 	bl	80022cc <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <get_Baud_Rate+0x118>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fe8b 	bl	800280c <uart_get_buffer>
 8000af6:	6178      	str	r0, [r7, #20]
		try_count++ ;
 8000af8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 8000b04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b0c:	d101      	bne.n	8000b12 <get_Baud_Rate+0x66>
		{
			return false ;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e051      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d9d7      	bls.n	8000ac8 <get_Baud_Rate+0x1c>
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b45      	cmp	r3, #69	; 0x45
 8000b1e:	d104      	bne.n	8000b2a <get_Baud_Rate+0x7e>
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b52      	cmp	r3, #82	; 0x52
 8000b28:	d0ce      	beq.n	8000ac8 <get_Baud_Rate+0x1c>
		}
		}
		 char * token = strtok(temp, "\r\n");
 8000b2a:	4927      	ldr	r1, [pc, #156]	; (8000bc8 <get_Baud_Rate+0x11c>)
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f002 fbbd 	bl	80032ac <strtok>
 8000b32:	60b8      	str	r0, [r7, #8]
		 token = strtok(token, "=");
 8000b34:	4925      	ldr	r1, [pc, #148]	; (8000bcc <get_Baud_Rate+0x120>)
 8000b36:	68b8      	ldr	r0, [r7, #8]
 8000b38:	f002 fbb8 	bl	80032ac <strtok>
 8000b3c:	60b8      	str	r0, [r7, #8]
		 token = strtok(NULL," ");
 8000b3e:	4924      	ldr	r1, [pc, #144]	; (8000bd0 <get_Baud_Rate+0x124>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f002 fbb3 	bl	80032ac <strtok>
 8000b46:	60b8      	str	r0, [r7, #8]
		 if(token == NULL)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <get_Baud_Rate+0xaa>
		 {
			 return get_Baud_Rate();
 8000b4e:	f7ff ffad 	bl	8000aac <get_Baud_Rate>
 8000b52:	4603      	mov	r3, r0
 8000b54:	e02f      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		 }
		 if (!((((char)token[0])>=48)&&(((char)token[0])<=52))){error("Get_Baud Rate not integer");}
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b2f      	cmp	r3, #47	; 0x2f
 8000b5c:	d903      	bls.n	8000b66 <get_Baud_Rate+0xba>
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b34      	cmp	r3, #52	; 0x34
 8000b64:	d902      	bls.n	8000b6c <get_Baud_Rate+0xc0>
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <get_Baud_Rate+0x128>)
 8000b68:	f002 f89e 	bl	8002ca8 <error>
		switch((char)*token)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3b30      	subs	r3, #48	; 0x30
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	d81b      	bhi.n	8000bae <get_Baud_Rate+0x102>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <get_Baud_Rate+0xd0>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b97 	.word	0x08000b97
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	08000ba3 	.word	0x08000ba3
 8000b8c:	08000ba9 	.word	0x08000ba9
		{
		case 48:
			return 115200;
 8000b90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b94:	e00f      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		case 49:
			return 57600;
 8000b96:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b9a:	e00c      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		case 50:
			return 38400;
 8000b9c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ba0:	e009      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		case 51:
			return 19200;
 8000ba2:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000ba6:	e006      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		case 52:
			return 9600;
 8000ba8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000bac:	e003      	b.n	8000bb6 <get_Baud_Rate+0x10a>
		default:
			error("BlueTooh Baud Rate Error");
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <get_Baud_Rate+0x12c>)
 8000bb0:	f002 f87a 	bl	8002ca8 <error>
		}
		return NULL;
 8000bb4:	2300      	movs	r3, #0

}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	080043d8 	.word	0x080043d8
 8000bc4:	24000080 	.word	0x24000080
 8000bc8:	080041c0 	.word	0x080041c0
 8000bcc:	080041c4 	.word	0x080041c4
 8000bd0:	080041c8 	.word	0x080041c8
 8000bd4:	080041e4 	.word	0x080041e4
 8000bd8:	08004200 	.word	0x08004200

08000bdc <set_Baud_Rate>:
 * 1 = 58600
 * 2 = 38400
 * 3 = 19200
 * 4 = 9600*/
void set_Baud_Rate(short baudRateSelection)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	80fb      	strh	r3, [r7, #6]

	systickDelayMs(100);
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f001 fb70 	bl	80022cc <systickDelayMs>
	if(!(baudRateSelection>-1&& baudRateSelection<5))
 8000bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db03      	blt.n	8000bfc <set_Baud_Rate+0x20>
 8000bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	dd03      	ble.n	8000c04 <set_Baud_Rate+0x28>
		error("Baud Rate is not between specifyed parameters");
 8000bfc:	482b      	ldr	r0, [pc, #172]	; (8000cac <set_Baud_Rate+0xd0>)
 8000bfe:	f002 f853 	bl	8002ca8 <error>
 8000c02:	e003      	b.n	8000c0c <set_Baud_Rate+0x30>
	else
		baudRateSelection+=48;
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	3330      	adds	r3, #48	; 0x30
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	80fb      	strh	r3, [r7, #6]
	char* temp ;
	unsigned long size = 0 ;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
	char cmd[10] = "AT+BAUD \r\n";
 8000c10:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <set_Baud_Rate+0xd4>)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c18:	c303      	stmia	r3!, {r0, r1}
 8000c1a:	801a      	strh	r2, [r3, #0]
	cmd[7] = (char)baudRateSelection;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	74fb      	strb	r3, [r7, #19]
	short try_count = -1 ;
 8000c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c26:	847b      	strh	r3, [r7, #34]	; 0x22
	//Wait until receive bluetooh responds
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000c28:	e02a      	b.n	8000c80 <set_Baud_Rate+0xa4>
	size = 0 ;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
	uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <set_Baud_Rate+0xd8>)
 8000c30:	681c      	ldr	r4, [r3, #0]
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fb52 	bl	80002e0 <strlen>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4620      	mov	r0, r4
 8000c48:	f001 fda4 	bl	8002794 <uart_send_string>
	systickDelayMs(200);
 8000c4c:	20c8      	movs	r0, #200	; 0xc8
 8000c4e:	f001 fb3d 	bl	80022cc <systickDelayMs>
	temp = uart_get_buffer(Bluetooh_USART, &size);
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <set_Baud_Rate+0xd8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f107 0218 	add.w	r2, r7, #24
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fdd5 	bl	800280c <uart_get_buffer>
 8000c62:	6278      	str	r0, [r7, #36]	; 0x24
	try_count++ ;
 8000c64:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	847b      	strh	r3, [r7, #34]	; 0x22
	if(try_count ==1000)
 8000c70:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c78:	d102      	bne.n	8000c80 <set_Baud_Rate+0xa4>
	{
		error("Set BAUD rate is failed");
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <set_Baud_Rate+0xdc>)
 8000c7c:	f002 f814 	bl	8002ca8 <error>
	while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d9d1      	bls.n	8000c2a <set_Baud_Rate+0x4e>
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b45      	cmp	r3, #69	; 0x45
 8000c8c:	d104      	bne.n	8000c98 <set_Baud_Rate+0xbc>
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	3301      	adds	r3, #1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b52      	cmp	r3, #82	; 0x52
 8000c96:	d0c8      	beq.n	8000c2a <set_Baud_Rate+0x4e>
	}
}
	char * token = strtok(temp, "\r\n");
 8000c98:	4908      	ldr	r1, [pc, #32]	; (8000cbc <set_Baud_Rate+0xe0>)
 8000c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c9c:	f002 fb06 	bl	80032ac <strtok>
 8000ca0:	61f8      	str	r0, [r7, #28]

}
 8000ca2:	bf00      	nop
 8000ca4:	372c      	adds	r7, #44	; 0x2c
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	bf00      	nop
 8000cac:	080043e4 	.word	0x080043e4
 8000cb0:	08004414 	.word	0x08004414
 8000cb4:	24000080 	.word	0x24000080
 8000cb8:	08004240 	.word	0x08004240
 8000cbc:	080041c0 	.word	0x080041c0

08000cc0 <decimalToBinary>:

#define HSEON	(1U<<16) // HSE clock enable
#define HSERDY	(1U<<17) // HSE clock ready flag

long decimalToBinary(int decimalnum)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    long binarynum = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
    int rem, temp = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]

    while (decimalnum!=0)
 8000cd0:	e019      	b.n	8000d06 <decimalToBinary+0x46>
    {
        rem = decimalnum%2;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	bfb8      	it	lt
 8000cdc:	425b      	neglt	r3, r3
 8000cde:	60fb      	str	r3, [r7, #12]
        decimalnum = decimalnum / 2;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <decimalToBinary+0x28>
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	105b      	asrs	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
        binarynum = binarynum + rem*temp;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
        temp = temp * 10;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
    while (decimalnum!=0)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e2      	bne.n	8000cd2 <decimalToBinary+0x12>
    }
    return binarynum;
 8000d0c:	697b      	ldr	r3, [r7, #20]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <PLLSRC_Select>:
 * 2: HSE selected as PLL clock (hse_ck)
 * 3: No clock send to DIVMx divider and PLLs
 *
 */
void PLLSRC_Select(short select)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
	if(select== 0)
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <PLLSRC_Select+0x2c>
	{
		RCC->PLLCKSELR &= ~(1U<<0);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d40:	f023 0302 	bic.w	r3, r3, #2
 8000d44:	6293      	str	r3, [r2, #40]	; 0x28
	}else
	{
		RCC->PLLCKSELR |=  (1U<<0);
		RCC->PLLCKSELR |=  (1U<<1);
	}
}
 8000d46:	e02d      	b.n	8000da4 <PLLSRC_Select+0x88>
	}else if(select ==1)
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d10c      	bne.n	8000d6a <PLLSRC_Select+0x4e>
		RCC->PLLCKSELR |=  (1U<<0);
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d62:	f023 0302 	bic.w	r3, r3, #2
 8000d66:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000d68:	e01c      	b.n	8000da4 <PLLSRC_Select+0x88>
	}else if(select == 2)
 8000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d10c      	bne.n	8000d8c <PLLSRC_Select+0x70>
		RCC->PLLCKSELR &= ~(1U<<0);
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000d8a:	e00b      	b.n	8000da4 <PLLSRC_Select+0x88>
		RCC->PLLCKSELR |=  (1U<<0);
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <PLLSRC_Select+0x94>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58024400 	.word	0x58024400

08000db4 <DIVM1>:
 * 32: division by 32 (default after reset)
 * ...
 * 63: division by 63
 */
void DIVM1(short prescaler)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
	long temp = decimalToBinary(prescaler);
 8000dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff7c 	bl	8000cc0 <decimalToBinary>
 8000dc8:	6178      	str	r0, [r7, #20]
	for(int i = 4 ; i<10; i++)
 8000dca:	2304      	movs	r3, #4
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e030      	b.n	8000e32 <DIVM1+0x7e>
	{
		short s =  ( temp % 10);
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <DIVM1+0x90>)
 8000dd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000dd8:	1099      	asrs	r1, r3, #2
 8000dda:	17d3      	asrs	r3, r2, #31
 8000ddc:	1ac9      	subs	r1, r1, r3
 8000dde:	460b      	mov	r3, r1
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	1ad1      	subs	r1, r2, r3
 8000de8:	460b      	mov	r3, r1
 8000dea:	81fb      	strh	r3, [r7, #14]
		if(s==1)
 8000dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d109      	bne.n	8000e08 <DIVM1+0x54>
		{
			RCC->PLLCKSELR |= (1U<<i);
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <DIVM1+0x94>)
 8000df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df8:	2101      	movs	r1, #1
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4911      	ldr	r1, [pc, #68]	; (8000e48 <DIVM1+0x94>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	628b      	str	r3, [r1, #40]	; 0x28
 8000e06:	e009      	b.n	8000e1c <DIVM1+0x68>
		}else
		{
			RCC->PLLCKSELR &= ~(1U<<i);
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <DIVM1+0x94>)
 8000e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	490c      	ldr	r1, [pc, #48]	; (8000e48 <DIVM1+0x94>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	628b      	str	r3, [r1, #40]	; 0x28
		}
		temp /= 10;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <DIVM1+0x90>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1092      	asrs	r2, r2, #2
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
	for(int i = 4 ; i<10; i++)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	ddcb      	ble.n	8000dd0 <DIVM1+0x1c>
	}

}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667
 8000e48:	58024400 	.word	0x58024400

08000e4c <SystemClockStatus>:
 * 2: HSE used as system clock (hse_ck)
 * 3: PLL1 used as system clock (pll1_p_ck)
 * others: Reserved
 */
void  SystemClockStatus(short CFGR)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	RCC->CFGR &= ~(1U<<2);
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <SystemClockStatus+0x14c>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	4a4f      	ldr	r2, [pc, #316]	; (8000f98 <SystemClockStatus+0x14c>)
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	6113      	str	r3, [r2, #16]
	bool bit_0, bit_1;
	switch(CFGR)
 8000e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d81e      	bhi.n	8000ea8 <SystemClockStatus+0x5c>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <SystemClockStatus+0x24>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e8b 	.word	0x08000e8b
 8000e78:	08000e95 	.word	0x08000e95
 8000e7c:	08000e9f 	.word	0x08000e9f
	{
	case 0:
		bit_0 = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73bb      	strb	r3, [r7, #14]
		break;
 8000e88:	e013      	b.n	8000eb2 <SystemClockStatus+0x66>
	case 1:
		bit_0 = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73bb      	strb	r3, [r7, #14]
		break;
 8000e92:	e00e      	b.n	8000eb2 <SystemClockStatus+0x66>
	case 2:
		bit_0 = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73bb      	strb	r3, [r7, #14]
			break;
 8000e9c:	e009      	b.n	8000eb2 <SystemClockStatus+0x66>
	case 3:
		bit_0 = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73bb      	strb	r3, [r7, #14]
			break;
 8000ea6:	e004      	b.n	8000eb2 <SystemClockStatus+0x66>
	default:
		bit_0 = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73bb      	strb	r3, [r7, #14]
			break;
 8000eb0:	bf00      	nop

	}


	if(bit_0)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <SystemClockStatus+0x7a>
	{
		RCC-> CFGR |= (1U<<0);
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <SystemClockStatus+0x14c>)
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	4a36      	ldr	r2, [pc, #216]	; (8000f98 <SystemClockStatus+0x14c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6113      	str	r3, [r2, #16]
 8000ec4:	e005      	b.n	8000ed2 <SystemClockStatus+0x86>
	}else
	{
		RCC-> CFGR &= ~(1U<<0);
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <SystemClockStatus+0x14c>)
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <SystemClockStatus+0x14c>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6113      	str	r3, [r2, #16]

	}
	if(bit_1)
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <SystemClockStatus+0x9a>
		{
			RCC-> CFGR |= (1U<<1);
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <SystemClockStatus+0x14c>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <SystemClockStatus+0x14c>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	6113      	str	r3, [r2, #16]
 8000ee4:	e005      	b.n	8000ef2 <SystemClockStatus+0xa6>
		}else
		{
			RCC-> CFGR &= ~(1U<<1);
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <SystemClockStatus+0x14c>)
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <SystemClockStatus+0x14c>)
 8000eec:	f023 0302 	bic.w	r3, r3, #2
 8000ef0:	6113      	str	r3, [r2, #16]

		}
		if(bit_1==0){
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d024      	beq.n	8000f48 <SystemClockStatus+0xfc>
			if(bit_0==0)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f083 0301 	eor.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00f      	beq.n	8000f2a <SystemClockStatus+0xde>
			{
			    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 8000f0a:	bf00      	nop
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0208 	and.w	r2, r3, #8
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d1f8      	bne.n	8000f0c <SystemClockStatus+0xc0>
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	f003 0210 	and.w	r2, r3, #16
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d1f1      	bne.n	8000f0c <SystemClockStatus+0xc0>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));

						}
		}

}
 8000f28:	e030      	b.n	8000f8c <SystemClockStatus+0x140>
			    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 8000f2a:	bf00      	nop
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	f003 0308 	and.w	r3, r3, #8
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d1f9      	bne.n	8000f2c <SystemClockStatus+0xe0>
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	f003 0210 	and.w	r2, r3, #16
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d1f2      	bne.n	8000f2c <SystemClockStatus+0xe0>
}
 8000f46:	e021      	b.n	8000f8c <SystemClockStatus+0x140>
			if(bit_0==0)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f083 0301 	eor.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <SystemClockStatus+0x126>
						    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 8000f54:	bf00      	nop
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	f003 0208 	and.w	r2, r3, #8
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d1f8      	bne.n	8000f56 <SystemClockStatus+0x10a>
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d1f2      	bne.n	8000f56 <SystemClockStatus+0x10a>
}
 8000f70:	e00c      	b.n	8000f8c <SystemClockStatus+0x140>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 8000f72:	bf00      	nop
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d1f9      	bne.n	8000f74 <SystemClockStatus+0x128>
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SystemClockStatus+0x14c>)
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d1f3      	bne.n	8000f74 <SystemClockStatus+0x128>
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	58024400 	.word	0x58024400

08000f9c <PLL1DIVR>:
 * 3: pll1_q_ck = vco1_ck / 4
 * ...
 * 127: pll1_q_ck = vco1_ck / 128
 */
void PLL1DIVR(uint8_t DIVN1, short DIVP1, short DIVQ1, short DIVR1)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4623      	mov	r3, r4
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	807b      	strh	r3, [r7, #2]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	803b      	strh	r3, [r7, #0]
	if(DIVN1<=0x1FF && DIVN1>=0x000){
	RCC->PLL1DIVR  = DIVN1  ;
 8000fba:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <PLL1DIVR+0x19c>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
	long temp = decimalToBinary(DIVP1);
 8000fc0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe7b 	bl	8000cc0 <decimalToBinary>
 8000fca:	61f8      	str	r0, [r7, #28]
		for(int i = 9 ; i<16; i++)
 8000fcc:	2309      	movs	r3, #9
 8000fce:	61bb      	str	r3, [r7, #24]
 8000fd0:	e030      	b.n	8001034 <PLL1DIVR+0x98>
		{
			short s =  ( temp % 10);
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <PLL1DIVR+0x1a0>)
 8000fd6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fda:	1099      	asrs	r1, r3, #2
 8000fdc:	17d3      	asrs	r3, r2, #31
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	1ad1      	subs	r1, r2, r3
 8000fea:	460b      	mov	r3, r1
 8000fec:	817b      	strh	r3, [r7, #10]
			if(s==1)
 8000fee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d109      	bne.n	800100a <PLL1DIVR+0x6e>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000ff6:	4b50      	ldr	r3, [pc, #320]	; (8001138 <PLL1DIVR+0x19c>)
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	494d      	ldr	r1, [pc, #308]	; (8001138 <PLL1DIVR+0x19c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	630b      	str	r3, [r1, #48]	; 0x30
 8001008:	e009      	b.n	800101e <PLL1DIVR+0x82>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 800100a:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <PLL1DIVR+0x19c>)
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	2101      	movs	r1, #1
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	4947      	ldr	r1, [pc, #284]	; (8001138 <PLL1DIVR+0x19c>)
 800101a:	4013      	ands	r3, r2
 800101c:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4a46      	ldr	r2, [pc, #280]	; (800113c <PLL1DIVR+0x1a0>)
 8001022:	fb82 1203 	smull	r1, r2, r2, r3
 8001026:	1092      	asrs	r2, r2, #2
 8001028:	17db      	asrs	r3, r3, #31
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]
		for(int i = 9 ; i<16; i++)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3301      	adds	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	ddcb      	ble.n	8000fd2 <PLL1DIVR+0x36>
		}
	temp = decimalToBinary(DIVQ1);
 800103a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe3e 	bl	8000cc0 <decimalToBinary>
 8001044:	61f8      	str	r0, [r7, #28]
		for(int i = 16; i<23; i++)
 8001046:	2310      	movs	r3, #16
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e030      	b.n	80010ae <PLL1DIVR+0x112>
		{
			short s =  ( temp % 10);
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <PLL1DIVR+0x1a0>)
 8001050:	fb83 1302 	smull	r1, r3, r3, r2
 8001054:	1099      	asrs	r1, r3, #2
 8001056:	17d3      	asrs	r3, r2, #31
 8001058:	1ac9      	subs	r1, r1, r3
 800105a:	460b      	mov	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	1ad1      	subs	r1, r2, r3
 8001064:	460b      	mov	r3, r1
 8001066:	81bb      	strh	r3, [r7, #12]
			if(s==1)
 8001068:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d109      	bne.n	8001084 <PLL1DIVR+0xe8>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <PLL1DIVR+0x19c>)
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	2101      	movs	r1, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	492e      	ldr	r1, [pc, #184]	; (8001138 <PLL1DIVR+0x19c>)
 800107e:	4313      	orrs	r3, r2
 8001080:	630b      	str	r3, [r1, #48]	; 0x30
 8001082:	e009      	b.n	8001098 <PLL1DIVR+0xfc>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <PLL1DIVR+0x19c>)
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	2101      	movs	r1, #1
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	4929      	ldr	r1, [pc, #164]	; (8001138 <PLL1DIVR+0x19c>)
 8001094:	4013      	ands	r3, r2
 8001096:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <PLL1DIVR+0x1a0>)
 800109c:	fb82 1203 	smull	r1, r2, r2, r3
 80010a0:	1092      	asrs	r2, r2, #2
 80010a2:	17db      	asrs	r3, r3, #31
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	61fb      	str	r3, [r7, #28]
		for(int i = 16; i<23; i++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b16      	cmp	r3, #22
 80010b2:	ddcb      	ble.n	800104c <PLL1DIVR+0xb0>
		}
	temp = decimalToBinary(DIVR1);
 80010b4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe01 	bl	8000cc0 <decimalToBinary>
 80010be:	61f8      	str	r0, [r7, #28]
		for(int i =24 ; i<31; i++)
 80010c0:	2318      	movs	r3, #24
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	e030      	b.n	8001128 <PLL1DIVR+0x18c>
		{
			short s =  ( temp % 10);
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <PLL1DIVR+0x1a0>)
 80010ca:	fb83 1302 	smull	r1, r3, r3, r2
 80010ce:	1099      	asrs	r1, r3, #2
 80010d0:	17d3      	asrs	r3, r2, #31
 80010d2:	1ac9      	subs	r1, r1, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	1ad1      	subs	r1, r2, r3
 80010de:	460b      	mov	r3, r1
 80010e0:	81fb      	strh	r3, [r7, #14]
			if(s==1)
 80010e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d109      	bne.n	80010fe <PLL1DIVR+0x162>
			{
				RCC->PLL1DIVR |= (1U<<i);
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <PLL1DIVR+0x19c>)
 80010ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ee:	2101      	movs	r1, #1
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	4910      	ldr	r1, [pc, #64]	; (8001138 <PLL1DIVR+0x19c>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	630b      	str	r3, [r1, #48]	; 0x30
 80010fc:	e009      	b.n	8001112 <PLL1DIVR+0x176>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <PLL1DIVR+0x19c>)
 8001100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001102:	2101      	movs	r1, #1
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	490a      	ldr	r1, [pc, #40]	; (8001138 <PLL1DIVR+0x19c>)
 800110e:	4013      	ands	r3, r2
 8001110:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	4a09      	ldr	r2, [pc, #36]	; (800113c <PLL1DIVR+0x1a0>)
 8001116:	fb82 1203 	smull	r1, r2, r2, r3
 800111a:	1092      	asrs	r2, r2, #2
 800111c:	17db      	asrs	r3, r3, #31
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	61fb      	str	r3, [r7, #28]
		for(int i =24 ; i<31; i++)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3301      	adds	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b1e      	cmp	r3, #30
 800112c:	ddcb      	ble.n	80010c6 <PLL1DIVR+0x12a>
	{
		//Wrong Configuration
		while(1);
	}

}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3724      	adds	r7, #36	; 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	58024400 	.word	0x58024400
 800113c:	66666667 	.word	0x66666667

08001140 <input_frequency_range>:
 *  1: The PLL1 input (ref1_ck) clock range frequency is between 2 and 4 MHz
 *  2: The PLL1 input (ref1_ck) clock range frequency is between 4 and 8 MHz
 *  3: The PLL1 input (ref1_ck) clock range frequency is between 8 and 16 MHz
 */
void input_frequency_range (short PLL1RGE)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
	switch(PLL1RGE)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d83d      	bhi.n	80011ce <input_frequency_range+0x8e>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <input_frequency_range+0x18>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001169 	.word	0x08001169
 800115c:	08001183 	.word	0x08001183
 8001160:	0800119d 	.word	0x0800119d
 8001164:	080011b7 	.word	0x080011b7
	{
	case 0 :
		RCC->PLLCFGR &= ~(1U<<2);
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <input_frequency_range+0xb4>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <input_frequency_range+0xb4>)
 800116e:	f023 0304 	bic.w	r3, r3, #4
 8001172:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <input_frequency_range+0xb4>)
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <input_frequency_range+0xb4>)
 800117a:	f023 0308 	bic.w	r3, r3, #8
 800117e:	62d3      	str	r3, [r2, #44]	; 0x2c
		break ;
 8001180:	e032      	b.n	80011e8 <input_frequency_range+0xa8>
	case 1 :
		RCC->PLLCFGR |= (1U<<2);
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <input_frequency_range+0xb4>)
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <input_frequency_range+0xb4>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <input_frequency_range+0xb4>)
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <input_frequency_range+0xb4>)
 8001194:	f023 0308 	bic.w	r3, r3, #8
 8001198:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 800119a:	e025      	b.n	80011e8 <input_frequency_range+0xa8>
	case 2 :
		RCC->PLLCFGR |= (1U<<3);
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <input_frequency_range+0xb4>)
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <input_frequency_range+0xb4>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<2);
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <input_frequency_range+0xb4>)
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <input_frequency_range+0xb4>)
 80011ae:	f023 0304 	bic.w	r3, r3, #4
 80011b2:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80011b4:	e018      	b.n	80011e8 <input_frequency_range+0xa8>
	case 3 :
		RCC->PLLCFGR |= (1U<<3);
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <input_frequency_range+0xb4>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <input_frequency_range+0xb4>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR |= (1U<<2);
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <input_frequency_range+0xb4>)
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <input_frequency_range+0xb4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	62d3      	str	r3, [r2, #44]	; 0x2c
	default:
		RCC->PLLCFGR &= ~(1U<<2);
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <input_frequency_range+0xb4>)
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <input_frequency_range+0xb4>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <input_frequency_range+0xb4>)
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <input_frequency_range+0xb4>)
 80011e0:	f023 0308 	bic.w	r3, r3, #8
 80011e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58024400 	.word	0x58024400

080011f8 <PLL1VCOSEL>:
 * These bits must be written before enabling the PLL1.
 * 0: Wide VCO range: 192 to 836 MHz (default after reset)
 * 1: Medium VCO range: 150 to 420 MHz
 */
void PLL1VCOSEL(bool wideOrMedium)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	if(wideOrMedium)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <PLL1VCOSEL+0x1e>
	{
		RCC->PLLCFGR |= (1U<<1);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <PLL1VCOSEL+0x38>)
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <PLL1VCOSEL+0x38>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	62d3      	str	r3, [r2, #44]	; 0x2c
	}else
	{
		RCC->PLLCFGR &= ~(1U<<1);
	}
}
 8001214:	e005      	b.n	8001222 <PLL1VCOSEL+0x2a>
		RCC->PLLCFGR &= ~(1U<<1);
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <PLL1VCOSEL+0x38>)
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <PLL1VCOSEL+0x38>)
 800121c:	f023 0302 	bic.w	r3, r3, #2
 8001220:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	58024400 	.word	0x58024400

08001234 <enable_PLL1_OutputDividers>:
void enable_PLL1_OutputDividers(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<16) ;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 800123e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001242:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<17) ;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124e:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<18) ;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <enable_PLL1_OutputDividers+0x34>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	58024400 	.word	0x58024400

0800126c <enable_PLL1_FractionalDivider>:
void enable_PLL1_FractionalDivider(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<0) ;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <enable_PLL1_FractionalDivider+0x1c>)
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <enable_PLL1_FractionalDivider+0x1c>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	58024400 	.word	0x58024400

0800128c <StartPLL1>:
void StartPLL1(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	RCC->CR |= (1U<<24); //Start PLL1
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <StartPLL1+0x2c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <StartPLL1+0x2c>)
 8001296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR &(1U<<25))); //Wait until ON
 800129c:	bf00      	nop
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <StartPLL1+0x2c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f9      	beq.n	800129e <StartPLL1+0x12>
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	58024400 	.word	0x58024400

080012bc <D1CFGR_D1CPRE>:
 * 6: sys_ck divided by 128
 * 7: sys_ck divided by 256
 * 8: sys_ck divided by 512
 */
void D1CFGR_D1CPRE(short D1CPRE)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
	switch(D1CPRE)
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	f200 80f7 	bhi.w	80014be <D1CFGR_D1CPRE+0x202>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <D1CFGR_D1CPRE+0x1c>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012fd 	.word	0x080012fd
 80012dc:	0800132f 	.word	0x0800132f
 80012e0:	08001361 	.word	0x08001361
 80012e4:	08001393 	.word	0x08001393
 80012e8:	080013c5 	.word	0x080013c5
 80012ec:	080013f7 	.word	0x080013f7
 80012f0:	08001429 	.word	0x08001429
 80012f4:	0800145b 	.word	0x0800145b
 80012f8:	0800148d 	.word	0x0800148d
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<8);
 80012fc:	4b7f      	ldr	r3, [pc, #508]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a7e      	ldr	r2, [pc, #504]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001306:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800130e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001312:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a78      	ldr	r2, [pc, #480]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800131a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800131e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 8001320:	4b76      	ldr	r3, [pc, #472]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a75      	ldr	r2, [pc, #468]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800132a:	6193      	str	r3, [r2, #24]
		break;
 800132c:	e0e0      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<8);
 800132e:	4b73      	ldr	r3, [pc, #460]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a72      	ldr	r2, [pc, #456]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001338:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 800133a:	4b70      	ldr	r3, [pc, #448]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001344:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800134c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001350:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a69      	ldr	r2, [pc, #420]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800135c:	6193      	str	r3, [r2, #24]
	    break;
 800135e:	e0c7      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<8);
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 800136c:	4b63      	ldr	r3, [pc, #396]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a62      	ldr	r2, [pc, #392]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001372:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001376:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8001378:	4b60      	ldr	r3, [pc, #384]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a5f      	ldr	r2, [pc, #380]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800137e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001382:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8001384:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800138a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800138e:	6193      	str	r3, [r2, #24]
	    break;
 8001390:	e0ae      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<8);
 8001392:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a59      	ldr	r2, [pc, #356]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 800139e:	4b57      	ldr	r3, [pc, #348]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a56      	ldr	r2, [pc, #344]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 80013aa:	4b54      	ldr	r3, [pc, #336]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a53      	ldr	r2, [pc, #332]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013b4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a50      	ldr	r2, [pc, #320]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c0:	6193      	str	r3, [r2, #24]
	    break;
 80013c2:	e095      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<8);
 80013c4:	4b4d      	ldr	r3, [pc, #308]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013da:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a46      	ldr	r2, [pc, #280]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 80013e8:	4b44      	ldr	r3, [pc, #272]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f2:	6193      	str	r3, [r2, #24]
		break;
 80013f4:	e07c      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<8);
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80013fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001400:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800140c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a3a      	ldr	r2, [pc, #232]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001418:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a37      	ldr	r2, [pc, #220]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001424:	6193      	str	r3, [r2, #24]
		break;
 8001426:	e063      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<8);
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a33      	ldr	r2, [pc, #204]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a30      	ldr	r2, [pc, #192]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800143a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800143e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001456:	6193      	str	r3, [r2, #24]
		break;
 8001458:	e04a      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<8);
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	4a27      	ldr	r2, [pc, #156]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001464:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800146c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001470:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001488:	6193      	str	r3, [r2, #24]
		break;
 800148a:	e031      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<8);
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ba:	6193      	str	r3, [r2, #24]
		break;
 80014bc:	e018      	b.n	80014f0 <D1CFGR_D1CPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<8);
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014d4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014e0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <D1CFGR_D1CPRE+0x240>)
 80014e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014ec:	6193      	str	r3, [r2, #24]
		break;
 80014ee:	bf00      	nop
	}
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	58024400 	.word	0x58024400

08001500 <D1CFGR_HPRE>:
 * Note: The clocks are divided by the new prescaler factor from1 to 16 periods of the slowest APB
 * clock among rcc_pclk[4:1] after HPRE update.
 * Note: Note also that rcc_hclk3 = rcc_aclk.
 */
void D1CFGR_HPRE(short HPRE)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
	switch(HPRE)
 800150a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150e:	2b08      	cmp	r3, #8
 8001510:	f200 80f7 	bhi.w	8001702 <D1CFGR_HPRE+0x202>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <D1CFGR_HPRE+0x1c>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001541 	.word	0x08001541
 8001520:	08001573 	.word	0x08001573
 8001524:	080015a5 	.word	0x080015a5
 8001528:	080015d7 	.word	0x080015d7
 800152c:	08001609 	.word	0x08001609
 8001530:	0800163b 	.word	0x0800163b
 8001534:	0800166d 	.word	0x0800166d
 8001538:	0800169f 	.word	0x0800169f
 800153c:	080016d1 	.word	0x080016d1
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<0);
 8001540:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a7e      	ldr	r2, [pc, #504]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <D1CFGR_HPRE+0x240>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001552:	f023 0302 	bic.w	r3, r3, #2
 8001556:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8001558:	4b79      	ldr	r3, [pc, #484]	; (8001740 <D1CFGR_HPRE+0x240>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a78      	ldr	r2, [pc, #480]	; (8001740 <D1CFGR_HPRE+0x240>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 8001564:	4b76      	ldr	r3, [pc, #472]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a75      	ldr	r2, [pc, #468]	; (8001740 <D1CFGR_HPRE+0x240>)
 800156a:	f023 0308 	bic.w	r3, r3, #8
 800156e:	6193      	str	r3, [r2, #24]
		break;
 8001570:	e0e0      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<0);
 8001572:	4b73      	ldr	r3, [pc, #460]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	4a72      	ldr	r2, [pc, #456]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 800157e:	4b70      	ldr	r3, [pc, #448]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001584:	f023 0302 	bic.w	r3, r3, #2
 8001588:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 800158a:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <D1CFGR_HPRE+0x240>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a6c      	ldr	r2, [pc, #432]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <D1CFGR_HPRE+0x240>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6193      	str	r3, [r2, #24]
	    break;
 80015a2:	e0c7      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<0);
 80015a4:	4b66      	ldr	r3, [pc, #408]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 80015b0:	4b63      	ldr	r3, [pc, #396]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a62      	ldr	r2, [pc, #392]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015b6:	f023 0302 	bic.w	r3, r3, #2
 80015ba:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 80015bc:	4b60      	ldr	r3, [pc, #384]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80015c8:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a5c      	ldr	r2, [pc, #368]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6193      	str	r3, [r2, #24]
	    break;
 80015d4:	e0ae      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<0);
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a59      	ldr	r2, [pc, #356]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a56      	ldr	r2, [pc, #344]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a53      	ldr	r2, [pc, #332]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <D1CFGR_HPRE+0x240>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6193      	str	r3, [r2, #24]
	    break;
 8001606:	e095      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<0);
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <D1CFGR_HPRE+0x240>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a4c      	ldr	r2, [pc, #304]	; (8001740 <D1CFGR_HPRE+0x240>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8001614:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a49      	ldr	r2, [pc, #292]	; (8001740 <D1CFGR_HPRE+0x240>)
 800161a:	f043 0302 	orr.w	r3, r3, #2
 800161e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a46      	ldr	r2, [pc, #280]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001626:	f023 0304 	bic.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 800162c:	4b44      	ldr	r3, [pc, #272]	; (8001740 <D1CFGR_HPRE+0x240>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a43      	ldr	r2, [pc, #268]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
		break;
 8001638:	e07c      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<0);
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <D1CFGR_HPRE+0x240>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a40      	ldr	r2, [pc, #256]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <D1CFGR_HPRE+0x240>)
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	4a37      	ldr	r2, [pc, #220]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6193      	str	r3, [r2, #24]
		break;
 800166a:	e063      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<0);
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <D1CFGR_HPRE+0x240>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a33      	ldr	r2, [pc, #204]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <D1CFGR_HPRE+0x240>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <D1CFGR_HPRE+0x240>)
 800167e:	f023 0302 	bic.w	r3, r3, #2
 8001682:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <D1CFGR_HPRE+0x240>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6193      	str	r3, [r2, #24]
		break;
 800169c:	e04a      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<0);
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a27      	ldr	r2, [pc, #156]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a24      	ldr	r2, [pc, #144]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6193      	str	r3, [r2, #24]
		break;
 80016ce:	e031      	b.n	8001734 <D1CFGR_HPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<0);
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a17      	ldr	r2, [pc, #92]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a11      	ldr	r2, [pc, #68]	; (8001740 <D1CFGR_HPRE+0x240>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	6193      	str	r3, [r2, #24]
		break;
 8001700:	e018      	b.n	8001734 <D1CFGR_HPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<0);
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001714:	f023 0302 	bic.w	r3, r3, #2
 8001718:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <D1CFGR_HPRE+0x240>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <D1CFGR_HPRE+0x240>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <D1CFGR_HPRE+0x240>)
 800172c:	f023 0308 	bic.w	r3, r3, #8
 8001730:	6193      	str	r3, [r2, #24]
		break;
 8001732:	bf00      	nop
	}
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	58024400 	.word	0x58024400

08001744 <D1PPRE>:
 * 2: rcc_pclk3 = rcc_hclk3 / 4
 * 3: rcc_pclk3 = rcc_hclk3 / 8
 * 4: rcc_pclk3 = rcc_hclk3 / 16
 */
void D1PPRE(short D1PPRE)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	switch (D1PPRE)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	2b04      	cmp	r3, #4
 8001754:	d867      	bhi.n	8001826 <D1PPRE+0xe2>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <D1PPRE+0x18>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	08001771 	.word	0x08001771
 8001760:	08001797 	.word	0x08001797
 8001764:	080017bb 	.word	0x080017bb
 8001768:	080017df 	.word	0x080017df
 800176c:	08001803 	.word	0x08001803
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<4);
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <D1PPRE+0x114>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a38      	ldr	r2, [pc, #224]	; (8001858 <D1PPRE+0x114>)
 8001776:	f023 0310 	bic.w	r3, r3, #16
 800177a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <D1PPRE+0x114>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a35      	ldr	r2, [pc, #212]	; (8001858 <D1PPRE+0x114>)
 8001782:	f023 0320 	bic.w	r3, r3, #32
 8001786:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <D1PPRE+0x114>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a32      	ldr	r2, [pc, #200]	; (8001858 <D1PPRE+0x114>)
 800178e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001792:	6193      	str	r3, [r2, #24]
		break;
 8001794:	e05a      	b.n	800184c <D1PPRE+0x108>
	case 1 :
		RCC->D1CFGR &= ~(1U<<4);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <D1PPRE+0x114>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <D1PPRE+0x114>)
 800179c:	f023 0310 	bic.w	r3, r3, #16
 80017a0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <D1PPRE+0x114>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <D1PPRE+0x114>)
 80017a8:	f023 0320 	bic.w	r3, r3, #32
 80017ac:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <D1PPRE+0x114>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a29      	ldr	r2, [pc, #164]	; (8001858 <D1PPRE+0x114>)
 80017b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b8:	6193      	str	r3, [r2, #24]
	case 2 :
		RCC->D1CFGR |= (1U<<4);
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <D1PPRE+0x114>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a26      	ldr	r2, [pc, #152]	; (8001858 <D1PPRE+0x114>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <D1PPRE+0x114>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <D1PPRE+0x114>)
 80017cc:	f023 0320 	bic.w	r3, r3, #32
 80017d0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <D1PPRE+0x114>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <D1PPRE+0x114>)
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	6193      	str	r3, [r2, #24]
	case 3 :
		RCC->D1CFGR &= ~(1U<<4);
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <D1PPRE+0x114>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <D1PPRE+0x114>)
 80017e4:	f023 0310 	bic.w	r3, r3, #16
 80017e8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <D1PPRE+0x114>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <D1PPRE+0x114>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <D1PPRE+0x114>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <D1PPRE+0x114>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	6193      	str	r3, [r2, #24]
	case 4 :
		RCC->D1CFGR |= (1U<<4);
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <D1PPRE+0x114>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <D1PPRE+0x114>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <D1PPRE+0x114>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a11      	ldr	r2, [pc, #68]	; (8001858 <D1PPRE+0x114>)
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <D1PPRE+0x114>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <D1PPRE+0x114>)
 8001820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001824:	6193      	str	r3, [r2, #24]
	default:
		RCC->D1CFGR &= ~(1U<<4);
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <D1PPRE+0x114>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <D1PPRE+0x114>)
 800182c:	f023 0310 	bic.w	r3, r3, #16
 8001830:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <D1PPRE+0x114>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <D1PPRE+0x114>)
 8001838:	f023 0320 	bic.w	r3, r3, #32
 800183c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <D1PPRE+0x114>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <D1PPRE+0x114>)
 8001844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001848:	6193      	str	r3, [r2, #24]
		break;
 800184a:	bf00      	nop
	}
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	58024400 	.word	0x58024400

0800185c <D2PPRE1>:
 *  3: rcc_pclk1 = rcc_hclk1 / 8
 *  4: rcc_pclk1 = rcc_hclk1 / 16
 *  Bits 3:0 Reserved, must be kept at reset value.
 */
void D2PPRE1(short D2PPRE1)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
	switch (D2PPRE1)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	2b04      	cmp	r3, #4
 800186c:	d867      	bhi.n	800193e <D2PPRE1+0xe2>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <D2PPRE1+0x18>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001889 	.word	0x08001889
 8001878:	080018af 	.word	0x080018af
 800187c:	080018d3 	.word	0x080018d3
 8001880:	080018f7 	.word	0x080018f7
 8001884:	0800191b 	.word	0x0800191b
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <D2PPRE1+0x114>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a38      	ldr	r2, [pc, #224]	; (8001970 <D2PPRE1+0x114>)
 800188e:	f023 0310 	bic.w	r3, r3, #16
 8001892:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <D2PPRE1+0x114>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	4a35      	ldr	r2, [pc, #212]	; (8001970 <D2PPRE1+0x114>)
 800189a:	f023 0320 	bic.w	r3, r3, #32
 800189e:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <D2PPRE1+0x114>)
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <D2PPRE1+0x114>)
 80018a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018aa:	61d3      	str	r3, [r2, #28]
		break;
 80018ac:	e05a      	b.n	8001964 <D2PPRE1+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <D2PPRE1+0x114>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <D2PPRE1+0x114>)
 80018b4:	f023 0310 	bic.w	r3, r3, #16
 80018b8:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <D2PPRE1+0x114>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <D2PPRE1+0x114>)
 80018c0:	f023 0320 	bic.w	r3, r3, #32
 80018c4:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <D2PPRE1+0x114>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a29      	ldr	r2, [pc, #164]	; (8001970 <D2PPRE1+0x114>)
 80018cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d0:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <D2PPRE1+0x114>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <D2PPRE1+0x114>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <D2PPRE1+0x114>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <D2PPRE1+0x114>)
 80018e4:	f023 0320 	bic.w	r3, r3, #32
 80018e8:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <D2PPRE1+0x114>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a20      	ldr	r2, [pc, #128]	; (8001970 <D2PPRE1+0x114>)
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <D2PPRE1+0x114>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <D2PPRE1+0x114>)
 80018fc:	f023 0310 	bic.w	r3, r3, #16
 8001900:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <D2PPRE1+0x114>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a1a      	ldr	r2, [pc, #104]	; (8001970 <D2PPRE1+0x114>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <D2PPRE1+0x114>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <D2PPRE1+0x114>)
 8001914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001918:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <D2PPRE1+0x114>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <D2PPRE1+0x114>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <D2PPRE1+0x114>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a11      	ldr	r2, [pc, #68]	; (8001970 <D2PPRE1+0x114>)
 800192c:	f043 0320 	orr.w	r3, r3, #32
 8001930:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <D2PPRE1+0x114>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <D2PPRE1+0x114>)
 8001938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193c:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <D2PPRE1+0x114>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <D2PPRE1+0x114>)
 8001944:	f023 0310 	bic.w	r3, r3, #16
 8001948:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <D2PPRE1+0x114>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <D2PPRE1+0x114>)
 8001950:	f023 0320 	bic.w	r3, r3, #32
 8001954:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <D2PPRE1+0x114>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <D2PPRE1+0x114>)
 800195c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001960:	61d3      	str	r3, [r2, #28]
		break;
 8001962:	bf00      	nop
	}
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	58024400 	.word	0x58024400

08001974 <D3PPRE>:
110: rcc_pclk4 = rcc_hclk4 / 8
111: rcc_pclk4 = rcc_hclk4 / 16
Bits 3:0 Reserved, must be kept at reset value
 */
void D3PPRE(short D3PPRE)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	switch (D3PPRE)
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	2b04      	cmp	r3, #4
 8001984:	d867      	bhi.n	8001a56 <D3PPRE+0xe2>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <D3PPRE+0x18>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	080019a1 	.word	0x080019a1
 8001990:	080019c7 	.word	0x080019c7
 8001994:	080019eb 	.word	0x080019eb
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a33 	.word	0x08001a33
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 80019a0:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <D3PPRE+0x114>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <D3PPRE+0x114>)
 80019a6:	f023 0310 	bic.w	r3, r3, #16
 80019aa:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80019ac:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <D3PPRE+0x114>)
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	4a35      	ldr	r2, [pc, #212]	; (8001a88 <D3PPRE+0x114>)
 80019b2:	f023 0320 	bic.w	r3, r3, #32
 80019b6:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <D3PPRE+0x114>)
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <D3PPRE+0x114>)
 80019be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019c2:	61d3      	str	r3, [r2, #28]
		break;
 80019c4:	e05a      	b.n	8001a7c <D3PPRE+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <D3PPRE+0x114>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <D3PPRE+0x114>)
 80019cc:	f023 0310 	bic.w	r3, r3, #16
 80019d0:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <D3PPRE+0x114>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <D3PPRE+0x114>)
 80019d8:	f023 0320 	bic.w	r3, r3, #32
 80019dc:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <D3PPRE+0x114>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <D3PPRE+0x114>)
 80019e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e8:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <D3PPRE+0x114>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <D3PPRE+0x114>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <D3PPRE+0x114>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a23      	ldr	r2, [pc, #140]	; (8001a88 <D3PPRE+0x114>)
 80019fc:	f023 0320 	bic.w	r3, r3, #32
 8001a00:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <D3PPRE+0x114>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <D3PPRE+0x114>)
 8001a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0c:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <D3PPRE+0x114>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <D3PPRE+0x114>)
 8001a14:	f023 0310 	bic.w	r3, r3, #16
 8001a18:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <D3PPRE+0x114>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <D3PPRE+0x114>)
 8001a20:	f043 0320 	orr.w	r3, r3, #32
 8001a24:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <D3PPRE+0x114>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <D3PPRE+0x114>)
 8001a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a30:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <D3PPRE+0x114>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <D3PPRE+0x114>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <D3PPRE+0x114>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <D3PPRE+0x114>)
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <D3PPRE+0x114>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <D3PPRE+0x114>)
 8001a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a54:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <D3PPRE+0x114>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	; (8001a88 <D3PPRE+0x114>)
 8001a5c:	f023 0310 	bic.w	r3, r3, #16
 8001a60:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <D3PPRE+0x114>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <D3PPRE+0x114>)
 8001a68:	f023 0320 	bic.w	r3, r3, #32
 8001a6c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <D3PPRE+0x114>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <D3PPRE+0x114>)
 8001a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a78:	61d3      	str	r3, [r2, #28]
		break;
 8001a7a:	bf00      	nop
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	58024400 	.word	0x58024400

08001a8c <SysClockConfig>:
 * 		APB2 Timer Clocks: 240MHz
 * 		APB4 Peripheral Clocks: 120MHz
 * 		APB4 Timer Clocks: 240MHz
 */
void SysClockConfig(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	RCC->CR |= HSEON; //Enable  the HSE Clock
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <SysClockConfig+0x7c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <SysClockConfig+0x7c>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & HSERDY)); //Wait until HSE is ready
 8001a9c:	bf00      	nop
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <SysClockConfig+0x7c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f9      	beq.n	8001a9e <SysClockConfig+0x12>
	//PLLSRC Source Mux
	PLLSRC_Select(2);
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f7ff f936 	bl	8000d1c <PLLSRC_Select>
	//DIVM1 PPL1
	DIVM1(DIVM1_SC);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff f97f 	bl	8000db4 <DIVM1>
	PLL1DIVR(DIVN1_SC, DIVP1_SC, DIVQ1_SC, DIVR1_SC);
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2101      	movs	r1, #1
 8001abc:	2078      	movs	r0, #120	; 0x78
 8001abe:	f7ff fa6d 	bl	8000f9c <PLL1DIVR>
	input_frequency_range(2);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7ff fb3c 	bl	8001140 <input_frequency_range>
	PLL1VCOSEL(0);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fb95 	bl	80011f8 <PLL1VCOSEL>
	enable_PLL1_OutputDividers();
 8001ace:	f7ff fbb1 	bl	8001234 <enable_PLL1_OutputDividers>
	enable_PLL1_FractionalDivider();
 8001ad2:	f7ff fbcb 	bl	800126c <enable_PLL1_FractionalDivider>
	StartPLL1();
 8001ad6:	f7ff fbd9 	bl	800128c <StartPLL1>
	D1CFGR_HPRE(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fd10 	bl	8001500 <D1CFGR_HPRE>
	D1CFGR_D1CPRE(0);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fbeb 	bl	80012bc <D1CFGR_D1CPRE>
	SystemClockStatus(3);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f7ff f9b0 	bl	8000e4c <SystemClockStatus>
	D1PPRE(1);
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fe29 	bl	8001744 <D1PPRE>
	D2PPRE1(1);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff feb2 	bl	800185c <D2PPRE1>
	D2PPRE1(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff feaf 	bl	800185c <D2PPRE1>
	D3PPRE(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff ff38 	bl	8001974 <D3PPRE>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400

08001b0c <get_SYSCLK>:
unsigned long  get_SYSCLK()
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
	unsigned long SysClock =  8000000;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <get_SYSCLK+0x2c>)
 8001b14:	607b      	str	r3, [r7, #4]
	SysClock /= DIVM1_SC ;
	SysClock *= DIVN1_SC ;
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	607b      	str	r3, [r7, #4]
	SysClock /= (DIVP1_SC+1) ;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
	return SysClock;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <SysClockAfter_D1Prescaler>:
unsigned long SysClockAfter_D1Prescaler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
	unsigned long SysClock = get_SYSCLK();
 8001b42:	f7ff ffe3 	bl	8001b0c <get_SYSCLK>
 8001b46:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D1CPRE_SC);
 8001b48:	2301      	movs	r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
	unsigned long x = SysClock/s;
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	607b      	str	r3, [r7, #4]
	SysClock =x ;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
	return SysClock;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <get_CPU1_Systick_Clock>:
{
	unsigned long SysClock =  SysClockAfter_D1Prescaler();
	return SysClock;
}
unsigned long  get_CPU1_Systick_Clock()
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SYSCLK();
 8001b6a:	f7ff ffcf 	bl	8001b0c <get_SYSCLK>
 8001b6e:	6078      	str	r0, [r7, #4]
	return SysClock;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <get_SysClock_AfterHPRE_Prescaler>:
unsigned long get_SysClock_AfterHPRE_Prescaler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
	unsigned long SysClock = SysClockAfter_D1Prescaler();
 8001b80:	f7ff ffdc 	bl	8001b3c <SysClockAfter_D1Prescaler>
 8001b84:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)HPRE_SC);
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	607b      	str	r3, [r7, #4]
		SysClock =x ;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
	return SysClock;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <get_APB1_Preipheral_Clock>:
{
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
	return SysClock;
}
unsigned long get_APB1_Preipheral_Clock()
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 8001ba8:	f7ff ffe7 	bl	8001b7a <get_SysClock_AfterHPRE_Prescaler>
 8001bac:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE1_SC);
 8001bae:	2302      	movs	r3, #2
 8001bb0:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <get_APB2_Preipheral_Clock>:
			SysClock =x ;
	SysClock *= 2;
	return SysClock;
}
unsigned long get_APB2_Preipheral_Clock()
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 8001bd0:	f7ff ffd3 	bl	8001b7a <get_SysClock_AfterHPRE_Prescaler>
 8001bd4:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE2_SC);
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <enablePORT>:
#define GPIOJEN (1U<<9)
#define GPIOKEN (1U<<10)


void enablePORT(GPIO_TypeDef* Port)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (Port==GPIOA) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a75      	ldr	r2, [pc, #468]	; (8001dd4 <enablePORT+0x1e0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d110      	bne.n	8001c26 <enablePORT+0x32>
		RCC->AHB4ENR |= GPIOAEN;
 8001c04:	4b74      	ldr	r3, [pc, #464]	; (8001dd8 <enablePORT+0x1e4>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	4a73      	ldr	r2, [pc, #460]	; (8001dd8 <enablePORT+0x1e4>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		//Making sure bit is changed
		while(!(RCC->AHB4ENR & GPIOAEN));
 8001c14:	bf00      	nop
 8001c16:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <enablePORT+0x1e4>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f8      	beq.n	8001c16 <enablePORT+0x22>
		while(!(RCC->AHB4ENR & GPIOKEN));

	}else
	{
	}
}
 8001c24:	e0d0      	b.n	8001dc8 <enablePORT+0x1d4>
	} else if(Port==GPIOB) {
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <enablePORT+0x1e8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d110      	bne.n	8001c50 <enablePORT+0x5c>
		RCC->AHB4ENR |= GPIOBEN;
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <enablePORT+0x1e4>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a68      	ldr	r2, [pc, #416]	; (8001dd8 <enablePORT+0x1e4>)
 8001c36:	f043 0302 	orr.w	r3, r3, #2
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOBEN));
 8001c3e:	bf00      	nop
 8001c40:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <enablePORT+0x1e4>)
 8001c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f8      	beq.n	8001c40 <enablePORT+0x4c>
}
 8001c4e:	e0bb      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOC) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <enablePORT+0x1ec>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d110      	bne.n	8001c7a <enablePORT+0x86>
		RCC->AHB4ENR |= GPIOCEN;
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <enablePORT+0x1e4>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <enablePORT+0x1e4>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOCEN));
 8001c68:	bf00      	nop
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <enablePORT+0x1e4>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f8      	beq.n	8001c6a <enablePORT+0x76>
}
 8001c78:	e0a6      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOD) {
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a59      	ldr	r2, [pc, #356]	; (8001de4 <enablePORT+0x1f0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d110      	bne.n	8001ca4 <enablePORT+0xb0>
		RCC->AHB4ENR |= GPIODEN;
 8001c82:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <enablePORT+0x1e4>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	4a53      	ldr	r2, [pc, #332]	; (8001dd8 <enablePORT+0x1e4>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIODEN));
 8001c92:	bf00      	nop
 8001c94:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <enablePORT+0x1e4>)
 8001c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f8      	beq.n	8001c94 <enablePORT+0xa0>
}
 8001ca2:	e091      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOE) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a50      	ldr	r2, [pc, #320]	; (8001de8 <enablePORT+0x1f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d110      	bne.n	8001cce <enablePORT+0xda>
		RCC->AHB4ENR |= GPIOEEN;
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <enablePORT+0x1e4>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	4a49      	ldr	r2, [pc, #292]	; (8001dd8 <enablePORT+0x1e4>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOEEN));
 8001cbc:	bf00      	nop
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <enablePORT+0x1e4>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f8      	beq.n	8001cbe <enablePORT+0xca>
}
 8001ccc:	e07c      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOF) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a46      	ldr	r2, [pc, #280]	; (8001dec <enablePORT+0x1f8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d110      	bne.n	8001cf8 <enablePORT+0x104>
		RCC->AHB4ENR |= GPIOFEN;
 8001cd6:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <enablePORT+0x1e4>)
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	4a3e      	ldr	r2, [pc, #248]	; (8001dd8 <enablePORT+0x1e4>)
 8001cde:	f043 0320 	orr.w	r3, r3, #32
 8001ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOFEN));
 8001ce6:	bf00      	nop
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <enablePORT+0x1e4>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f8      	beq.n	8001ce8 <enablePORT+0xf4>
}
 8001cf6:	e067      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOG) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <enablePORT+0x1fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d110      	bne.n	8001d22 <enablePORT+0x12e>
		RCC->AHB4ENR |= GPIOGEN;
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <enablePORT+0x1e4>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <enablePORT+0x1e4>)
 8001d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOGEN));
 8001d10:	bf00      	nop
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <enablePORT+0x1e4>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f8      	beq.n	8001d12 <enablePORT+0x11e>
}
 8001d20:	e052      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOH) {
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a33      	ldr	r2, [pc, #204]	; (8001df4 <enablePORT+0x200>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d110      	bne.n	8001d4c <enablePORT+0x158>
		RCC->AHB4ENR |= GPIOHEN;
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <enablePORT+0x1e4>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <enablePORT+0x1e4>)
 8001d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOHEN));
 8001d3a:	bf00      	nop
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <enablePORT+0x1e4>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f8      	beq.n	8001d3c <enablePORT+0x148>
}
 8001d4a:	e03d      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOI) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <enablePORT+0x204>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d110      	bne.n	8001d76 <enablePORT+0x182>
		RCC->AHB4ENR |= GPIOIEN;
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <enablePORT+0x1e4>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <enablePORT+0x1e4>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOIEN));
 8001d64:	bf00      	nop
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <enablePORT+0x1e4>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f8      	beq.n	8001d66 <enablePORT+0x172>
}
 8001d74:	e028      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOJ) {
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <enablePORT+0x208>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d110      	bne.n	8001da0 <enablePORT+0x1ac>
		RCC->AHB4ENR |= GPIOJEN;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <enablePORT+0x1e4>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <enablePORT+0x1e4>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOJEN));
 8001d8e:	bf00      	nop
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <enablePORT+0x1e4>)
 8001d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f8      	beq.n	8001d90 <enablePORT+0x19c>
}
 8001d9e:	e013      	b.n	8001dc8 <enablePORT+0x1d4>
	}else if(Port==GPIOK) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <enablePORT+0x20c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d10f      	bne.n	8001dc8 <enablePORT+0x1d4>
		RCC->AHB4ENR |= GPIOKEN;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <enablePORT+0x1e4>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <enablePORT+0x1e4>)
 8001db0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOKEN));
 8001db8:	bf00      	nop
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <enablePORT+0x1e4>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f8      	beq.n	8001dba <enablePORT+0x1c6>
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	58020000 	.word	0x58020000
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58020400 	.word	0x58020400
 8001de0:	58020800 	.word	0x58020800
 8001de4:	58020c00 	.word	0x58020c00
 8001de8:	58021000 	.word	0x58021000
 8001dec:	58021400 	.word	0x58021400
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58021c00 	.word	0x58021c00
 8001df8:	58022000 	.word	0x58022000
 8001dfc:	58022400 	.word	0x58022400
 8001e00:	58022800 	.word	0x58022800

08001e04 <Set_GPIO_MODER>:
 * 2: Alternate function mode
 * 3: Analog mode (reset state)
 * Note : If type argument is entered wrong pin configuration is becomes Input mode
 * */
void Set_GPIO_MODER(GPIO_TypeDef* Port,short Pin,short type)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	803b      	strh	r3, [r7, #0]
	bool bit_0, bit_1 ;
	switch(type)
 8001e14:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d81f      	bhi.n	8001e5c <Set_GPIO_MODER+0x58>
 8001e1c:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <Set_GPIO_MODER+0x20>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e35 	.word	0x08001e35
 8001e28:	08001e3f 	.word	0x08001e3f
 8001e2c:	08001e49 	.word	0x08001e49
 8001e30:	08001e53 	.word	0x08001e53
	{
	case 0 :
		bit_0 = false ;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73bb      	strb	r3, [r7, #14]
		break ;
 8001e3c:	e012      	b.n	8001e64 <Set_GPIO_MODER+0x60>
	case 1 :
		bit_0 =  true ;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73bb      	strb	r3, [r7, #14]
		break;
 8001e46:	e00d      	b.n	8001e64 <Set_GPIO_MODER+0x60>
	case 2 :
		bit_0 = false ;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73bb      	strb	r3, [r7, #14]
		break;
 8001e50:	e008      	b.n	8001e64 <Set_GPIO_MODER+0x60>
	case 3 :
		bit_0 = true ;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 8001e56:	2301      	movs	r3, #1
 8001e58:	73bb      	strb	r3, [r7, #14]
		break;
 8001e5a:	e003      	b.n	8001e64 <Set_GPIO_MODER+0x60>
	default:
		bit_0 = false;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
		bit_1 = false;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73bb      	strb	r3, [r7, #14]
	}
	if(bit_0)
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <Set_GPIO_MODER+0x7e>
	{
		Port->MODER |= (1U<<(Pin*2));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e00b      	b.n	8001e9a <Set_GPIO_MODER+0x96>
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	401a      	ands	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
	}
	if(bit_1)
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00c      	beq.n	8001eba <Set_GPIO_MODER+0xb6>
	{
		Port->MODER |= (1U<<((Pin*2)+1));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3301      	adds	r3, #1
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)+1));
	}
}
 8001eb8:	e00c      	b.n	8001ed4 <Set_GPIO_MODER+0xd0>
		Port->MODER &= ~(1U<<((Pin*2)+1));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <Set_GPIO_BSRR>:
 * isReset Type : boolean{true(1), false(0)}
 * 0: No action on the corresponding ODRx bit
 * 1: Resets/Sets the corresponding ODRx bit
 */
void Set_GPIO_BSRR(GPIO_TypeDef* Port,short pin, bool isItReset)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
	if(isItReset)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <Set_GPIO_BSRR+0x2e>
	{
		Port->BSRR |= (1U<<(pin+16));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001efe:	3310      	adds	r3, #16
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
	}else
	{
		Port->BSRR |= (1U<<(pin));
	}
}
 8001f0c:	e009      	b.n	8001f22 <Set_GPIO_BSRR+0x42>
		Port->BSRR |= (1U<<(pin));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <Set_GPIO_AFR>:
 *14: AF14
 *15: AF15
 * Note if Afx entered bigger than 15 AFx becomes AF0
 */
void Set_GPIO_AFR(GPIO_TypeDef* Port,short pin,short AFx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	803b      	strh	r3, [r7, #0]
	bool bit_0,bit_1,bit_2,bit_3;
	switch(AFx)
 8001f40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	f200 80b3 	bhi.w	80020b0 <Set_GPIO_AFR+0x180>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <Set_GPIO_AFR+0x20>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f91 	.word	0x08001f91
 8001f54:	08001fa3 	.word	0x08001fa3
 8001f58:	08001fb5 	.word	0x08001fb5
 8001f5c:	08001fc7 	.word	0x08001fc7
 8001f60:	08001fd9 	.word	0x08001fd9
 8001f64:	08001feb 	.word	0x08001feb
 8001f68:	08001ffd 	.word	0x08001ffd
 8001f6c:	0800200f 	.word	0x0800200f
 8001f70:	08002021 	.word	0x08002021
 8001f74:	08002033 	.word	0x08002033
 8001f78:	08002045 	.word	0x08002045
 8001f7c:	08002057 	.word	0x08002057
 8001f80:	08002069 	.word	0x08002069
 8001f84:	0800207b 	.word	0x0800207b
 8001f88:	0800208d 	.word	0x0800208d
 8001f8c:	0800209f 	.word	0x0800209f
	{
	case 0:
		bit_0 = false ;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	733b      	strb	r3, [r7, #12]
		break;
 8001fa0:	e08f      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 1:
		bit_0 = true  ;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001faa:	2300      	movs	r3, #0
 8001fac:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	733b      	strb	r3, [r7, #12]
		break;
 8001fb2:	e086      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 2:
		bit_0 = false ;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	733b      	strb	r3, [r7, #12]
		break;
 8001fc4:	e07d      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 3:
		bit_0 = true  ;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	733b      	strb	r3, [r7, #12]
		break;
 8001fd6:	e074      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 4:
		bit_0 = false ;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	733b      	strb	r3, [r7, #12]
		break;
 8001fe8:	e06b      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 5:
		bit_0 = true  ;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	733b      	strb	r3, [r7, #12]
		break;
 8001ffa:	e062      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 6:
		bit_0 = false  ;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 8002000:	2301      	movs	r3, #1
 8002002:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8002004:	2301      	movs	r3, #1
 8002006:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8002008:	2300      	movs	r3, #0
 800200a:	733b      	strb	r3, [r7, #12]
		break;
 800200c:	e059      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 7:
		bit_0 = true  ;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8002012:	2301      	movs	r3, #1
 8002014:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8002016:	2301      	movs	r3, #1
 8002018:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 800201a:	2300      	movs	r3, #0
 800201c:	733b      	strb	r3, [r7, #12]
		break;
 800201e:	e050      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 8:
		bit_0 = false  ;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8002024:	2300      	movs	r3, #0
 8002026:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8002028:	2300      	movs	r3, #0
 800202a:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 800202c:	2301      	movs	r3, #1
 800202e:	733b      	strb	r3, [r7, #12]
		break;
 8002030:	e047      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 9:
		bit_0 = true  ;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8002036:	2300      	movs	r3, #0
 8002038:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 800203a:	2300      	movs	r3, #0
 800203c:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 800203e:	2301      	movs	r3, #1
 8002040:	733b      	strb	r3, [r7, #12]
		break;
 8002042:	e03e      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 10:
		bit_0 = false  ;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 8002048:	2301      	movs	r3, #1
 800204a:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 800204c:	2300      	movs	r3, #0
 800204e:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 8002050:	2301      	movs	r3, #1
 8002052:	733b      	strb	r3, [r7, #12]
		break;
 8002054:	e035      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 11:
		bit_0 = true  ;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 800205a:	2301      	movs	r3, #1
 800205c:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 800205e:	2300      	movs	r3, #0
 8002060:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 8002062:	2301      	movs	r3, #1
 8002064:	733b      	strb	r3, [r7, #12]
		break;
 8002066:	e02c      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 12:
		bit_0 = false  ;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 800206c:	2300      	movs	r3, #0
 800206e:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8002070:	2301      	movs	r3, #1
 8002072:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8002074:	2301      	movs	r3, #1
 8002076:	733b      	strb	r3, [r7, #12]
		break;
 8002078:	e023      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 13:
		bit_0 = true  ;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 800207e:	2300      	movs	r3, #0
 8002080:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8002082:	2301      	movs	r3, #1
 8002084:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8002086:	2301      	movs	r3, #1
 8002088:	733b      	strb	r3, [r7, #12]
		break;
 800208a:	e01a      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 14:
		bit_0 = false  ;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8002090:	2301      	movs	r3, #1
 8002092:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8002094:	2301      	movs	r3, #1
 8002096:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8002098:	2301      	movs	r3, #1
 800209a:	733b      	strb	r3, [r7, #12]
		break;
 800209c:	e011      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	case 15:
		bit_0 = true;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80020a6:	2301      	movs	r3, #1
 80020a8:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 80020aa:	2301      	movs	r3, #1
 80020ac:	733b      	strb	r3, [r7, #12]
		break;
 80020ae:	e008      	b.n	80020c2 <Set_GPIO_AFR+0x192>
	default:
		bit_0 = false ;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 80020b8:	2300      	movs	r3, #0
 80020ba:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80020bc:	2300      	movs	r3, #0
 80020be:	733b      	strb	r3, [r7, #12]
		break;
 80020c0:	bf00      	nop

	}
	if(pin<8&& pin >-1)
 80020c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020c6:	2b07      	cmp	r3, #7
 80020c8:	dc76      	bgt.n	80021b8 <Set_GPIO_AFR+0x288>
 80020ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db72      	blt.n	80021b8 <Set_GPIO_AFR+0x288>
	{
		if(bit_0)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <Set_GPIO_AFR+0x1c0>
		{
			Port->AFR[0] |= (1U<<((pin*4)));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e00b      	b.n	8002108 <Set_GPIO_AFR+0x1d8>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	621a      	str	r2, [r3, #32]
		}

		if(bit_1)
 8002108:	7bbb      	ldrb	r3, [r7, #14]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <Set_GPIO_AFR+0x1f8>
		{
			Port->AFR[0] |= (1U<<((pin*4)+1));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3301      	adds	r3, #1
 800211a:	2101      	movs	r1, #1
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	e00c      	b.n	8002142 <Set_GPIO_AFR+0x212>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+1));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3301      	adds	r3, #1
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	621a      	str	r2, [r3, #32]
		}

		if(bit_2)
 8002142:	7b7b      	ldrb	r3, [r7, #13]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <Set_GPIO_AFR+0x232>
		{
			Port->AFR[0] |= (1U<<((pin*4)+2));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	621a      	str	r2, [r3, #32]
 8002160:	e00c      	b.n	800217c <Set_GPIO_AFR+0x24c>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+2));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	621a      	str	r2, [r3, #32]
		}
		if(bit_3)
 800217c:	7b3b      	ldrb	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <Set_GPIO_AFR+0x26c>
		{
			Port->AFR[0] |= (1U<<((pin*4)+3));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3303      	adds	r3, #3
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	621a      	str	r2, [r3, #32]
		if(bit_3)
 800219a:	e090      	b.n	80022be <Set_GPIO_AFR+0x38e>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+3));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	3303      	adds	r3, #3
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	621a      	str	r2, [r3, #32]
		if(bit_3)
 80021b6:	e082      	b.n	80022be <Set_GPIO_AFR+0x38e>
		}
	}else if(pin>7 &&pin<16)
 80021b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021bc:	2b07      	cmp	r3, #7
 80021be:	dd7e      	ble.n	80022be <Set_GPIO_AFR+0x38e>
 80021c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	dc7a      	bgt.n	80022be <Set_GPIO_AFR+0x38e>
	{
		if(bit_0)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <Set_GPIO_AFR+0x2b8>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021d6:	3b08      	subs	r3, #8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
 80021e6:	e00c      	b.n	8002202 <Set_GPIO_AFR+0x2d2>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021f0:	3b08      	subs	r3, #8
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	401a      	ands	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_1)
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00d      	beq.n	8002224 <Set_GPIO_AFR+0x2f4>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002210:	3b08      	subs	r3, #8
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	3301      	adds	r3, #1
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
 8002222:	e00d      	b.n	8002240 <Set_GPIO_AFR+0x310>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+1));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800222c:	3b08      	subs	r3, #8
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3301      	adds	r3, #1
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_2)
 8002240:	7b7b      	ldrb	r3, [r7, #13]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <Set_GPIO_AFR+0x332>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+2));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800224e:	3b08      	subs	r3, #8
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
 8002260:	e00d      	b.n	800227e <Set_GPIO_AFR+0x34e>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+2));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002266:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800226a:	3b08      	subs	r3, #8
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(bit_3)
 800227e:	7b3b      	ldrb	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00d      	beq.n	80022a0 <Set_GPIO_AFR+0x370>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+3));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800228c:	3b08      	subs	r3, #8
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	3303      	adds	r3, #3
 8002292:	2101      	movs	r1, #1
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}else
	{

	}
}
 800229e:	e00e      	b.n	80022be <Set_GPIO_AFR+0x38e>
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+3));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022a8:	3b08      	subs	r3, #8
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	3303      	adds	r3, #3
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022bc:	e7ff      	b.n	80022be <Set_GPIO_AFR+0x38e>
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <systickDelayMs>:
#define CTRL_CLKSRC		 (1U<<2)
#define CTRL_COUNTFLAG	 (1U<<16)
#define SYSTICK_LOAD_VAL (get_CPU1_Systick_Clock()/1000)
//#define SYSTICK_LOAD_VAL (64000000/1000)
void systickDelayMs(int delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	/*Configure systick*/
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD =SYSTICK_LOAD_VAL;
 80022d4:	f7ff fc46 	bl	8001b64 <get_CPU1_Systick_Clock>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <systickDelayMs+0x58>)
 80022dc:	4912      	ldr	r1, [pc, #72]	; (8002328 <systickDelayMs+0x5c>)
 80022de:	fba1 1303 	umull	r1, r3, r1, r3
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	6053      	str	r3, [r2, #4]
	/*Clear systick current value register*/
	SysTick->VAL = 0 ;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <systickDelayMs+0x58>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
	/*Enable systick and select clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <systickDelayMs+0x58>)
 80022ee:	2205      	movs	r2, #5
 80022f0:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i<delay ; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e009      	b.n	800230c <systickDelayMs+0x40>
	{
		//Wait until CountFlag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 );
 80022f8:	bf00      	nop
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <systickDelayMs+0x58>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f9      	beq.n	80022fa <systickDelayMs+0x2e>
	for(int i = 0 ; i<delay ; i++)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf1      	blt.n	80022f8 <systickDelayMs+0x2c>
	}
	SysTick->CTRL = 0 ;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <systickDelayMs+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <Uart_init>:
 * Pin Pairs: || Tx || Rx || AFx
 * 				PE1	   PE0	 8
 * 				PJ8	   PJ9	 8
 */
void Uart_init(GPIO_TypeDef* GPIOx,USART_TypeDef *USARTx,short TxPin, short Rxpin, short Afx,unsigned long BaudRate,unsigned long size_of_buffer)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	460b      	mov	r3, r1
 8002378:	80fb      	strh	r3, [r7, #6]
 800237a:	4613      	mov	r3, r2
 800237c:	80bb      	strh	r3, [r7, #4]
	 if(!(USARTx->CR1 & ENUE))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d141      	bne.n	800240e <Uart_init+0xa6>
	 	{
			ld3_init();
 800238a:	f000 fcb5 	bl	8002cf8 <ld3_init>
			ld2_init();
 800238e:	f000 fca5 	bl	8002cdc <ld2_init>
		 	selectedUART_enable(USARTx);
 8002392:	68b8      	ldr	r0, [r7, #8]
 8002394:	f000 f936 	bl	8002604 <selectedUART_enable>
	 		enablePORT(GPIOx);
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f7ff fc2b 	bl	8001bf4 <enablePORT>
	 		Set_GPIO_MODER(GPIOx, TxPin, 2);//TX
 800239e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4619      	mov	r1, r3
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff fd2c 	bl	8001e04 <Set_GPIO_MODER>
	 		Set_GPIO_MODER(GPIOx, Rxpin, 2); //RX
 80023ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4619      	mov	r1, r3
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff fd25 	bl	8001e04 <Set_GPIO_MODER>
	 		Set_GPIO_AFR(GPIOx, TxPin, Afx);
 80023ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80023be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c2:	4619      	mov	r1, r3
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff fdb3 	bl	8001f30 <Set_GPIO_AFR>
	 		Set_GPIO_AFR(GPIOx, Rxpin, Afx);
 80023ca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80023ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff fdab 	bl	8001f30 <Set_GPIO_AFR>
	 		USARTx->CR1 |= RXNEIE;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f043 0220 	orr.w	r2, r3, #32
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	601a      	str	r2, [r3, #0]
	 		USARTx->CR3 |= (1U<<12); //disable ORE error
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	609a      	str	r2, [r3, #8]
	 		set_baudRate(USARTx, BaudRate);
 80023f2:	69f9      	ldr	r1, [r7, #28]
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f000 f973 	bl	80026e0 <set_baudRate>
	 		sampling_mode_and_FIFO(USARTx,false,false);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	68b8      	ldr	r0, [r7, #8]
 8002400:	f000 f83c 	bl	800247c <sampling_mode_and_FIFO>
	 		init_Buffer(USARTx, size_of_buffer);
 8002404:	6a39      	ldr	r1, [r7, #32]
 8002406:	68b8      	ldr	r0, [r7, #8]
 8002408:	f000 fae6 	bl	80029d8 <init_Buffer>
 800240c:	e002      	b.n	8002414 <Uart_init+0xac>

	 	}else
	 	{
	 		//That UART is already defined
	 		error("UART is already defined");
 800240e:	480c      	ldr	r0, [pc, #48]	; (8002440 <Uart_init+0xd8>)
 8002410:	f000 fc4a 	bl	8002ca8 <error>
	 	}
		USARTx->CR1 |= ENUE;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 |= ENRE;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f043 0204 	orr.w	r2, r3, #4
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 |= ENTE;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 0208 	orr.w	r2, r3, #8
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	08004420 	.word	0x08004420

08002444 <get_PerihCLK>:


unsigned long get_PerihCLK(USART_TypeDef *USARTx)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	if(USART1==USARTx || USART6 == USARTx)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <get_PerihCLK+0x30>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <get_PerihCLK+0x18>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <get_PerihCLK+0x34>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <get_PerihCLK+0x20>
	{
		return APB2_CLK;
 800245c:	f7ff fbb5 	bl	8001bca <get_APB2_Preipheral_Clock>
 8002460:	4603      	mov	r3, r0
 8002462:	e002      	b.n	800246a <get_PerihCLK+0x26>
	}else
	{
		return APB1_CLK;
 8002464:	f7ff fb9d 	bl	8001ba2 <get_APB1_Preipheral_Clock>
 8002468:	4603      	mov	r3, r0
	}
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400

0800247c <sampling_mode_and_FIFO>:


void sampling_mode_and_FIFO (USART_TypeDef *USARTx, bool isitoversamplingby16,bool isit_FIFO)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
 8002488:	4613      	mov	r3, r2
 800248a:	70bb      	strb	r3, [r7, #2]
	if(isit_FIFO)
 800248c:	78bb      	ldrb	r3, [r7, #2]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d012      	beq.n	80024b8 <sampling_mode_and_FIFO+0x3c>
		{
			USARTx->CR1 |= (1U<<29);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
			if(!isitoversamplingby16)
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <sampling_mode_and_FIFO+0x5a>
			{
				USARTx->CR1 |= (1U<<15);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]
			if(isitoversamplingby16)
			{
				USARTx->CR1 |= (1U<<15);
			}
		}
}
 80024b6:	e00e      	b.n	80024d6 <sampling_mode_and_FIFO+0x5a>
			USARTx->CR1 &= ~(1U<<29);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	601a      	str	r2, [r3, #0]
			if(isitoversamplingby16)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <sampling_mode_and_FIFO+0x5a>
				USARTx->CR1 |= (1U<<15);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <enable_USART1>:


 void enable_USART1(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART1 ;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <enable_USART1+0x20>)
 80024ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <enable_USART1+0x20>)
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	58024400 	.word	0x58024400

08002508 <enable_USART2>:
 void enable_USART2(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART2 ;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <enable_USART2+0x20>)
 800250e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <enable_USART2+0x20>)
 8002514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002518:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400

0800252c <enable_USART3>:
 void enable_USART3(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART3 ;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <enable_USART3+0x20>)
 8002532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <enable_USART3+0x20>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	58024400 	.word	0x58024400

08002550 <enable_USART4>:
 void enable_USART4(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART4 ;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <enable_USART4+0x20>)
 8002556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800255a:	4a05      	ldr	r2, [pc, #20]	; (8002570 <enable_USART4+0x20>)
 800255c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002560:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400

08002574 <enable_USART5>:
 void enable_USART5(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART5 ;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <enable_USART5+0x20>)
 800257a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <enable_USART5+0x20>)
 8002580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	58024400 	.word	0x58024400

08002598 <enable_USART6>:
 void enable_USART6(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART6 ;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <enable_USART6+0x20>)
 800259e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <enable_USART6+0x20>)
 80025a4:	f043 0320 	orr.w	r3, r3, #32
 80025a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	58024400 	.word	0x58024400

080025bc <enable_USART7>:
 void enable_USART7(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART7 ;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <enable_USART7+0x20>)
 80025c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <enable_USART7+0x20>)
 80025c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	58024400 	.word	0x58024400

080025e0 <enable_USART8>:
 void enable_USART8(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART8 ;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <enable_USART8+0x20>)
 80025e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <enable_USART8+0x20>)
 80025ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400

08002604 <selectedUART_enable>:


 void selectedUART_enable(USART_TypeDef* USART)
 {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 	if(USART==USART1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <selectedUART_enable+0xb8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d105      	bne.n	8002620 <selectedUART_enable+0x1c>
 	{
 		NVIC_EnableIRQ(USART1_IRQn);
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f7ff fe89 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART1();
 800261a:	f7ff ff63 	bl	80024e4 <enable_USART1>
 		enable_USART8();
 	}else {
 		//USART is do not exists
 		error("USART do not exists");
 	}
 }
 800261e:	e048      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==USART2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <selectedUART_enable+0xbc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d105      	bne.n	8002634 <selectedUART_enable+0x30>
 		NVIC_EnableIRQ(USART2_IRQn);
 8002628:	2026      	movs	r0, #38	; 0x26
 800262a:	f7ff fe7f 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART2();
 800262e:	f7ff ff6b 	bl	8002508 <enable_USART2>
 }
 8002632:	e03e      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==USART3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a23      	ldr	r2, [pc, #140]	; (80026c4 <selectedUART_enable+0xc0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d105      	bne.n	8002648 <selectedUART_enable+0x44>
 		NVIC_EnableIRQ(USART3_IRQn);
 800263c:	2027      	movs	r0, #39	; 0x27
 800263e:	f7ff fe75 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART3();
 8002642:	f7ff ff73 	bl	800252c <enable_USART3>
 }
 8002646:	e034      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==UART4)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <selectedUART_enable+0xc4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d105      	bne.n	800265c <selectedUART_enable+0x58>
 		NVIC_EnableIRQ(UART5_IRQn);
 8002650:	2035      	movs	r0, #53	; 0x35
 8002652:	f7ff fe6b 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART4();
 8002656:	f7ff ff7b 	bl	8002550 <enable_USART4>
 }
 800265a:	e02a      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==UART5)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <selectedUART_enable+0xc8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d105      	bne.n	8002670 <selectedUART_enable+0x6c>
 		NVIC_EnableIRQ(UART5_IRQn);
 8002664:	2035      	movs	r0, #53	; 0x35
 8002666:	f7ff fe61 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART5();
 800266a:	f7ff ff83 	bl	8002574 <enable_USART5>
 }
 800266e:	e020      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==USART6)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <selectedUART_enable+0xcc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d105      	bne.n	8002684 <selectedUART_enable+0x80>
 		NVIC_EnableIRQ(USART6_IRQn);
 8002678:	2047      	movs	r0, #71	; 0x47
 800267a:	f7ff fe57 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART6();
 800267e:	f7ff ff8b 	bl	8002598 <enable_USART6>
 }
 8002682:	e016      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==UART7)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <selectedUART_enable+0xd0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d105      	bne.n	8002698 <selectedUART_enable+0x94>
 		NVIC_EnableIRQ(UART7_IRQn);
 800268c:	2052      	movs	r0, #82	; 0x52
 800268e:	f7ff fe4d 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART7();
 8002692:	f7ff ff93 	bl	80025bc <enable_USART7>
 }
 8002696:	e00c      	b.n	80026b2 <selectedUART_enable+0xae>
 	}else if (USART==UART8)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0f      	ldr	r2, [pc, #60]	; (80026d8 <selectedUART_enable+0xd4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d105      	bne.n	80026ac <selectedUART_enable+0xa8>
 		NVIC_EnableIRQ(UART8_IRQn);
 80026a0:	2053      	movs	r0, #83	; 0x53
 80026a2:	f7ff fe43 	bl	800232c <__NVIC_EnableIRQ>
 		enable_USART8();
 80026a6:	f7ff ff9b 	bl	80025e0 <enable_USART8>
 }
 80026aa:	e002      	b.n	80026b2 <selectedUART_enable+0xae>
 		error("USART do not exists");
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <selectedUART_enable+0xd8>)
 80026ae:	f000 fafb 	bl	8002ca8 <error>
 }
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40004400 	.word	0x40004400
 80026c4:	40004800 	.word	0x40004800
 80026c8:	40004c00 	.word	0x40004c00
 80026cc:	40005000 	.word	0x40005000
 80026d0:	40011400 	.word	0x40011400
 80026d4:	40007800 	.word	0x40007800
 80026d8:	40007c00 	.word	0x40007c00
 80026dc:	08004438 	.word	0x08004438

080026e0 <set_baudRate>:
 void set_baudRate(USART_TypeDef* USART ,unsigned long baud_rate)
 {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	 uart_set_baudrate(USART, get_PerihCLK(USART), baud_rate);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff feaa 	bl	8002444 <get_PerihCLK>
 80026f0:	4603      	mov	r3, r0
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f804 	bl	8002704 <uart_set_baudrate>
 }
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <uart_set_baudrate>:
	  		return -99 ;
	  	}
 }

 static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PerihCLK,uint32_t BaudRate)
 {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
		if(((USARTx->CR1 & (1U<<15)) && !(USARTx->CR1 & (1U<<29)))||(!(USARTx->CR1 & (1U<<15)) && (USARTx->CR1 & (1U<<29))))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <uart_set_baudrate+0x24>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <uart_set_baudrate+0x3c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10e      	bne.n	8002752 <uart_set_baudrate+0x4e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <uart_set_baudrate+0x4e>
		{
			USARTx->BRR = compute_uart_bd(PerihCLK,BaudRate);
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	68b8      	ldr	r0, [r7, #8]
 8002744:	f000 f813 	bl	800276e <compute_uart_bd>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	e009      	b.n	8002766 <uart_set_baudrate+0x62>

		}else
		{
			USARTx->BRR = (compute_uart_bd(PerihCLK,BaudRate)*2);
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	68b8      	ldr	r0, [r7, #8]
 8002756:	f000 f80a 	bl	800276e <compute_uart_bd>
 800275a:	4603      	mov	r3, r0
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	60da      	str	r2, [r3, #12]

		}
 }
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t PerihCLK,uint32_t BaudRate)
 {
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
	 return ((PerihCLK + (BaudRate/2U))/BaudRate);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	085a      	lsrs	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	441a      	add	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 }
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <uart_send_string>:
		//Write to transmit data register
		while(!(USART->ISR & ISR_TXE));
		USART->TDR = (ch & 0xFF);
 }
 void uart_send_string(USART_TypeDef* USART, char* string, int size)
 {
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	 for(int i= 0 ; i<size ; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	e026      	b.n	80027f4 <uart_send_string+0x60>
	 {
		 if((size+1)%20==0)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <uart_send_string+0x74>)
 80027ac:	fb83 2301 	smull	r2, r3, r3, r1
 80027b0:	10da      	asrs	r2, r3, #3
 80027b2:	17cb      	asrs	r3, r1, #31
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	1aca      	subs	r2, r1, r3
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	d102      	bne.n	80027ca <uart_send_string+0x36>
		 {
			 systickDelayMs(10);
 80027c4:	200a      	movs	r0, #10
 80027c6:	f7ff fd81 	bl	80022cc <systickDelayMs>
		 }
		 ld3_on();
 80027ca:	f000 fabb 	bl	8002d44 <ld3_on>
	 	while(!(USART->ISR & ISR_TXE));
 80027ce:	bf00      	nop
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f9      	beq.n	80027d0 <uart_send_string+0x3c>
	 	USART->TDR = (string[i] & 0xFF );
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28
	 	ld3_off();
 80027ea:	f000 facf 	bl	8002d8c <ld3_off>
	 for(int i= 0 ; i<size ; i++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbd4      	blt.n	80027a6 <uart_send_string+0x12>
	 }
 }
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	66666667 	.word	0x66666667

0800280c <uart_get_buffer>:

 char* uart_get_buffer(USART_TypeDef* USART,unsigned long *Size)
 {
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
	 char* temp = malloc(sizeof(char)*get_current_loc_Buffer(USART));
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f876 	bl	8002908 <get_current_loc_Buffer>
 800281c:	4603      	mov	r3, r0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fc62 	bl	80030e8 <malloc>
 8002824:	4603      	mov	r3, r0
 8002826:	613b      	str	r3, [r7, #16]
	 unsigned long temp_loc = get_current_loc_Buffer(USART);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f86d 	bl	8002908 <get_current_loc_Buffer>
 800282e:	6178      	str	r0, [r7, #20]
	 *Size = get_current_loc_Buffer(USART) ;
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f869 	bl	8002908 <get_current_loc_Buffer>
 8002836:	4602      	mov	r2, r0
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	601a      	str	r2, [r3, #0]
	 while(get_current_loc_Buffer(USART)!=0)
 800283c:	e010      	b.n	8002860 <uart_get_buffer+0x54>
	 {
	 	char temp_uart_buffer_byte = uart_get_buffer_BYTE(USART);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f81b 	bl	800287a <uart_get_buffer_BYTE>
 8002844:	4603      	mov	r3, r0
 8002846:	73fb      	strb	r3, [r7, #15]
	 	if(temp_uart_buffer_byte!=255)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2bff      	cmp	r3, #255	; 0xff
 800284c:	d00f      	beq.n	800286e <uart_get_buffer+0x62>
	 	{
			temp[temp_loc-1] =temp_uart_buffer_byte;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3b01      	subs	r3, #1
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	701a      	strb	r2, [r3, #0]
			temp_loc--;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3b01      	subs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
	 while(get_current_loc_Buffer(USART)!=0)
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f851 	bl	8002908 <get_current_loc_Buffer>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e8      	bne.n	800283e <uart_get_buffer+0x32>
 800286c:	e000      	b.n	8002870 <uart_get_buffer+0x64>
	 	}else
	 	{
	 		break ;
 800286e:	bf00      	nop
	 	}
	 }

	 return temp ;
 8002870:	693b      	ldr	r3, [r7, #16]
 }
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <uart_get_buffer_BYTE>:

 char uart_get_buffer_BYTE(USART_TypeDef* USART)
 {
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
	 unsigned long loc = get_current_loc_Buffer(USART);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f840 	bl	8002908 <get_current_loc_Buffer>
 8002888:	6178      	str	r0, [r7, #20]
	 if(loc !=0)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d014      	beq.n	80028ba <uart_get_buffer_BYTE+0x40>
	 {
		 uint8_t* temp =  get_Buffer(USART);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f929 	bl	8002ae8 <get_Buffer>
 8002896:	6138      	str	r0, [r7, #16]
		 char temp_char = temp[loc-1];
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3b01      	subs	r3, #1
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	73fb      	strb	r3, [r7, #15]
		 temp[loc-1] = '\000';
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
		 decrease_Buffer(USART);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f97f 	bl	8002bb4 <decrease_Buffer>
		 return temp_char ;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	e000      	b.n	80028bc <uart_get_buffer_BYTE+0x42>
	 }else
	 {
		 return 255 ;
 80028ba:	23ff      	movs	r3, #255	; 0xff
	 }
 }
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART1_rx_interrupt>:

 void UART1_rx_interrupt(USART_TypeDef* USART)
 {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	 	 ld2_on();
 80028cc:	f000 fa2e 	bl	8002d2c <ld2_on>
	 	 char key= USART->RDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	73fb      	strb	r3, [r7, #15]
	 	uint8_t *temp = UART1Buffer;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <UART1_rx_interrupt+0x3c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60bb      	str	r3, [r7, #8]
	 	temp[current_loc_buffer_rx_UART1]=key ;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <UART1_rx_interrupt+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4413      	add	r3, r2
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	701a      	strb	r2, [r3, #0]
	 	current_loc_buffer_rx_UART1++;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <UART1_rx_interrupt+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <UART1_rx_interrupt+0x40>)
 80028f0:	6013      	str	r3, [r2, #0]
	 	ld2_off();
 80028f2:	f000 fa3f 	bl	8002d74 <ld2_off>
 }
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	240000bc 	.word	0x240000bc
 8002904:	24000084 	.word	0x24000084

08002908 <get_current_loc_Buffer>:
 unsigned long get_current_loc_Buffer (USART_TypeDef *USARTx)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
						if(USARTx == USART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <get_current_loc_Buffer+0x8c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d102      	bne.n	800291e <get_current_loc_Buffer+0x16>
						{
							return current_loc_buffer_rx_UART1  ;
 8002918:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <get_current_loc_Buffer+0x90>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e035      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if (USARTx == USART2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <get_current_loc_Buffer+0x94>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d102      	bne.n	800292c <get_current_loc_Buffer+0x24>
						{
							return current_loc_buffer_rx_UART2 ;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <get_current_loc_Buffer+0x98>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e02e      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if (USARTx == USART3)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <get_current_loc_Buffer+0x9c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d102      	bne.n	800293a <get_current_loc_Buffer+0x32>
						{
							return current_loc_buffer_rx_UART3 ;
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <get_current_loc_Buffer+0xa0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e027      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if (USARTx == UART4)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <get_current_loc_Buffer+0xa4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d102      	bne.n	8002948 <get_current_loc_Buffer+0x40>
						{
							return current_loc_buffer_rx_UART4;
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <get_current_loc_Buffer+0xa8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e020      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART5)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <get_current_loc_Buffer+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d102      	bne.n	8002956 <get_current_loc_Buffer+0x4e>
						{
							return current_loc_buffer_rx_UART5;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <get_current_loc_Buffer+0xb0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	e019      	b.n	800298a <get_current_loc_Buffer+0x82>

						}else if(USARTx == USART6)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <get_current_loc_Buffer+0xb4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d102      	bne.n	8002964 <get_current_loc_Buffer+0x5c>
						{
							return current_loc_buffer_rx_UART6;
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <get_current_loc_Buffer+0xb8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e012      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART7)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <get_current_loc_Buffer+0xbc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <get_current_loc_Buffer+0x6a>
						{
							return current_loc_buffer_rx_UART7 ;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <get_current_loc_Buffer+0xc0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e00b      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a15      	ldr	r2, [pc, #84]	; (80029cc <get_current_loc_Buffer+0xc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d102      	bne.n	8002980 <get_current_loc_Buffer+0x78>
						{
							return current_loc_buffer_rx_UART8 ;
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <get_current_loc_Buffer+0xc8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e004      	b.n	800298a <get_current_loc_Buffer+0x82>
						}else
						{
							error("USART is not Exists Current Loc Buffer");
 8002980:	4814      	ldr	r0, [pc, #80]	; (80029d4 <get_current_loc_Buffer+0xcc>)
 8002982:	f000 f991 	bl	8002ca8 <error>
							return -99 ;
 8002986:	f06f 0362 	mvn.w	r3, #98	; 0x62
						}
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40011000 	.word	0x40011000
 8002998:	24000084 	.word	0x24000084
 800299c:	40004400 	.word	0x40004400
 80029a0:	24000088 	.word	0x24000088
 80029a4:	40004800 	.word	0x40004800
 80029a8:	2400008c 	.word	0x2400008c
 80029ac:	40004c00 	.word	0x40004c00
 80029b0:	24000090 	.word	0x24000090
 80029b4:	40005000 	.word	0x40005000
 80029b8:	24000094 	.word	0x24000094
 80029bc:	40011400 	.word	0x40011400
 80029c0:	24000098 	.word	0x24000098
 80029c4:	40007800 	.word	0x40007800
 80029c8:	2400009c 	.word	0x2400009c
 80029cc:	40007c00 	.word	0x40007c00
 80029d0:	240000a0 	.word	0x240000a0
 80029d4:	08004474 	.word	0x08004474

080029d8 <init_Buffer>:
void disable_UART(USART_TypeDef* USARTx)
 {
	 USARTx->CR1 &= ~ENUE;
 }
 void init_Buffer(USART_TypeDef* USARTx,unsigned long size)
 {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	 	 	 	 	 	 	 	 if(USARTx == USART1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <init_Buffer+0xd0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d107      	bne.n	80029fa <init_Buffer+0x22>
		 						{
		 							 UART1Buffer = malloc(sizeof(uint8_t)*size);
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f000 fb7c 	bl	80030e8 <malloc>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <init_Buffer+0xd4>)
 80029f6:	601a      	str	r2, [r3, #0]
		 							 UART7Buffer = malloc(sizeof(uint8_t)*size);
		 						}else if(USARTx == UART8)
		 						{
		 							 UART8Buffer = malloc(sizeof(uint8_t)*size);
		 						}
 }
 80029f8:	e052      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if (USARTx == USART2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a2c      	ldr	r2, [pc, #176]	; (8002ab0 <init_Buffer+0xd8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d107      	bne.n	8002a12 <init_Buffer+0x3a>
		 							 UART2Buffer = malloc(sizeof(uint8_t)*size);
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	f000 fb70 	bl	80030e8 <malloc>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <init_Buffer+0xdc>)
 8002a0e:	601a      	str	r2, [r3, #0]
 }
 8002a10:	e046      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if (USARTx == USART3)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <init_Buffer+0xe0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d107      	bne.n	8002a2a <init_Buffer+0x52>
		 							 UART3Buffer = malloc(sizeof(uint8_t)*size);
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f000 fb64 	bl	80030e8 <malloc>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <init_Buffer+0xe4>)
 8002a26:	601a      	str	r2, [r3, #0]
 }
 8002a28:	e03a      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if (USARTx == UART4)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <init_Buffer+0xe8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d107      	bne.n	8002a42 <init_Buffer+0x6a>
		 							 UART4Buffer = malloc(sizeof(uint8_t)*size);
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f000 fb58 	bl	80030e8 <malloc>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <init_Buffer+0xec>)
 8002a3e:	601a      	str	r2, [r3, #0]
 }
 8002a40:	e02e      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if(USARTx == UART5)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <init_Buffer+0xf0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d107      	bne.n	8002a5a <init_Buffer+0x82>
		 							 UART5Buffer = malloc(sizeof(uint8_t)*size);
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f000 fb4c 	bl	80030e8 <malloc>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <init_Buffer+0xf4>)
 8002a56:	601a      	str	r2, [r3, #0]
 }
 8002a58:	e022      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if(USARTx == USART6)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <init_Buffer+0xf8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d107      	bne.n	8002a72 <init_Buffer+0x9a>
		 							 UART6Buffer = malloc(sizeof(uint8_t)*size);
 8002a62:	6838      	ldr	r0, [r7, #0]
 8002a64:	f000 fb40 	bl	80030e8 <malloc>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <init_Buffer+0xfc>)
 8002a6e:	601a      	str	r2, [r3, #0]
 }
 8002a70:	e016      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if(USARTx == UART7)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <init_Buffer+0x100>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d107      	bne.n	8002a8a <init_Buffer+0xb2>
		 							 UART7Buffer = malloc(sizeof(uint8_t)*size);
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f000 fb34 	bl	80030e8 <malloc>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <init_Buffer+0x104>)
 8002a86:	601a      	str	r2, [r3, #0]
 }
 8002a88:	e00a      	b.n	8002aa0 <init_Buffer+0xc8>
		 						}else if(USARTx == UART8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <init_Buffer+0x108>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d106      	bne.n	8002aa0 <init_Buffer+0xc8>
		 							 UART8Buffer = malloc(sizeof(uint8_t)*size);
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f000 fb28 	bl	80030e8 <malloc>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <init_Buffer+0x10c>)
 8002a9e:	601a      	str	r2, [r3, #0]
 }
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	240000bc 	.word	0x240000bc
 8002ab0:	40004400 	.word	0x40004400
 8002ab4:	240000dc 	.word	0x240000dc
 8002ab8:	40004800 	.word	0x40004800
 8002abc:	240000cc 	.word	0x240000cc
 8002ac0:	40004c00 	.word	0x40004c00
 8002ac4:	240000b0 	.word	0x240000b0
 8002ac8:	40005000 	.word	0x40005000
 8002acc:	240000b4 	.word	0x240000b4
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	240000c0 	.word	0x240000c0
 8002ad8:	40007800 	.word	0x40007800
 8002adc:	240000c8 	.word	0x240000c8
 8002ae0:	40007c00 	.word	0x40007c00
 8002ae4:	240000c4 	.word	0x240000c4

08002ae8 <get_Buffer>:

 uint8_t* get_Buffer(USART_TypeDef* USARTx)
 {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	 	 	 	 	 	 	 	 if(USARTx == USART1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <get_Buffer+0x88>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <get_Buffer+0x16>
		 						{
		 							return  UART1Buffer;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <get_Buffer+0x8c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	e034      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if (USARTx == USART2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <get_Buffer+0x90>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d102      	bne.n	8002b0c <get_Buffer+0x24>
		 						{
		 							return UART2Buffer ;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <get_Buffer+0x94>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	e02d      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if (USARTx == USART3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <get_Buffer+0x98>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <get_Buffer+0x32>
		 						{
		 							return UART3Buffer ;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <get_Buffer+0x9c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e026      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if (USARTx == UART4)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <get_Buffer+0xa0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d102      	bne.n	8002b28 <get_Buffer+0x40>
		 						{
		 							return UART4Buffer;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <get_Buffer+0xa4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	e01f      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if(USARTx == UART5)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <get_Buffer+0xa8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d102      	bne.n	8002b36 <get_Buffer+0x4e>
		 						{
		 							return UART5Buffer;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <get_Buffer+0xac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	e018      	b.n	8002b68 <get_Buffer+0x80>

		 						}else if(USARTx == USART6)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <get_Buffer+0xb0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d102      	bne.n	8002b44 <get_Buffer+0x5c>
		 						{
		 							return UART6Buffer;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <get_Buffer+0xb4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e011      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if(USARTx == UART7)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a16      	ldr	r2, [pc, #88]	; (8002ba0 <get_Buffer+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <get_Buffer+0x6a>
		 						{
		 							return UART7Buffer ;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <get_Buffer+0xbc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e00a      	b.n	8002b68 <get_Buffer+0x80>
		 						}else if(USARTx == UART8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <get_Buffer+0xc0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d102      	bne.n	8002b60 <get_Buffer+0x78>
		 						{
		 							return UART8Buffer ;
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <get_Buffer+0xc4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e003      	b.n	8002b68 <get_Buffer+0x80>
		 						}else
		 						{
		 							error("Error in get_Buffer because of the USART");
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <get_Buffer+0xc8>)
 8002b62:	f000 f8a1 	bl	8002ca8 <error>
		 							return NULL;
 8002b66:	2300      	movs	r3, #0
		 						}
 }
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40011000 	.word	0x40011000
 8002b74:	240000bc 	.word	0x240000bc
 8002b78:	40004400 	.word	0x40004400
 8002b7c:	240000dc 	.word	0x240000dc
 8002b80:	40004800 	.word	0x40004800
 8002b84:	240000cc 	.word	0x240000cc
 8002b88:	40004c00 	.word	0x40004c00
 8002b8c:	240000b0 	.word	0x240000b0
 8002b90:	40005000 	.word	0x40005000
 8002b94:	240000b4 	.word	0x240000b4
 8002b98:	40011400 	.word	0x40011400
 8002b9c:	240000c0 	.word	0x240000c0
 8002ba0:	40007800 	.word	0x40007800
 8002ba4:	240000c8 	.word	0x240000c8
 8002ba8:	40007c00 	.word	0x40007c00
 8002bac:	240000c4 	.word	0x240000c4
 8002bb0:	0800449c 	.word	0x0800449c

08002bb4 <decrease_Buffer>:
			 						{
			 						 	 current_loc_buffer_rx_UART8++;
			 						}
 }
 void decrease_Buffer(USART_TypeDef* USARTx)
 {
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	 	 	 	 	 	 	 	 	 if(USARTx == USART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <decrease_Buffer+0xb4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d105      	bne.n	8002bd0 <decrease_Buffer+0x1c>
			 						{
			 						 	 current_loc_buffer_rx_UART1--;
 8002bc4:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <decrease_Buffer+0xb8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	4a28      	ldr	r2, [pc, #160]	; (8002c6c <decrease_Buffer+0xb8>)
 8002bcc:	6013      	str	r3, [r2, #0]
			 						 	 current_loc_buffer_rx_UART7--;
			 						}else if(USARTx == UART8)
			 						{
			 						 	 current_loc_buffer_rx_UART8--;
			 						}
 }
 8002bce:	e044      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if (USARTx == USART2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <decrease_Buffer+0xbc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d105      	bne.n	8002be4 <decrease_Buffer+0x30>
			 						 	 current_loc_buffer_rx_UART2--;
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <decrease_Buffer+0xc0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <decrease_Buffer+0xc0>)
 8002be0:	6013      	str	r3, [r2, #0]
 }
 8002be2:	e03a      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if (USARTx == USART3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <decrease_Buffer+0xc4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d105      	bne.n	8002bf8 <decrease_Buffer+0x44>
			 						 	 current_loc_buffer_rx_UART3--;
 8002bec:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <decrease_Buffer+0xc8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	4a22      	ldr	r2, [pc, #136]	; (8002c7c <decrease_Buffer+0xc8>)
 8002bf4:	6013      	str	r3, [r2, #0]
 }
 8002bf6:	e030      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if (USARTx == UART4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <decrease_Buffer+0xcc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d105      	bne.n	8002c0c <decrease_Buffer+0x58>
			 						 	 current_loc_buffer_rx_UART4--;
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <decrease_Buffer+0xd0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <decrease_Buffer+0xd0>)
 8002c08:	6013      	str	r3, [r2, #0]
 }
 8002c0a:	e026      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART5)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <decrease_Buffer+0xd4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d105      	bne.n	8002c20 <decrease_Buffer+0x6c>
			 						 	 current_loc_buffer_rx_UART5--;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <decrease_Buffer+0xd8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <decrease_Buffer+0xd8>)
 8002c1c:	6013      	str	r3, [r2, #0]
 }
 8002c1e:	e01c      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if(USARTx == USART6)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1b      	ldr	r2, [pc, #108]	; (8002c90 <decrease_Buffer+0xdc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d105      	bne.n	8002c34 <decrease_Buffer+0x80>
			 						 	 current_loc_buffer_rx_UART6--;
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <decrease_Buffer+0xe0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <decrease_Buffer+0xe0>)
 8002c30:	6013      	str	r3, [r2, #0]
 }
 8002c32:	e012      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART7)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <decrease_Buffer+0xe4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d105      	bne.n	8002c48 <decrease_Buffer+0x94>
			 						 	 current_loc_buffer_rx_UART7--;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <decrease_Buffer+0xe8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <decrease_Buffer+0xe8>)
 8002c44:	6013      	str	r3, [r2, #0]
 }
 8002c46:	e008      	b.n	8002c5a <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART8)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <decrease_Buffer+0xec>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d104      	bne.n	8002c5a <decrease_Buffer+0xa6>
			 						 	 current_loc_buffer_rx_UART8--;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <decrease_Buffer+0xf0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <decrease_Buffer+0xf0>)
 8002c58:	6013      	str	r3, [r2, #0]
 }
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	24000084 	.word	0x24000084
 8002c70:	40004400 	.word	0x40004400
 8002c74:	24000088 	.word	0x24000088
 8002c78:	40004800 	.word	0x40004800
 8002c7c:	2400008c 	.word	0x2400008c
 8002c80:	40004c00 	.word	0x40004c00
 8002c84:	24000090 	.word	0x24000090
 8002c88:	40005000 	.word	0x40005000
 8002c8c:	24000094 	.word	0x24000094
 8002c90:	40011400 	.word	0x40011400
 8002c94:	24000098 	.word	0x24000098
 8002c98:	40007800 	.word	0x40007800
 8002c9c:	2400009c 	.word	0x2400009c
 8002ca0:	40007c00 	.word	0x40007c00
 8002ca4:	240000a0 	.word	0x240000a0

08002ca8 <error>:


void error(char* ErrorName)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	using_as_error_driver_UART(1000);
 8002cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb4:	f000 f876 	bl	8002da4 <using_as_error_driver_UART>

}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <ld1_init>:
#include "stm32h745xx.h"
#include <stdbool.h>
void using_as_error_driver_UART(int long_ld1_ld2);

void ld1_init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	enablePORT(GPIOB);
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <ld1_init+0x18>)
 8002cc6:	f7fe ff95 	bl	8001bf4 <enablePORT>
	Set_GPIO_MODER(GPIOB, 0,1);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <ld1_init+0x18>)
 8002cd0:	f7ff f898 	bl	8001e04 <Set_GPIO_MODER>
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	58020400 	.word	0x58020400

08002cdc <ld2_init>:
void ld2_init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	enablePORT(GPIOE);
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <ld2_init+0x18>)
 8002ce2:	f7fe ff87 	bl	8001bf4 <enablePORT>
	Set_GPIO_MODER(GPIOE, 1, 1);
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2101      	movs	r1, #1
 8002cea:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <ld2_init+0x18>)
 8002cec:	f7ff f88a 	bl	8001e04 <Set_GPIO_MODER>
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	58021000 	.word	0x58021000

08002cf8 <ld3_init>:
void ld3_init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	enablePORT(GPIOB);
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <ld3_init+0x18>)
 8002cfe:	f7fe ff79 	bl	8001bf4 <enablePORT>
	Set_GPIO_MODER(GPIOB, 14, 1);
 8002d02:	2201      	movs	r2, #1
 8002d04:	210e      	movs	r1, #14
 8002d06:	4802      	ldr	r0, [pc, #8]	; (8002d10 <ld3_init+0x18>)
 8002d08:	f7ff f87c 	bl	8001e04 <Set_GPIO_MODER>
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	58020400 	.word	0x58020400

08002d14 <ld1_on>:
void ld1_on(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 0, false);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <ld1_on+0x14>)
 8002d1e:	f7ff f8df 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	58020400 	.word	0x58020400

08002d2c <ld2_on>:
void ld2_on(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOE, 1, false);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2101      	movs	r1, #1
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <ld2_on+0x14>)
 8002d36:	f7ff f8d3 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	58021000 	.word	0x58021000

08002d44 <ld3_on>:

void ld3_on(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 14, false);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	210e      	movs	r1, #14
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <ld3_on+0x14>)
 8002d4e:	f7ff f8c7 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	58020400 	.word	0x58020400

08002d5c <ld1_off>:
void ld1_off(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 0, true);
 8002d60:	2201      	movs	r2, #1
 8002d62:	2100      	movs	r1, #0
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <ld1_off+0x14>)
 8002d66:	f7ff f8bb 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	58020400 	.word	0x58020400

08002d74 <ld2_off>:
void ld2_off(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOE, 1, true);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <ld2_off+0x14>)
 8002d7e:	f7ff f8af 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	58021000 	.word	0x58021000

08002d8c <ld3_off>:

void ld3_off(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 14, true);
 8002d90:	2201      	movs	r2, #1
 8002d92:	210e      	movs	r1, #14
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <ld3_off+0x14>)
 8002d96:	f7ff f8a3 	bl	8001ee0 <Set_GPIO_BSRR>
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	58020400 	.word	0x58020400

08002da4 <using_as_error_driver_UART>:
void using_as_error_driver_UART(int long_ld1_ld2)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	ld1_init();
 8002dac:	f7ff ff88 	bl	8002cc0 <ld1_init>
	ld2_init();
 8002db0:	f7ff ff94 	bl	8002cdc <ld2_init>

	while(1)
	{
		ld1_on();
 8002db4:	f7ff ffae 	bl	8002d14 <ld1_on>
		ld2_on();
 8002db8:	f7ff ffb8 	bl	8002d2c <ld2_on>
		systickDelayMs(long_ld1_ld2);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fa85 	bl	80022cc <systickDelayMs>
		ld2_off();
 8002dc2:	f7ff ffd7 	bl	8002d74 <ld2_off>
		ld1_off();
 8002dc6:	f7ff ffc9 	bl	8002d5c <ld1_off>
		systickDelayMs(long_ld1_ld2);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff fa7e 	bl	80022cc <systickDelayMs>
	{
 8002dd0:	e7f0      	b.n	8002db4 <using_as_error_driver_UART+0x10>
	...

08002dd4 <main>:
unsigned long count;

void clear_arr(char* Buffer,int size);

int main(void)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b08d      	sub	sp, #52	; 0x34
 8002dd8:	af04      	add	r7, sp, #16

	SysClockConfig();
 8002dda:	f7fe fe57 	bl	8001a8c <SysClockConfig>
	enablePORT(GPIOC);
 8002dde:	4827      	ldr	r0, [pc, #156]	; (8002e7c <main+0xa8>)
 8002de0:	f7fe ff08 	bl	8001bf4 <enablePORT>
		Uart_init(GPIOB, USART1, 6, 7, 7, 9600, 1024);
 8002de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	2307      	movs	r3, #7
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2307      	movs	r3, #7
 8002df6:	2206      	movs	r2, #6
 8002df8:	4921      	ldr	r1, [pc, #132]	; (8002e80 <main+0xac>)
 8002dfa:	4822      	ldr	r0, [pc, #136]	; (8002e84 <main+0xb0>)
 8002dfc:	f7ff fab4 	bl	8002368 <Uart_init>
		init_Bluetooh(USART1);
 8002e00:	481f      	ldr	r0, [pc, #124]	; (8002e80 <main+0xac>)
 8002e02:	f7fd fac5 	bl	8000390 <init_Bluetooh>
		char* version = get_Version();
 8002e06:	f7fd fad3 	bl	80003b0 <get_Version>
 8002e0a:	61f8      	str	r0, [r7, #28]
		char* addr = get_BLEAddr();
 8002e0c:	f7fd fb2a 	bl	8000464 <get_BLEAddr>
 8002e10:	61b8      	str	r0, [r7, #24]
		char* name = get_Name() ;
 8002e12:	f7fd fb8f 	bl	8000534 <get_Name>
 8002e16:	6178      	str	r0, [r7, #20]
		set_Name("Master");
 8002e18:	481b      	ldr	r0, [pc, #108]	; (8002e88 <main+0xb4>)
 8002e1a:	f7fd fbf3 	bl	8000604 <set_Name>
		name = get_Name() ;
 8002e1e:	f7fd fb89 	bl	8000534 <get_Name>
 8002e22:	6178      	str	r0, [r7, #20]
		set_Pin("123456");
 8002e24:	4819      	ldr	r0, [pc, #100]	; (8002e8c <main+0xb8>)
 8002e26:	f7fd fcc3 	bl	80007b0 <set_Pin>
		short broadcast = get_Broadcast_Interval();
 8002e2a:	f7fd fd33 	bl	8000894 <get_Broadcast_Interval>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	827b      	strh	r3, [r7, #18]
		char* pin = get_Pin();
 8002e32:	f7fd fc55 	bl	80006e0 <get_Pin>
 8002e36:	60f8      	str	r0, [r7, #12]
		short authecation = get_Authentication_type();
 8002e38:	f7fd fdbc 	bl	80009b4 <get_Authentication_type>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	817b      	strh	r3, [r7, #10]
		unsigned long Baud_Rate = get_Baud_Rate();
 8002e40:	f7fd fe34 	bl	8000aac <get_Baud_Rate>
 8002e44:	6078      	str	r0, [r7, #4]
		set_Baud_Rate(0);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fd fec8 	bl	8000bdc <set_Baud_Rate>
		unsigned long size;
		while(1)
		{

			strcpy(Buffer,uart_get_buffer(USART1, &size));
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <main+0xbc>)
 8002e4e:	681c      	ldr	r4, [r3, #0]
 8002e50:	463b      	mov	r3, r7
 8002e52:	4619      	mov	r1, r3
 8002e54:	480a      	ldr	r0, [pc, #40]	; (8002e80 <main+0xac>)
 8002e56:	f7ff fcd9 	bl	800280c <uart_get_buffer>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f000 fa1b 	bl	800329a <strcpy>
			uart_send_string(USART1, Buffer, size);
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <main+0xbc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <main+0xac>)
 8002e6e:	f7ff fc91 	bl	8002794 <uart_send_string>
			systickDelayMs(50);
 8002e72:	2032      	movs	r0, #50	; 0x32
 8002e74:	f7ff fa2a 	bl	80022cc <systickDelayMs>
		{
 8002e78:	e7e8      	b.n	8002e4c <main+0x78>
 8002e7a:	bf00      	nop
 8002e7c:	58020800 	.word	0x58020800
 8002e80:	40011000 	.word	0x40011000
 8002e84:	58020400 	.word	0x58020400
 8002e88:	080044c8 	.word	0x080044c8
 8002e8c:	080044d0 	.word	0x080044d0
 8002e90:	240000f4 	.word	0x240000f4

08002e94 <USART1_IRQHandler>:


	return 0 ;
}
void USART1_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	//Check if RXNE is set
	if((USART1->ISR & ISR_RXNE))
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <USART1_IRQHandler+0x1c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <USART1_IRQHandler+0x16>
	{
		//Do Something
		UART1_rx_interrupt(USART1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <USART1_IRQHandler+0x1c>)
 8002ea6:	f7ff fd0d 	bl	80028c4 <UART1_rx_interrupt>
	}
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40011000 	.word	0x40011000

08002eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	return 1;
 8002eb8:	2301      	movs	r3, #1
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_kill>:

int _kill(int pid, int sig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ece:	f000 f8e1 	bl	8003094 <__errno>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2216      	movs	r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_exit>:

void _exit (int status)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ffe7 	bl	8002ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ef6:	e7fe      	b.n	8002ef6 <_exit+0x12>

08002ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e00a      	b.n	8002f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f0a:	f3af 8000 	nop.w
 8002f0e:	4601      	mov	r1, r0
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	60ba      	str	r2, [r7, #8]
 8002f16:	b2ca      	uxtb	r2, r1
 8002f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dbf0      	blt.n	8002f0a <_read+0x12>
	}

return len;
 8002f28:	687b      	ldr	r3, [r7, #4]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e009      	b.n	8002f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	60ba      	str	r2, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dbf1      	blt.n	8002f44 <_write+0x12>
	}
	return len;
 8002f60:	687b      	ldr	r3, [r7, #4]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_close>:

int _close(int file)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
	return -1;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f92:	605a      	str	r2, [r3, #4]
	return 0;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_isatty>:

int _isatty(int file)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f000 f846 	bl	8003094 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	24080000 	.word	0x24080000
 8003034:	00000400 	.word	0x00000400
 8003038:	240000a4 	.word	0x240000a4
 800303c:	24000108 	.word	0x24000108

08003040 <Reset_Handler>:
 8003040:	480d      	ldr	r0, [pc, #52]	; (8003078 <LoopForever+0x2>)
 8003042:	4685      	mov	sp, r0
 8003044:	f3af 8000 	nop.w
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <LoopForever+0x6>)
 800304a:	490d      	ldr	r1, [pc, #52]	; (8003080 <LoopForever+0xa>)
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <LoopForever+0xe>)
 800304e:	2300      	movs	r3, #0
 8003050:	e002      	b.n	8003058 <LoopCopyDataInit>

08003052 <CopyDataInit>:
 8003052:	58d4      	ldr	r4, [r2, r3]
 8003054:	50c4      	str	r4, [r0, r3]
 8003056:	3304      	adds	r3, #4

08003058 <LoopCopyDataInit>:
 8003058:	18c4      	adds	r4, r0, r3
 800305a:	428c      	cmp	r4, r1
 800305c:	d3f9      	bcc.n	8003052 <CopyDataInit>
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <LoopForever+0x12>)
 8003060:	4c0a      	ldr	r4, [pc, #40]	; (800308c <LoopForever+0x16>)
 8003062:	2300      	movs	r3, #0
 8003064:	e001      	b.n	800306a <LoopFillZerobss>

08003066 <FillZerobss>:
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	3204      	adds	r2, #4

0800306a <LoopFillZerobss>:
 800306a:	42a2      	cmp	r2, r4
 800306c:	d3fb      	bcc.n	8003066 <FillZerobss>
 800306e:	f000 f817 	bl	80030a0 <__libc_init_array>
 8003072:	f7ff feaf 	bl	8002dd4 <main>

08003076 <LoopForever>:
 8003076:	e7fe      	b.n	8003076 <LoopForever>
 8003078:	24080000 	.word	0x24080000
 800307c:	24000000 	.word	0x24000000
 8003080:	24000064 	.word	0x24000064
 8003084:	0800462c 	.word	0x0800462c
 8003088:	24000064 	.word	0x24000064
 800308c:	24000108 	.word	0x24000108

08003090 <ADC1_2_IRQHandler>:
 8003090:	e7fe      	b.n	8003090 <ADC1_2_IRQHandler>
	...

08003094 <__errno>:
 8003094:	4b01      	ldr	r3, [pc, #4]	; (800309c <__errno+0x8>)
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	24000000 	.word	0x24000000

080030a0 <__libc_init_array>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	4d0d      	ldr	r5, [pc, #52]	; (80030d8 <__libc_init_array+0x38>)
 80030a4:	4c0d      	ldr	r4, [pc, #52]	; (80030dc <__libc_init_array+0x3c>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	2600      	movs	r6, #0
 80030ac:	42a6      	cmp	r6, r4
 80030ae:	d109      	bne.n	80030c4 <__libc_init_array+0x24>
 80030b0:	4d0b      	ldr	r5, [pc, #44]	; (80030e0 <__libc_init_array+0x40>)
 80030b2:	4c0c      	ldr	r4, [pc, #48]	; (80030e4 <__libc_init_array+0x44>)
 80030b4:	f001 f856 	bl	8004164 <_init>
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	2600      	movs	r6, #0
 80030be:	42a6      	cmp	r6, r4
 80030c0:	d105      	bne.n	80030ce <__libc_init_array+0x2e>
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c8:	4798      	blx	r3
 80030ca:	3601      	adds	r6, #1
 80030cc:	e7ee      	b.n	80030ac <__libc_init_array+0xc>
 80030ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d2:	4798      	blx	r3
 80030d4:	3601      	adds	r6, #1
 80030d6:	e7f2      	b.n	80030be <__libc_init_array+0x1e>
 80030d8:	08004624 	.word	0x08004624
 80030dc:	08004624 	.word	0x08004624
 80030e0:	08004624 	.word	0x08004624
 80030e4:	08004628 	.word	0x08004628

080030e8 <malloc>:
 80030e8:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <malloc+0xc>)
 80030ea:	4601      	mov	r1, r0
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	f000 b85b 	b.w	80031a8 <_malloc_r>
 80030f2:	bf00      	nop
 80030f4:	24000000 	.word	0x24000000

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <_free_r>:
 8003108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800310a:	2900      	cmp	r1, #0
 800310c:	d048      	beq.n	80031a0 <_free_r+0x98>
 800310e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003112:	9001      	str	r0, [sp, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f1a1 0404 	sub.w	r4, r1, #4
 800311a:	bfb8      	it	lt
 800311c:	18e4      	addlt	r4, r4, r3
 800311e:	f000 f951 	bl	80033c4 <__malloc_lock>
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <_free_r+0x9c>)
 8003124:	9801      	ldr	r0, [sp, #4]
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	4615      	mov	r5, r2
 800312a:	b933      	cbnz	r3, 800313a <_free_r+0x32>
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	6014      	str	r4, [r2, #0]
 8003130:	b003      	add	sp, #12
 8003132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003136:	f000 b94b 	b.w	80033d0 <__malloc_unlock>
 800313a:	42a3      	cmp	r3, r4
 800313c:	d90b      	bls.n	8003156 <_free_r+0x4e>
 800313e:	6821      	ldr	r1, [r4, #0]
 8003140:	1862      	adds	r2, r4, r1
 8003142:	4293      	cmp	r3, r2
 8003144:	bf04      	itt	eq
 8003146:	681a      	ldreq	r2, [r3, #0]
 8003148:	685b      	ldreq	r3, [r3, #4]
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	bf04      	itt	eq
 800314e:	1852      	addeq	r2, r2, r1
 8003150:	6022      	streq	r2, [r4, #0]
 8003152:	602c      	str	r4, [r5, #0]
 8003154:	e7ec      	b.n	8003130 <_free_r+0x28>
 8003156:	461a      	mov	r2, r3
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b10b      	cbz	r3, 8003160 <_free_r+0x58>
 800315c:	42a3      	cmp	r3, r4
 800315e:	d9fa      	bls.n	8003156 <_free_r+0x4e>
 8003160:	6811      	ldr	r1, [r2, #0]
 8003162:	1855      	adds	r5, r2, r1
 8003164:	42a5      	cmp	r5, r4
 8003166:	d10b      	bne.n	8003180 <_free_r+0x78>
 8003168:	6824      	ldr	r4, [r4, #0]
 800316a:	4421      	add	r1, r4
 800316c:	1854      	adds	r4, r2, r1
 800316e:	42a3      	cmp	r3, r4
 8003170:	6011      	str	r1, [r2, #0]
 8003172:	d1dd      	bne.n	8003130 <_free_r+0x28>
 8003174:	681c      	ldr	r4, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	6053      	str	r3, [r2, #4]
 800317a:	4421      	add	r1, r4
 800317c:	6011      	str	r1, [r2, #0]
 800317e:	e7d7      	b.n	8003130 <_free_r+0x28>
 8003180:	d902      	bls.n	8003188 <_free_r+0x80>
 8003182:	230c      	movs	r3, #12
 8003184:	6003      	str	r3, [r0, #0]
 8003186:	e7d3      	b.n	8003130 <_free_r+0x28>
 8003188:	6825      	ldr	r5, [r4, #0]
 800318a:	1961      	adds	r1, r4, r5
 800318c:	428b      	cmp	r3, r1
 800318e:	bf04      	itt	eq
 8003190:	6819      	ldreq	r1, [r3, #0]
 8003192:	685b      	ldreq	r3, [r3, #4]
 8003194:	6063      	str	r3, [r4, #4]
 8003196:	bf04      	itt	eq
 8003198:	1949      	addeq	r1, r1, r5
 800319a:	6021      	streq	r1, [r4, #0]
 800319c:	6054      	str	r4, [r2, #4]
 800319e:	e7c7      	b.n	8003130 <_free_r+0x28>
 80031a0:	b003      	add	sp, #12
 80031a2:	bd30      	pop	{r4, r5, pc}
 80031a4:	240000a8 	.word	0x240000a8

080031a8 <_malloc_r>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	1ccd      	adds	r5, r1, #3
 80031ac:	f025 0503 	bic.w	r5, r5, #3
 80031b0:	3508      	adds	r5, #8
 80031b2:	2d0c      	cmp	r5, #12
 80031b4:	bf38      	it	cc
 80031b6:	250c      	movcc	r5, #12
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	4606      	mov	r6, r0
 80031bc:	db01      	blt.n	80031c2 <_malloc_r+0x1a>
 80031be:	42a9      	cmp	r1, r5
 80031c0:	d903      	bls.n	80031ca <_malloc_r+0x22>
 80031c2:	230c      	movs	r3, #12
 80031c4:	6033      	str	r3, [r6, #0]
 80031c6:	2000      	movs	r0, #0
 80031c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ca:	f000 f8fb 	bl	80033c4 <__malloc_lock>
 80031ce:	4921      	ldr	r1, [pc, #132]	; (8003254 <_malloc_r+0xac>)
 80031d0:	680a      	ldr	r2, [r1, #0]
 80031d2:	4614      	mov	r4, r2
 80031d4:	b99c      	cbnz	r4, 80031fe <_malloc_r+0x56>
 80031d6:	4f20      	ldr	r7, [pc, #128]	; (8003258 <_malloc_r+0xb0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b923      	cbnz	r3, 80031e6 <_malloc_r+0x3e>
 80031dc:	4621      	mov	r1, r4
 80031de:	4630      	mov	r0, r6
 80031e0:	f000 f83c 	bl	800325c <_sbrk_r>
 80031e4:	6038      	str	r0, [r7, #0]
 80031e6:	4629      	mov	r1, r5
 80031e8:	4630      	mov	r0, r6
 80031ea:	f000 f837 	bl	800325c <_sbrk_r>
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	d123      	bne.n	800323a <_malloc_r+0x92>
 80031f2:	230c      	movs	r3, #12
 80031f4:	6033      	str	r3, [r6, #0]
 80031f6:	4630      	mov	r0, r6
 80031f8:	f000 f8ea 	bl	80033d0 <__malloc_unlock>
 80031fc:	e7e3      	b.n	80031c6 <_malloc_r+0x1e>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	1b5b      	subs	r3, r3, r5
 8003202:	d417      	bmi.n	8003234 <_malloc_r+0x8c>
 8003204:	2b0b      	cmp	r3, #11
 8003206:	d903      	bls.n	8003210 <_malloc_r+0x68>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	441c      	add	r4, r3
 800320c:	6025      	str	r5, [r4, #0]
 800320e:	e004      	b.n	800321a <_malloc_r+0x72>
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	42a2      	cmp	r2, r4
 8003214:	bf0c      	ite	eq
 8003216:	600b      	streq	r3, [r1, #0]
 8003218:	6053      	strne	r3, [r2, #4]
 800321a:	4630      	mov	r0, r6
 800321c:	f000 f8d8 	bl	80033d0 <__malloc_unlock>
 8003220:	f104 000b 	add.w	r0, r4, #11
 8003224:	1d23      	adds	r3, r4, #4
 8003226:	f020 0007 	bic.w	r0, r0, #7
 800322a:	1ac2      	subs	r2, r0, r3
 800322c:	d0cc      	beq.n	80031c8 <_malloc_r+0x20>
 800322e:	1a1b      	subs	r3, r3, r0
 8003230:	50a3      	str	r3, [r4, r2]
 8003232:	e7c9      	b.n	80031c8 <_malloc_r+0x20>
 8003234:	4622      	mov	r2, r4
 8003236:	6864      	ldr	r4, [r4, #4]
 8003238:	e7cc      	b.n	80031d4 <_malloc_r+0x2c>
 800323a:	1cc4      	adds	r4, r0, #3
 800323c:	f024 0403 	bic.w	r4, r4, #3
 8003240:	42a0      	cmp	r0, r4
 8003242:	d0e3      	beq.n	800320c <_malloc_r+0x64>
 8003244:	1a21      	subs	r1, r4, r0
 8003246:	4630      	mov	r0, r6
 8003248:	f000 f808 	bl	800325c <_sbrk_r>
 800324c:	3001      	adds	r0, #1
 800324e:	d1dd      	bne.n	800320c <_malloc_r+0x64>
 8003250:	e7cf      	b.n	80031f2 <_malloc_r+0x4a>
 8003252:	bf00      	nop
 8003254:	240000a8 	.word	0x240000a8
 8003258:	240000ac 	.word	0x240000ac

0800325c <_sbrk_r>:
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4d06      	ldr	r5, [pc, #24]	; (8003278 <_sbrk_r+0x1c>)
 8003260:	2300      	movs	r3, #0
 8003262:	4604      	mov	r4, r0
 8003264:	4608      	mov	r0, r1
 8003266:	602b      	str	r3, [r5, #0]
 8003268:	f7ff feb4 	bl	8002fd4 <_sbrk>
 800326c:	1c43      	adds	r3, r0, #1
 800326e:	d102      	bne.n	8003276 <_sbrk_r+0x1a>
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	b103      	cbz	r3, 8003276 <_sbrk_r+0x1a>
 8003274:	6023      	str	r3, [r4, #0]
 8003276:	bd38      	pop	{r3, r4, r5, pc}
 8003278:	240000f8 	.word	0x240000f8

0800327c <strcat>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4602      	mov	r2, r0
 8003280:	7814      	ldrb	r4, [r2, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	3201      	adds	r2, #1
 8003286:	2c00      	cmp	r4, #0
 8003288:	d1fa      	bne.n	8003280 <strcat+0x4>
 800328a:	3b01      	subs	r3, #1
 800328c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003290:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003294:	2a00      	cmp	r2, #0
 8003296:	d1f9      	bne.n	800328c <strcat+0x10>
 8003298:	bd10      	pop	{r4, pc}

0800329a <strcpy>:
 800329a:	4603      	mov	r3, r0
 800329c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032a0:	f803 2b01 	strb.w	r2, [r3], #1
 80032a4:	2a00      	cmp	r2, #0
 80032a6:	d1f9      	bne.n	800329c <strcpy+0x2>
 80032a8:	4770      	bx	lr
	...

080032ac <strtok>:
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <strtok+0x5c>)
 80032ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b0:	681e      	ldr	r6, [r3, #0]
 80032b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80032b4:	4605      	mov	r5, r0
 80032b6:	b9fc      	cbnz	r4, 80032f8 <strtok+0x4c>
 80032b8:	2050      	movs	r0, #80	; 0x50
 80032ba:	9101      	str	r1, [sp, #4]
 80032bc:	f7ff ff14 	bl	80030e8 <malloc>
 80032c0:	9901      	ldr	r1, [sp, #4]
 80032c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80032c4:	4602      	mov	r2, r0
 80032c6:	b920      	cbnz	r0, 80032d2 <strtok+0x26>
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <strtok+0x60>)
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <strtok+0x64>)
 80032cc:	2157      	movs	r1, #87	; 0x57
 80032ce:	f000 f849 	bl	8003364 <__assert_func>
 80032d2:	e9c0 4400 	strd	r4, r4, [r0]
 80032d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80032da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80032de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80032e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80032e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80032ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80032ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80032f2:	6184      	str	r4, [r0, #24]
 80032f4:	7704      	strb	r4, [r0, #28]
 80032f6:	6244      	str	r4, [r0, #36]	; 0x24
 80032f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80032fa:	2301      	movs	r3, #1
 80032fc:	4628      	mov	r0, r5
 80032fe:	b002      	add	sp, #8
 8003300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003304:	f000 b806 	b.w	8003314 <__strtok_r>
 8003308:	24000000 	.word	0x24000000
 800330c:	080044dc 	.word	0x080044dc
 8003310:	080044f3 	.word	0x080044f3

08003314 <__strtok_r>:
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b908      	cbnz	r0, 800331c <__strtok_r+0x8>
 8003318:	6810      	ldr	r0, [r2, #0]
 800331a:	b188      	cbz	r0, 8003340 <__strtok_r+0x2c>
 800331c:	4604      	mov	r4, r0
 800331e:	4620      	mov	r0, r4
 8003320:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003324:	460f      	mov	r7, r1
 8003326:	f817 6b01 	ldrb.w	r6, [r7], #1
 800332a:	b91e      	cbnz	r6, 8003334 <__strtok_r+0x20>
 800332c:	b965      	cbnz	r5, 8003348 <__strtok_r+0x34>
 800332e:	6015      	str	r5, [r2, #0]
 8003330:	4628      	mov	r0, r5
 8003332:	e005      	b.n	8003340 <__strtok_r+0x2c>
 8003334:	42b5      	cmp	r5, r6
 8003336:	d1f6      	bne.n	8003326 <__strtok_r+0x12>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <__strtok_r+0xa>
 800333c:	6014      	str	r4, [r2, #0]
 800333e:	7003      	strb	r3, [r0, #0]
 8003340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003342:	461c      	mov	r4, r3
 8003344:	e00c      	b.n	8003360 <__strtok_r+0x4c>
 8003346:	b915      	cbnz	r5, 800334e <__strtok_r+0x3a>
 8003348:	f814 3b01 	ldrb.w	r3, [r4], #1
 800334c:	460e      	mov	r6, r1
 800334e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003352:	42ab      	cmp	r3, r5
 8003354:	d1f7      	bne.n	8003346 <__strtok_r+0x32>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f3      	beq.n	8003342 <__strtok_r+0x2e>
 800335a:	2300      	movs	r3, #0
 800335c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003360:	6014      	str	r4, [r2, #0]
 8003362:	e7ed      	b.n	8003340 <__strtok_r+0x2c>

08003364 <__assert_func>:
 8003364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003366:	4614      	mov	r4, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4b09      	ldr	r3, [pc, #36]	; (8003390 <__assert_func+0x2c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4605      	mov	r5, r0
 8003370:	68d8      	ldr	r0, [r3, #12]
 8003372:	b14c      	cbz	r4, 8003388 <__assert_func+0x24>
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <__assert_func+0x30>)
 8003376:	9100      	str	r1, [sp, #0]
 8003378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800337c:	4906      	ldr	r1, [pc, #24]	; (8003398 <__assert_func+0x34>)
 800337e:	462b      	mov	r3, r5
 8003380:	f000 f80e 	bl	80033a0 <fiprintf>
 8003384:	f000 fbd8 	bl	8003b38 <abort>
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__assert_func+0x38>)
 800338a:	461c      	mov	r4, r3
 800338c:	e7f3      	b.n	8003376 <__assert_func+0x12>
 800338e:	bf00      	nop
 8003390:	24000000 	.word	0x24000000
 8003394:	08004554 	.word	0x08004554
 8003398:	08004561 	.word	0x08004561
 800339c:	0800458f 	.word	0x0800458f

080033a0 <fiprintf>:
 80033a0:	b40e      	push	{r1, r2, r3}
 80033a2:	b503      	push	{r0, r1, lr}
 80033a4:	4601      	mov	r1, r0
 80033a6:	ab03      	add	r3, sp, #12
 80033a8:	4805      	ldr	r0, [pc, #20]	; (80033c0 <fiprintf+0x20>)
 80033aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ae:	6800      	ldr	r0, [r0, #0]
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	f000 f83d 	bl	8003430 <_vfiprintf_r>
 80033b6:	b002      	add	sp, #8
 80033b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033bc:	b003      	add	sp, #12
 80033be:	4770      	bx	lr
 80033c0:	24000000 	.word	0x24000000

080033c4 <__malloc_lock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_lock+0x8>)
 80033c6:	f000 bd77 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 80033ca:	bf00      	nop
 80033cc:	24000100 	.word	0x24000100

080033d0 <__malloc_unlock>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__malloc_unlock+0x8>)
 80033d2:	f000 bd72 	b.w	8003eba <__retarget_lock_release_recursive>
 80033d6:	bf00      	nop
 80033d8:	24000100 	.word	0x24000100

080033dc <__sfputc_r>:
 80033dc:	6893      	ldr	r3, [r2, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	b410      	push	{r4}
 80033e4:	6093      	str	r3, [r2, #8]
 80033e6:	da08      	bge.n	80033fa <__sfputc_r+0x1e>
 80033e8:	6994      	ldr	r4, [r2, #24]
 80033ea:	42a3      	cmp	r3, r4
 80033ec:	db01      	blt.n	80033f2 <__sfputc_r+0x16>
 80033ee:	290a      	cmp	r1, #10
 80033f0:	d103      	bne.n	80033fa <__sfputc_r+0x1e>
 80033f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033f6:	f000 badf 	b.w	80039b8 <__swbuf_r>
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	1c58      	adds	r0, r3, #1
 80033fe:	6010      	str	r0, [r2, #0]
 8003400:	7019      	strb	r1, [r3, #0]
 8003402:	4608      	mov	r0, r1
 8003404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003408:	4770      	bx	lr

0800340a <__sfputs_r>:
 800340a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340c:	4606      	mov	r6, r0
 800340e:	460f      	mov	r7, r1
 8003410:	4614      	mov	r4, r2
 8003412:	18d5      	adds	r5, r2, r3
 8003414:	42ac      	cmp	r4, r5
 8003416:	d101      	bne.n	800341c <__sfputs_r+0x12>
 8003418:	2000      	movs	r0, #0
 800341a:	e007      	b.n	800342c <__sfputs_r+0x22>
 800341c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003420:	463a      	mov	r2, r7
 8003422:	4630      	mov	r0, r6
 8003424:	f7ff ffda 	bl	80033dc <__sfputc_r>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d1f3      	bne.n	8003414 <__sfputs_r+0xa>
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003430 <_vfiprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	460d      	mov	r5, r1
 8003436:	b09d      	sub	sp, #116	; 0x74
 8003438:	4614      	mov	r4, r2
 800343a:	4698      	mov	r8, r3
 800343c:	4606      	mov	r6, r0
 800343e:	b118      	cbz	r0, 8003448 <_vfiprintf_r+0x18>
 8003440:	6983      	ldr	r3, [r0, #24]
 8003442:	b90b      	cbnz	r3, 8003448 <_vfiprintf_r+0x18>
 8003444:	f000 fc9a 	bl	8003d7c <__sinit>
 8003448:	4b89      	ldr	r3, [pc, #548]	; (8003670 <_vfiprintf_r+0x240>)
 800344a:	429d      	cmp	r5, r3
 800344c:	d11b      	bne.n	8003486 <_vfiprintf_r+0x56>
 800344e:	6875      	ldr	r5, [r6, #4]
 8003450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003452:	07d9      	lsls	r1, r3, #31
 8003454:	d405      	bmi.n	8003462 <_vfiprintf_r+0x32>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	059a      	lsls	r2, r3, #22
 800345a:	d402      	bmi.n	8003462 <_vfiprintf_r+0x32>
 800345c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800345e:	f000 fd2b 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003462:	89ab      	ldrh	r3, [r5, #12]
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	d501      	bpl.n	800346c <_vfiprintf_r+0x3c>
 8003468:	692b      	ldr	r3, [r5, #16]
 800346a:	b9eb      	cbnz	r3, 80034a8 <_vfiprintf_r+0x78>
 800346c:	4629      	mov	r1, r5
 800346e:	4630      	mov	r0, r6
 8003470:	f000 faf4 	bl	8003a5c <__swsetup_r>
 8003474:	b1c0      	cbz	r0, 80034a8 <_vfiprintf_r+0x78>
 8003476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003478:	07dc      	lsls	r4, r3, #31
 800347a:	d50e      	bpl.n	800349a <_vfiprintf_r+0x6a>
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	b01d      	add	sp, #116	; 0x74
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <_vfiprintf_r+0x244>)
 8003488:	429d      	cmp	r5, r3
 800348a:	d101      	bne.n	8003490 <_vfiprintf_r+0x60>
 800348c:	68b5      	ldr	r5, [r6, #8]
 800348e:	e7df      	b.n	8003450 <_vfiprintf_r+0x20>
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <_vfiprintf_r+0x248>)
 8003492:	429d      	cmp	r5, r3
 8003494:	bf08      	it	eq
 8003496:	68f5      	ldreq	r5, [r6, #12]
 8003498:	e7da      	b.n	8003450 <_vfiprintf_r+0x20>
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	0598      	lsls	r0, r3, #22
 800349e:	d4ed      	bmi.n	800347c <_vfiprintf_r+0x4c>
 80034a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034a2:	f000 fd0a 	bl	8003eba <__retarget_lock_release_recursive>
 80034a6:	e7e9      	b.n	800347c <_vfiprintf_r+0x4c>
 80034a8:	2300      	movs	r3, #0
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
 80034ac:	2320      	movs	r3, #32
 80034ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80034b6:	2330      	movs	r3, #48	; 0x30
 80034b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800367c <_vfiprintf_r+0x24c>
 80034bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c0:	f04f 0901 	mov.w	r9, #1
 80034c4:	4623      	mov	r3, r4
 80034c6:	469a      	mov	sl, r3
 80034c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034cc:	b10a      	cbz	r2, 80034d2 <_vfiprintf_r+0xa2>
 80034ce:	2a25      	cmp	r2, #37	; 0x25
 80034d0:	d1f9      	bne.n	80034c6 <_vfiprintf_r+0x96>
 80034d2:	ebba 0b04 	subs.w	fp, sl, r4
 80034d6:	d00b      	beq.n	80034f0 <_vfiprintf_r+0xc0>
 80034d8:	465b      	mov	r3, fp
 80034da:	4622      	mov	r2, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	4630      	mov	r0, r6
 80034e0:	f7ff ff93 	bl	800340a <__sfputs_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	f000 80aa 	beq.w	800363e <_vfiprintf_r+0x20e>
 80034ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034ec:	445a      	add	r2, fp
 80034ee:	9209      	str	r2, [sp, #36]	; 0x24
 80034f0:	f89a 3000 	ldrb.w	r3, [sl]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a2 	beq.w	800363e <_vfiprintf_r+0x20e>
 80034fa:	2300      	movs	r3, #0
 80034fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003504:	f10a 0a01 	add.w	sl, sl, #1
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	9307      	str	r3, [sp, #28]
 800350c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003510:	931a      	str	r3, [sp, #104]	; 0x68
 8003512:	4654      	mov	r4, sl
 8003514:	2205      	movs	r2, #5
 8003516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351a:	4858      	ldr	r0, [pc, #352]	; (800367c <_vfiprintf_r+0x24c>)
 800351c:	f7fc fee8 	bl	80002f0 <memchr>
 8003520:	9a04      	ldr	r2, [sp, #16]
 8003522:	b9d8      	cbnz	r0, 800355c <_vfiprintf_r+0x12c>
 8003524:	06d1      	lsls	r1, r2, #27
 8003526:	bf44      	itt	mi
 8003528:	2320      	movmi	r3, #32
 800352a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800352e:	0713      	lsls	r3, r2, #28
 8003530:	bf44      	itt	mi
 8003532:	232b      	movmi	r3, #43	; 0x2b
 8003534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003538:	f89a 3000 	ldrb.w	r3, [sl]
 800353c:	2b2a      	cmp	r3, #42	; 0x2a
 800353e:	d015      	beq.n	800356c <_vfiprintf_r+0x13c>
 8003540:	9a07      	ldr	r2, [sp, #28]
 8003542:	4654      	mov	r4, sl
 8003544:	2000      	movs	r0, #0
 8003546:	f04f 0c0a 	mov.w	ip, #10
 800354a:	4621      	mov	r1, r4
 800354c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003550:	3b30      	subs	r3, #48	; 0x30
 8003552:	2b09      	cmp	r3, #9
 8003554:	d94e      	bls.n	80035f4 <_vfiprintf_r+0x1c4>
 8003556:	b1b0      	cbz	r0, 8003586 <_vfiprintf_r+0x156>
 8003558:	9207      	str	r2, [sp, #28]
 800355a:	e014      	b.n	8003586 <_vfiprintf_r+0x156>
 800355c:	eba0 0308 	sub.w	r3, r0, r8
 8003560:	fa09 f303 	lsl.w	r3, r9, r3
 8003564:	4313      	orrs	r3, r2
 8003566:	9304      	str	r3, [sp, #16]
 8003568:	46a2      	mov	sl, r4
 800356a:	e7d2      	b.n	8003512 <_vfiprintf_r+0xe2>
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	1d19      	adds	r1, r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9103      	str	r1, [sp, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bfbb      	ittet	lt
 8003578:	425b      	neglt	r3, r3
 800357a:	f042 0202 	orrlt.w	r2, r2, #2
 800357e:	9307      	strge	r3, [sp, #28]
 8003580:	9307      	strlt	r3, [sp, #28]
 8003582:	bfb8      	it	lt
 8003584:	9204      	strlt	r2, [sp, #16]
 8003586:	7823      	ldrb	r3, [r4, #0]
 8003588:	2b2e      	cmp	r3, #46	; 0x2e
 800358a:	d10c      	bne.n	80035a6 <_vfiprintf_r+0x176>
 800358c:	7863      	ldrb	r3, [r4, #1]
 800358e:	2b2a      	cmp	r3, #42	; 0x2a
 8003590:	d135      	bne.n	80035fe <_vfiprintf_r+0x1ce>
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	9203      	str	r2, [sp, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	bfb8      	it	lt
 800359e:	f04f 33ff 	movlt.w	r3, #4294967295
 80035a2:	3402      	adds	r4, #2
 80035a4:	9305      	str	r3, [sp, #20]
 80035a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800368c <_vfiprintf_r+0x25c>
 80035aa:	7821      	ldrb	r1, [r4, #0]
 80035ac:	2203      	movs	r2, #3
 80035ae:	4650      	mov	r0, sl
 80035b0:	f7fc fe9e 	bl	80002f0 <memchr>
 80035b4:	b140      	cbz	r0, 80035c8 <_vfiprintf_r+0x198>
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	eba0 000a 	sub.w	r0, r0, sl
 80035bc:	fa03 f000 	lsl.w	r0, r3, r0
 80035c0:	9b04      	ldr	r3, [sp, #16]
 80035c2:	4303      	orrs	r3, r0
 80035c4:	3401      	adds	r4, #1
 80035c6:	9304      	str	r3, [sp, #16]
 80035c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035cc:	482c      	ldr	r0, [pc, #176]	; (8003680 <_vfiprintf_r+0x250>)
 80035ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035d2:	2206      	movs	r2, #6
 80035d4:	f7fc fe8c 	bl	80002f0 <memchr>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d03f      	beq.n	800365c <_vfiprintf_r+0x22c>
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <_vfiprintf_r+0x254>)
 80035de:	bb1b      	cbnz	r3, 8003628 <_vfiprintf_r+0x1f8>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	3307      	adds	r3, #7
 80035e4:	f023 0307 	bic.w	r3, r3, #7
 80035e8:	3308      	adds	r3, #8
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ee:	443b      	add	r3, r7
 80035f0:	9309      	str	r3, [sp, #36]	; 0x24
 80035f2:	e767      	b.n	80034c4 <_vfiprintf_r+0x94>
 80035f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80035f8:	460c      	mov	r4, r1
 80035fa:	2001      	movs	r0, #1
 80035fc:	e7a5      	b.n	800354a <_vfiprintf_r+0x11a>
 80035fe:	2300      	movs	r3, #0
 8003600:	3401      	adds	r4, #1
 8003602:	9305      	str	r3, [sp, #20]
 8003604:	4619      	mov	r1, r3
 8003606:	f04f 0c0a 	mov.w	ip, #10
 800360a:	4620      	mov	r0, r4
 800360c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003610:	3a30      	subs	r2, #48	; 0x30
 8003612:	2a09      	cmp	r2, #9
 8003614:	d903      	bls.n	800361e <_vfiprintf_r+0x1ee>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0c5      	beq.n	80035a6 <_vfiprintf_r+0x176>
 800361a:	9105      	str	r1, [sp, #20]
 800361c:	e7c3      	b.n	80035a6 <_vfiprintf_r+0x176>
 800361e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003622:	4604      	mov	r4, r0
 8003624:	2301      	movs	r3, #1
 8003626:	e7f0      	b.n	800360a <_vfiprintf_r+0x1da>
 8003628:	ab03      	add	r3, sp, #12
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	462a      	mov	r2, r5
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <_vfiprintf_r+0x258>)
 8003630:	a904      	add	r1, sp, #16
 8003632:	4630      	mov	r0, r6
 8003634:	f3af 8000 	nop.w
 8003638:	4607      	mov	r7, r0
 800363a:	1c78      	adds	r0, r7, #1
 800363c:	d1d6      	bne.n	80035ec <_vfiprintf_r+0x1bc>
 800363e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003640:	07d9      	lsls	r1, r3, #31
 8003642:	d405      	bmi.n	8003650 <_vfiprintf_r+0x220>
 8003644:	89ab      	ldrh	r3, [r5, #12]
 8003646:	059a      	lsls	r2, r3, #22
 8003648:	d402      	bmi.n	8003650 <_vfiprintf_r+0x220>
 800364a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800364c:	f000 fc35 	bl	8003eba <__retarget_lock_release_recursive>
 8003650:	89ab      	ldrh	r3, [r5, #12]
 8003652:	065b      	lsls	r3, r3, #25
 8003654:	f53f af12 	bmi.w	800347c <_vfiprintf_r+0x4c>
 8003658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800365a:	e711      	b.n	8003480 <_vfiprintf_r+0x50>
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	462a      	mov	r2, r5
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <_vfiprintf_r+0x258>)
 8003664:	a904      	add	r1, sp, #16
 8003666:	4630      	mov	r0, r6
 8003668:	f000 f880 	bl	800376c <_printf_i>
 800366c:	e7e4      	b.n	8003638 <_vfiprintf_r+0x208>
 800366e:	bf00      	nop
 8003670:	080045e4 	.word	0x080045e4
 8003674:	08004604 	.word	0x08004604
 8003678:	080045c4 	.word	0x080045c4
 800367c:	08004590 	.word	0x08004590
 8003680:	0800459a 	.word	0x0800459a
 8003684:	00000000 	.word	0x00000000
 8003688:	0800340b 	.word	0x0800340b
 800368c:	08004596 	.word	0x08004596

08003690 <_printf_common>:
 8003690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003694:	4616      	mov	r6, r2
 8003696:	4699      	mov	r9, r3
 8003698:	688a      	ldr	r2, [r1, #8]
 800369a:	690b      	ldr	r3, [r1, #16]
 800369c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bfb8      	it	lt
 80036a4:	4613      	movlt	r3, r2
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036ac:	4607      	mov	r7, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	b10a      	cbz	r2, 80036b6 <_printf_common+0x26>
 80036b2:	3301      	adds	r3, #1
 80036b4:	6033      	str	r3, [r6, #0]
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	0699      	lsls	r1, r3, #26
 80036ba:	bf42      	ittt	mi
 80036bc:	6833      	ldrmi	r3, [r6, #0]
 80036be:	3302      	addmi	r3, #2
 80036c0:	6033      	strmi	r3, [r6, #0]
 80036c2:	6825      	ldr	r5, [r4, #0]
 80036c4:	f015 0506 	ands.w	r5, r5, #6
 80036c8:	d106      	bne.n	80036d8 <_printf_common+0x48>
 80036ca:	f104 0a19 	add.w	sl, r4, #25
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	6832      	ldr	r2, [r6, #0]
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	42ab      	cmp	r3, r5
 80036d6:	dc26      	bgt.n	8003726 <_printf_common+0x96>
 80036d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036dc:	1e13      	subs	r3, r2, #0
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	bf18      	it	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	0692      	lsls	r2, r2, #26
 80036e6:	d42b      	bmi.n	8003740 <_printf_common+0xb0>
 80036e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ec:	4649      	mov	r1, r9
 80036ee:	4638      	mov	r0, r7
 80036f0:	47c0      	blx	r8
 80036f2:	3001      	adds	r0, #1
 80036f4:	d01e      	beq.n	8003734 <_printf_common+0xa4>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	68e5      	ldr	r5, [r4, #12]
 80036fa:	6832      	ldr	r2, [r6, #0]
 80036fc:	f003 0306 	and.w	r3, r3, #6
 8003700:	2b04      	cmp	r3, #4
 8003702:	bf08      	it	eq
 8003704:	1aad      	subeq	r5, r5, r2
 8003706:	68a3      	ldr	r3, [r4, #8]
 8003708:	6922      	ldr	r2, [r4, #16]
 800370a:	bf0c      	ite	eq
 800370c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003710:	2500      	movne	r5, #0
 8003712:	4293      	cmp	r3, r2
 8003714:	bfc4      	itt	gt
 8003716:	1a9b      	subgt	r3, r3, r2
 8003718:	18ed      	addgt	r5, r5, r3
 800371a:	2600      	movs	r6, #0
 800371c:	341a      	adds	r4, #26
 800371e:	42b5      	cmp	r5, r6
 8003720:	d11a      	bne.n	8003758 <_printf_common+0xc8>
 8003722:	2000      	movs	r0, #0
 8003724:	e008      	b.n	8003738 <_printf_common+0xa8>
 8003726:	2301      	movs	r3, #1
 8003728:	4652      	mov	r2, sl
 800372a:	4649      	mov	r1, r9
 800372c:	4638      	mov	r0, r7
 800372e:	47c0      	blx	r8
 8003730:	3001      	adds	r0, #1
 8003732:	d103      	bne.n	800373c <_printf_common+0xac>
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	3501      	adds	r5, #1
 800373e:	e7c6      	b.n	80036ce <_printf_common+0x3e>
 8003740:	18e1      	adds	r1, r4, r3
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	2030      	movs	r0, #48	; 0x30
 8003746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374a:	4422      	add	r2, r4
 800374c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003754:	3302      	adds	r3, #2
 8003756:	e7c7      	b.n	80036e8 <_printf_common+0x58>
 8003758:	2301      	movs	r3, #1
 800375a:	4622      	mov	r2, r4
 800375c:	4649      	mov	r1, r9
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	3001      	adds	r0, #1
 8003764:	d0e6      	beq.n	8003734 <_printf_common+0xa4>
 8003766:	3601      	adds	r6, #1
 8003768:	e7d9      	b.n	800371e <_printf_common+0x8e>
	...

0800376c <_printf_i>:
 800376c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	460c      	mov	r4, r1
 8003772:	4691      	mov	r9, r2
 8003774:	7e27      	ldrb	r7, [r4, #24]
 8003776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003778:	2f78      	cmp	r7, #120	; 0x78
 800377a:	4680      	mov	r8, r0
 800377c:	469a      	mov	sl, r3
 800377e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003782:	d807      	bhi.n	8003794 <_printf_i+0x28>
 8003784:	2f62      	cmp	r7, #98	; 0x62
 8003786:	d80a      	bhi.n	800379e <_printf_i+0x32>
 8003788:	2f00      	cmp	r7, #0
 800378a:	f000 80d8 	beq.w	800393e <_printf_i+0x1d2>
 800378e:	2f58      	cmp	r7, #88	; 0x58
 8003790:	f000 80a3 	beq.w	80038da <_printf_i+0x16e>
 8003794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800379c:	e03a      	b.n	8003814 <_printf_i+0xa8>
 800379e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a2:	2b15      	cmp	r3, #21
 80037a4:	d8f6      	bhi.n	8003794 <_printf_i+0x28>
 80037a6:	a001      	add	r0, pc, #4	; (adr r0, 80037ac <_printf_i+0x40>)
 80037a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037ac:	08003805 	.word	0x08003805
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003795 	.word	0x08003795
 80037b8:	08003795 	.word	0x08003795
 80037bc:	08003795 	.word	0x08003795
 80037c0:	08003795 	.word	0x08003795
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003795 	.word	0x08003795
 80037cc:	08003795 	.word	0x08003795
 80037d0:	08003795 	.word	0x08003795
 80037d4:	08003795 	.word	0x08003795
 80037d8:	08003925 	.word	0x08003925
 80037dc:	08003849 	.word	0x08003849
 80037e0:	08003907 	.word	0x08003907
 80037e4:	08003795 	.word	0x08003795
 80037e8:	08003795 	.word	0x08003795
 80037ec:	08003947 	.word	0x08003947
 80037f0:	08003795 	.word	0x08003795
 80037f4:	08003849 	.word	0x08003849
 80037f8:	08003795 	.word	0x08003795
 80037fc:	08003795 	.word	0x08003795
 8003800:	0800390f 	.word	0x0800390f
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	600a      	str	r2, [r1, #0]
 800380c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003814:	2301      	movs	r3, #1
 8003816:	e0a3      	b.n	8003960 <_printf_i+0x1f4>
 8003818:	6825      	ldr	r5, [r4, #0]
 800381a:	6808      	ldr	r0, [r1, #0]
 800381c:	062e      	lsls	r6, r5, #24
 800381e:	f100 0304 	add.w	r3, r0, #4
 8003822:	d50a      	bpl.n	800383a <_printf_i+0xce>
 8003824:	6805      	ldr	r5, [r0, #0]
 8003826:	600b      	str	r3, [r1, #0]
 8003828:	2d00      	cmp	r5, #0
 800382a:	da03      	bge.n	8003834 <_printf_i+0xc8>
 800382c:	232d      	movs	r3, #45	; 0x2d
 800382e:	426d      	negs	r5, r5
 8003830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003834:	485e      	ldr	r0, [pc, #376]	; (80039b0 <_printf_i+0x244>)
 8003836:	230a      	movs	r3, #10
 8003838:	e019      	b.n	800386e <_printf_i+0x102>
 800383a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800383e:	6805      	ldr	r5, [r0, #0]
 8003840:	600b      	str	r3, [r1, #0]
 8003842:	bf18      	it	ne
 8003844:	b22d      	sxthne	r5, r5
 8003846:	e7ef      	b.n	8003828 <_printf_i+0xbc>
 8003848:	680b      	ldr	r3, [r1, #0]
 800384a:	6825      	ldr	r5, [r4, #0]
 800384c:	1d18      	adds	r0, r3, #4
 800384e:	6008      	str	r0, [r1, #0]
 8003850:	0628      	lsls	r0, r5, #24
 8003852:	d501      	bpl.n	8003858 <_printf_i+0xec>
 8003854:	681d      	ldr	r5, [r3, #0]
 8003856:	e002      	b.n	800385e <_printf_i+0xf2>
 8003858:	0669      	lsls	r1, r5, #25
 800385a:	d5fb      	bpl.n	8003854 <_printf_i+0xe8>
 800385c:	881d      	ldrh	r5, [r3, #0]
 800385e:	4854      	ldr	r0, [pc, #336]	; (80039b0 <_printf_i+0x244>)
 8003860:	2f6f      	cmp	r7, #111	; 0x6f
 8003862:	bf0c      	ite	eq
 8003864:	2308      	moveq	r3, #8
 8003866:	230a      	movne	r3, #10
 8003868:	2100      	movs	r1, #0
 800386a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800386e:	6866      	ldr	r6, [r4, #4]
 8003870:	60a6      	str	r6, [r4, #8]
 8003872:	2e00      	cmp	r6, #0
 8003874:	bfa2      	ittt	ge
 8003876:	6821      	ldrge	r1, [r4, #0]
 8003878:	f021 0104 	bicge.w	r1, r1, #4
 800387c:	6021      	strge	r1, [r4, #0]
 800387e:	b90d      	cbnz	r5, 8003884 <_printf_i+0x118>
 8003880:	2e00      	cmp	r6, #0
 8003882:	d04d      	beq.n	8003920 <_printf_i+0x1b4>
 8003884:	4616      	mov	r6, r2
 8003886:	fbb5 f1f3 	udiv	r1, r5, r3
 800388a:	fb03 5711 	mls	r7, r3, r1, r5
 800388e:	5dc7      	ldrb	r7, [r0, r7]
 8003890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003894:	462f      	mov	r7, r5
 8003896:	42bb      	cmp	r3, r7
 8003898:	460d      	mov	r5, r1
 800389a:	d9f4      	bls.n	8003886 <_printf_i+0x11a>
 800389c:	2b08      	cmp	r3, #8
 800389e:	d10b      	bne.n	80038b8 <_printf_i+0x14c>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	07df      	lsls	r7, r3, #31
 80038a4:	d508      	bpl.n	80038b8 <_printf_i+0x14c>
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	6861      	ldr	r1, [r4, #4]
 80038aa:	4299      	cmp	r1, r3
 80038ac:	bfde      	ittt	le
 80038ae:	2330      	movle	r3, #48	; 0x30
 80038b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038b8:	1b92      	subs	r2, r2, r6
 80038ba:	6122      	str	r2, [r4, #16]
 80038bc:	f8cd a000 	str.w	sl, [sp]
 80038c0:	464b      	mov	r3, r9
 80038c2:	aa03      	add	r2, sp, #12
 80038c4:	4621      	mov	r1, r4
 80038c6:	4640      	mov	r0, r8
 80038c8:	f7ff fee2 	bl	8003690 <_printf_common>
 80038cc:	3001      	adds	r0, #1
 80038ce:	d14c      	bne.n	800396a <_printf_i+0x1fe>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	b004      	add	sp, #16
 80038d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038da:	4835      	ldr	r0, [pc, #212]	; (80039b0 <_printf_i+0x244>)
 80038dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	680e      	ldr	r6, [r1, #0]
 80038e4:	061f      	lsls	r7, r3, #24
 80038e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80038ea:	600e      	str	r6, [r1, #0]
 80038ec:	d514      	bpl.n	8003918 <_printf_i+0x1ac>
 80038ee:	07d9      	lsls	r1, r3, #31
 80038f0:	bf44      	itt	mi
 80038f2:	f043 0320 	orrmi.w	r3, r3, #32
 80038f6:	6023      	strmi	r3, [r4, #0]
 80038f8:	b91d      	cbnz	r5, 8003902 <_printf_i+0x196>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	f023 0320 	bic.w	r3, r3, #32
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	2310      	movs	r3, #16
 8003904:	e7b0      	b.n	8003868 <_printf_i+0xfc>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	2378      	movs	r3, #120	; 0x78
 8003910:	4828      	ldr	r0, [pc, #160]	; (80039b4 <_printf_i+0x248>)
 8003912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003916:	e7e3      	b.n	80038e0 <_printf_i+0x174>
 8003918:	065e      	lsls	r6, r3, #25
 800391a:	bf48      	it	mi
 800391c:	b2ad      	uxthmi	r5, r5
 800391e:	e7e6      	b.n	80038ee <_printf_i+0x182>
 8003920:	4616      	mov	r6, r2
 8003922:	e7bb      	b.n	800389c <_printf_i+0x130>
 8003924:	680b      	ldr	r3, [r1, #0]
 8003926:	6826      	ldr	r6, [r4, #0]
 8003928:	6960      	ldr	r0, [r4, #20]
 800392a:	1d1d      	adds	r5, r3, #4
 800392c:	600d      	str	r5, [r1, #0]
 800392e:	0635      	lsls	r5, r6, #24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	d501      	bpl.n	8003938 <_printf_i+0x1cc>
 8003934:	6018      	str	r0, [r3, #0]
 8003936:	e002      	b.n	800393e <_printf_i+0x1d2>
 8003938:	0671      	lsls	r1, r6, #25
 800393a:	d5fb      	bpl.n	8003934 <_printf_i+0x1c8>
 800393c:	8018      	strh	r0, [r3, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	4616      	mov	r6, r2
 8003944:	e7ba      	b.n	80038bc <_printf_i+0x150>
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	1d1a      	adds	r2, r3, #4
 800394a:	600a      	str	r2, [r1, #0]
 800394c:	681e      	ldr	r6, [r3, #0]
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	2100      	movs	r1, #0
 8003952:	4630      	mov	r0, r6
 8003954:	f7fc fccc 	bl	80002f0 <memchr>
 8003958:	b108      	cbz	r0, 800395e <_printf_i+0x1f2>
 800395a:	1b80      	subs	r0, r0, r6
 800395c:	6060      	str	r0, [r4, #4]
 800395e:	6863      	ldr	r3, [r4, #4]
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	2300      	movs	r3, #0
 8003964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003968:	e7a8      	b.n	80038bc <_printf_i+0x150>
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	4632      	mov	r2, r6
 800396e:	4649      	mov	r1, r9
 8003970:	4640      	mov	r0, r8
 8003972:	47d0      	blx	sl
 8003974:	3001      	adds	r0, #1
 8003976:	d0ab      	beq.n	80038d0 <_printf_i+0x164>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d413      	bmi.n	80039a6 <_printf_i+0x23a>
 800397e:	68e0      	ldr	r0, [r4, #12]
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	4298      	cmp	r0, r3
 8003984:	bfb8      	it	lt
 8003986:	4618      	movlt	r0, r3
 8003988:	e7a4      	b.n	80038d4 <_printf_i+0x168>
 800398a:	2301      	movs	r3, #1
 800398c:	4632      	mov	r2, r6
 800398e:	4649      	mov	r1, r9
 8003990:	4640      	mov	r0, r8
 8003992:	47d0      	blx	sl
 8003994:	3001      	adds	r0, #1
 8003996:	d09b      	beq.n	80038d0 <_printf_i+0x164>
 8003998:	3501      	adds	r5, #1
 800399a:	68e3      	ldr	r3, [r4, #12]
 800399c:	9903      	ldr	r1, [sp, #12]
 800399e:	1a5b      	subs	r3, r3, r1
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	dcf2      	bgt.n	800398a <_printf_i+0x21e>
 80039a4:	e7eb      	b.n	800397e <_printf_i+0x212>
 80039a6:	2500      	movs	r5, #0
 80039a8:	f104 0619 	add.w	r6, r4, #25
 80039ac:	e7f5      	b.n	800399a <_printf_i+0x22e>
 80039ae:	bf00      	nop
 80039b0:	080045a1 	.word	0x080045a1
 80039b4:	080045b2 	.word	0x080045b2

080039b8 <__swbuf_r>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	460e      	mov	r6, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	4605      	mov	r5, r0
 80039c0:	b118      	cbz	r0, 80039ca <__swbuf_r+0x12>
 80039c2:	6983      	ldr	r3, [r0, #24]
 80039c4:	b90b      	cbnz	r3, 80039ca <__swbuf_r+0x12>
 80039c6:	f000 f9d9 	bl	8003d7c <__sinit>
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <__swbuf_r+0x98>)
 80039cc:	429c      	cmp	r4, r3
 80039ce:	d12b      	bne.n	8003a28 <__swbuf_r+0x70>
 80039d0:	686c      	ldr	r4, [r5, #4]
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	071a      	lsls	r2, r3, #28
 80039da:	d52f      	bpl.n	8003a3c <__swbuf_r+0x84>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	b36b      	cbz	r3, 8003a3c <__swbuf_r+0x84>
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	1ac0      	subs	r0, r0, r3
 80039e6:	6963      	ldr	r3, [r4, #20]
 80039e8:	b2f6      	uxtb	r6, r6
 80039ea:	4283      	cmp	r3, r0
 80039ec:	4637      	mov	r7, r6
 80039ee:	dc04      	bgt.n	80039fa <__swbuf_r+0x42>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 f92e 	bl	8003c54 <_fflush_r>
 80039f8:	bb30      	cbnz	r0, 8003a48 <__swbuf_r+0x90>
 80039fa:	68a3      	ldr	r3, [r4, #8]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60a3      	str	r3, [r4, #8]
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	6022      	str	r2, [r4, #0]
 8003a06:	701e      	strb	r6, [r3, #0]
 8003a08:	6963      	ldr	r3, [r4, #20]
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	4283      	cmp	r3, r0
 8003a0e:	d004      	beq.n	8003a1a <__swbuf_r+0x62>
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	07db      	lsls	r3, r3, #31
 8003a14:	d506      	bpl.n	8003a24 <__swbuf_r+0x6c>
 8003a16:	2e0a      	cmp	r6, #10
 8003a18:	d104      	bne.n	8003a24 <__swbuf_r+0x6c>
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f919 	bl	8003c54 <_fflush_r>
 8003a22:	b988      	cbnz	r0, 8003a48 <__swbuf_r+0x90>
 8003a24:	4638      	mov	r0, r7
 8003a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <__swbuf_r+0x9c>)
 8003a2a:	429c      	cmp	r4, r3
 8003a2c:	d101      	bne.n	8003a32 <__swbuf_r+0x7a>
 8003a2e:	68ac      	ldr	r4, [r5, #8]
 8003a30:	e7cf      	b.n	80039d2 <__swbuf_r+0x1a>
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <__swbuf_r+0xa0>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	bf08      	it	eq
 8003a38:	68ec      	ldreq	r4, [r5, #12]
 8003a3a:	e7ca      	b.n	80039d2 <__swbuf_r+0x1a>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f000 f80c 	bl	8003a5c <__swsetup_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d0cb      	beq.n	80039e0 <__swbuf_r+0x28>
 8003a48:	f04f 37ff 	mov.w	r7, #4294967295
 8003a4c:	e7ea      	b.n	8003a24 <__swbuf_r+0x6c>
 8003a4e:	bf00      	nop
 8003a50:	080045e4 	.word	0x080045e4
 8003a54:	08004604 	.word	0x08004604
 8003a58:	080045c4 	.word	0x080045c4

08003a5c <__swsetup_r>:
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <__swsetup_r+0xcc>)
 8003a5e:	b570      	push	{r4, r5, r6, lr}
 8003a60:	681d      	ldr	r5, [r3, #0]
 8003a62:	4606      	mov	r6, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	b125      	cbz	r5, 8003a72 <__swsetup_r+0x16>
 8003a68:	69ab      	ldr	r3, [r5, #24]
 8003a6a:	b913      	cbnz	r3, 8003a72 <__swsetup_r+0x16>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f985 	bl	8003d7c <__sinit>
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <__swsetup_r+0xd0>)
 8003a74:	429c      	cmp	r4, r3
 8003a76:	d10f      	bne.n	8003a98 <__swsetup_r+0x3c>
 8003a78:	686c      	ldr	r4, [r5, #4]
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a80:	0719      	lsls	r1, r3, #28
 8003a82:	d42c      	bmi.n	8003ade <__swsetup_r+0x82>
 8003a84:	06dd      	lsls	r5, r3, #27
 8003a86:	d411      	bmi.n	8003aac <__swsetup_r+0x50>
 8003a88:	2309      	movs	r3, #9
 8003a8a:	6033      	str	r3, [r6, #0]
 8003a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295
 8003a96:	e03e      	b.n	8003b16 <__swsetup_r+0xba>
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <__swsetup_r+0xd4>)
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d101      	bne.n	8003aa2 <__swsetup_r+0x46>
 8003a9e:	68ac      	ldr	r4, [r5, #8]
 8003aa0:	e7eb      	b.n	8003a7a <__swsetup_r+0x1e>
 8003aa2:	4b24      	ldr	r3, [pc, #144]	; (8003b34 <__swsetup_r+0xd8>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	bf08      	it	eq
 8003aa8:	68ec      	ldreq	r4, [r5, #12]
 8003aaa:	e7e6      	b.n	8003a7a <__swsetup_r+0x1e>
 8003aac:	0758      	lsls	r0, r3, #29
 8003aae:	d512      	bpl.n	8003ad6 <__swsetup_r+0x7a>
 8003ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ab2:	b141      	cbz	r1, 8003ac6 <__swsetup_r+0x6a>
 8003ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	d002      	beq.n	8003ac2 <__swsetup_r+0x66>
 8003abc:	4630      	mov	r0, r6
 8003abe:	f7ff fb23 	bl	8003108 <_free_r>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6063      	str	r3, [r4, #4]
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f043 0308 	orr.w	r3, r3, #8
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	6923      	ldr	r3, [r4, #16]
 8003ae0:	b94b      	cbnz	r3, 8003af6 <__swsetup_r+0x9a>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aec:	d003      	beq.n	8003af6 <__swsetup_r+0x9a>
 8003aee:	4621      	mov	r1, r4
 8003af0:	4630      	mov	r0, r6
 8003af2:	f000 fa07 	bl	8003f04 <__smakebuf_r>
 8003af6:	89a0      	ldrh	r0, [r4, #12]
 8003af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003afc:	f010 0301 	ands.w	r3, r0, #1
 8003b00:	d00a      	beq.n	8003b18 <__swsetup_r+0xbc>
 8003b02:	2300      	movs	r3, #0
 8003b04:	60a3      	str	r3, [r4, #8]
 8003b06:	6963      	ldr	r3, [r4, #20]
 8003b08:	425b      	negs	r3, r3
 8003b0a:	61a3      	str	r3, [r4, #24]
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	b943      	cbnz	r3, 8003b22 <__swsetup_r+0xc6>
 8003b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b14:	d1ba      	bne.n	8003a8c <__swsetup_r+0x30>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	0781      	lsls	r1, r0, #30
 8003b1a:	bf58      	it	pl
 8003b1c:	6963      	ldrpl	r3, [r4, #20]
 8003b1e:	60a3      	str	r3, [r4, #8]
 8003b20:	e7f4      	b.n	8003b0c <__swsetup_r+0xb0>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e7f7      	b.n	8003b16 <__swsetup_r+0xba>
 8003b26:	bf00      	nop
 8003b28:	24000000 	.word	0x24000000
 8003b2c:	080045e4 	.word	0x080045e4
 8003b30:	08004604 	.word	0x08004604
 8003b34:	080045c4 	.word	0x080045c4

08003b38 <abort>:
 8003b38:	b508      	push	{r3, lr}
 8003b3a:	2006      	movs	r0, #6
 8003b3c:	f000 fa4a 	bl	8003fd4 <raise>
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7ff f9cf 	bl	8002ee4 <_exit>
	...

08003b48 <__sflush_r>:
 8003b48:	898a      	ldrh	r2, [r1, #12]
 8003b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4e:	4605      	mov	r5, r0
 8003b50:	0710      	lsls	r0, r2, #28
 8003b52:	460c      	mov	r4, r1
 8003b54:	d458      	bmi.n	8003c08 <__sflush_r+0xc0>
 8003b56:	684b      	ldr	r3, [r1, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	dc05      	bgt.n	8003b68 <__sflush_r+0x20>
 8003b5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	dc02      	bgt.n	8003b68 <__sflush_r+0x20>
 8003b62:	2000      	movs	r0, #0
 8003b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b6a:	2e00      	cmp	r6, #0
 8003b6c:	d0f9      	beq.n	8003b62 <__sflush_r+0x1a>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b74:	682f      	ldr	r7, [r5, #0]
 8003b76:	602b      	str	r3, [r5, #0]
 8003b78:	d032      	beq.n	8003be0 <__sflush_r+0x98>
 8003b7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	075a      	lsls	r2, r3, #29
 8003b80:	d505      	bpl.n	8003b8e <__sflush_r+0x46>
 8003b82:	6863      	ldr	r3, [r4, #4]
 8003b84:	1ac0      	subs	r0, r0, r3
 8003b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b88:	b10b      	cbz	r3, 8003b8e <__sflush_r+0x46>
 8003b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b8c:	1ac0      	subs	r0, r0, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	4602      	mov	r2, r0
 8003b92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b94:	6a21      	ldr	r1, [r4, #32]
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b0      	blx	r6
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	d106      	bne.n	8003bae <__sflush_r+0x66>
 8003ba0:	6829      	ldr	r1, [r5, #0]
 8003ba2:	291d      	cmp	r1, #29
 8003ba4:	d82c      	bhi.n	8003c00 <__sflush_r+0xb8>
 8003ba6:	4a2a      	ldr	r2, [pc, #168]	; (8003c50 <__sflush_r+0x108>)
 8003ba8:	40ca      	lsrs	r2, r1
 8003baa:	07d6      	lsls	r6, r2, #31
 8003bac:	d528      	bpl.n	8003c00 <__sflush_r+0xb8>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	6062      	str	r2, [r4, #4]
 8003bb2:	04d9      	lsls	r1, r3, #19
 8003bb4:	6922      	ldr	r2, [r4, #16]
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	d504      	bpl.n	8003bc4 <__sflush_r+0x7c>
 8003bba:	1c42      	adds	r2, r0, #1
 8003bbc:	d101      	bne.n	8003bc2 <__sflush_r+0x7a>
 8003bbe:	682b      	ldr	r3, [r5, #0]
 8003bc0:	b903      	cbnz	r3, 8003bc4 <__sflush_r+0x7c>
 8003bc2:	6560      	str	r0, [r4, #84]	; 0x54
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	602f      	str	r7, [r5, #0]
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d0ca      	beq.n	8003b62 <__sflush_r+0x1a>
 8003bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d002      	beq.n	8003bda <__sflush_r+0x92>
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f7ff fa97 	bl	8003108 <_free_r>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	6360      	str	r0, [r4, #52]	; 0x34
 8003bde:	e7c1      	b.n	8003b64 <__sflush_r+0x1c>
 8003be0:	6a21      	ldr	r1, [r4, #32]
 8003be2:	2301      	movs	r3, #1
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b0      	blx	r6
 8003be8:	1c41      	adds	r1, r0, #1
 8003bea:	d1c7      	bne.n	8003b7c <__sflush_r+0x34>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c4      	beq.n	8003b7c <__sflush_r+0x34>
 8003bf2:	2b1d      	cmp	r3, #29
 8003bf4:	d001      	beq.n	8003bfa <__sflush_r+0xb2>
 8003bf6:	2b16      	cmp	r3, #22
 8003bf8:	d101      	bne.n	8003bfe <__sflush_r+0xb6>
 8003bfa:	602f      	str	r7, [r5, #0]
 8003bfc:	e7b1      	b.n	8003b62 <__sflush_r+0x1a>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	e7ad      	b.n	8003b64 <__sflush_r+0x1c>
 8003c08:	690f      	ldr	r7, [r1, #16]
 8003c0a:	2f00      	cmp	r7, #0
 8003c0c:	d0a9      	beq.n	8003b62 <__sflush_r+0x1a>
 8003c0e:	0793      	lsls	r3, r2, #30
 8003c10:	680e      	ldr	r6, [r1, #0]
 8003c12:	bf08      	it	eq
 8003c14:	694b      	ldreq	r3, [r1, #20]
 8003c16:	600f      	str	r7, [r1, #0]
 8003c18:	bf18      	it	ne
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	eba6 0807 	sub.w	r8, r6, r7
 8003c20:	608b      	str	r3, [r1, #8]
 8003c22:	f1b8 0f00 	cmp.w	r8, #0
 8003c26:	dd9c      	ble.n	8003b62 <__sflush_r+0x1a>
 8003c28:	6a21      	ldr	r1, [r4, #32]
 8003c2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	463a      	mov	r2, r7
 8003c30:	4628      	mov	r0, r5
 8003c32:	47b0      	blx	r6
 8003c34:	2800      	cmp	r0, #0
 8003c36:	dc06      	bgt.n	8003c46 <__sflush_r+0xfe>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	e78e      	b.n	8003b64 <__sflush_r+0x1c>
 8003c46:	4407      	add	r7, r0
 8003c48:	eba8 0800 	sub.w	r8, r8, r0
 8003c4c:	e7e9      	b.n	8003c22 <__sflush_r+0xda>
 8003c4e:	bf00      	nop
 8003c50:	20400001 	.word	0x20400001

08003c54 <_fflush_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	b913      	cbnz	r3, 8003c64 <_fflush_r+0x10>
 8003c5e:	2500      	movs	r5, #0
 8003c60:	4628      	mov	r0, r5
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	b118      	cbz	r0, 8003c6e <_fflush_r+0x1a>
 8003c66:	6983      	ldr	r3, [r0, #24]
 8003c68:	b90b      	cbnz	r3, 8003c6e <_fflush_r+0x1a>
 8003c6a:	f000 f887 	bl	8003d7c <__sinit>
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <_fflush_r+0x6c>)
 8003c70:	429c      	cmp	r4, r3
 8003c72:	d11b      	bne.n	8003cac <_fflush_r+0x58>
 8003c74:	686c      	ldr	r4, [r5, #4]
 8003c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ef      	beq.n	8003c5e <_fflush_r+0xa>
 8003c7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c80:	07d0      	lsls	r0, r2, #31
 8003c82:	d404      	bmi.n	8003c8e <_fflush_r+0x3a>
 8003c84:	0599      	lsls	r1, r3, #22
 8003c86:	d402      	bmi.n	8003c8e <_fflush_r+0x3a>
 8003c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c8a:	f000 f915 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003c8e:	4628      	mov	r0, r5
 8003c90:	4621      	mov	r1, r4
 8003c92:	f7ff ff59 	bl	8003b48 <__sflush_r>
 8003c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c98:	07da      	lsls	r2, r3, #31
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	d4e0      	bmi.n	8003c60 <_fflush_r+0xc>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	d4dd      	bmi.n	8003c60 <_fflush_r+0xc>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca6:	f000 f908 	bl	8003eba <__retarget_lock_release_recursive>
 8003caa:	e7d9      	b.n	8003c60 <_fflush_r+0xc>
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_fflush_r+0x70>)
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d101      	bne.n	8003cb6 <_fflush_r+0x62>
 8003cb2:	68ac      	ldr	r4, [r5, #8]
 8003cb4:	e7df      	b.n	8003c76 <_fflush_r+0x22>
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <_fflush_r+0x74>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	bf08      	it	eq
 8003cbc:	68ec      	ldreq	r4, [r5, #12]
 8003cbe:	e7da      	b.n	8003c76 <_fflush_r+0x22>
 8003cc0:	080045e4 	.word	0x080045e4
 8003cc4:	08004604 	.word	0x08004604
 8003cc8:	080045c4 	.word	0x080045c4

08003ccc <std>:
 8003ccc:	2300      	movs	r3, #0
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8003cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cda:	6083      	str	r3, [r0, #8]
 8003cdc:	8181      	strh	r1, [r0, #12]
 8003cde:	6643      	str	r3, [r0, #100]	; 0x64
 8003ce0:	81c2      	strh	r2, [r0, #14]
 8003ce2:	6183      	str	r3, [r0, #24]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	305c      	adds	r0, #92	; 0x5c
 8003cea:	f7ff fa05 	bl	80030f8 <memset>
 8003cee:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <std+0x38>)
 8003cf0:	6263      	str	r3, [r4, #36]	; 0x24
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <std+0x3c>)
 8003cf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <std+0x40>)
 8003cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <std+0x44>)
 8003cfc:	6224      	str	r4, [r4, #32]
 8003cfe:	6323      	str	r3, [r4, #48]	; 0x30
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	bf00      	nop
 8003d04:	0800400d 	.word	0x0800400d
 8003d08:	0800402f 	.word	0x0800402f
 8003d0c:	08004067 	.word	0x08004067
 8003d10:	0800408b 	.word	0x0800408b

08003d14 <_cleanup_r>:
 8003d14:	4901      	ldr	r1, [pc, #4]	; (8003d1c <_cleanup_r+0x8>)
 8003d16:	f000 b8af 	b.w	8003e78 <_fwalk_reent>
 8003d1a:	bf00      	nop
 8003d1c:	08003c55 	.word	0x08003c55

08003d20 <__sfmoreglue>:
 8003d20:	b570      	push	{r4, r5, r6, lr}
 8003d22:	1e4a      	subs	r2, r1, #1
 8003d24:	2568      	movs	r5, #104	; 0x68
 8003d26:	4355      	muls	r5, r2
 8003d28:	460e      	mov	r6, r1
 8003d2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d2e:	f7ff fa3b 	bl	80031a8 <_malloc_r>
 8003d32:	4604      	mov	r4, r0
 8003d34:	b140      	cbz	r0, 8003d48 <__sfmoreglue+0x28>
 8003d36:	2100      	movs	r1, #0
 8003d38:	e9c0 1600 	strd	r1, r6, [r0]
 8003d3c:	300c      	adds	r0, #12
 8003d3e:	60a0      	str	r0, [r4, #8]
 8003d40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d44:	f7ff f9d8 	bl	80030f8 <memset>
 8003d48:	4620      	mov	r0, r4
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}

08003d4c <__sfp_lock_acquire>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__sfp_lock_acquire+0x8>)
 8003d4e:	f000 b8b3 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	24000104 	.word	0x24000104

08003d58 <__sfp_lock_release>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__sfp_lock_release+0x8>)
 8003d5a:	f000 b8ae 	b.w	8003eba <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	24000104 	.word	0x24000104

08003d64 <__sinit_lock_acquire>:
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <__sinit_lock_acquire+0x8>)
 8003d66:	f000 b8a7 	b.w	8003eb8 <__retarget_lock_acquire_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	240000ff 	.word	0x240000ff

08003d70 <__sinit_lock_release>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__sinit_lock_release+0x8>)
 8003d72:	f000 b8a2 	b.w	8003eba <__retarget_lock_release_recursive>
 8003d76:	bf00      	nop
 8003d78:	240000ff 	.word	0x240000ff

08003d7c <__sinit>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4604      	mov	r4, r0
 8003d80:	f7ff fff0 	bl	8003d64 <__sinit_lock_acquire>
 8003d84:	69a3      	ldr	r3, [r4, #24]
 8003d86:	b11b      	cbz	r3, 8003d90 <__sinit+0x14>
 8003d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8c:	f7ff bff0 	b.w	8003d70 <__sinit_lock_release>
 8003d90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d94:	6523      	str	r3, [r4, #80]	; 0x50
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <__sinit+0x68>)
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <__sinit+0x6c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	bf04      	itt	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	61a3      	streq	r3, [r4, #24]
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 f820 	bl	8003dec <__sfp>
 8003dac:	6060      	str	r0, [r4, #4]
 8003dae:	4620      	mov	r0, r4
 8003db0:	f000 f81c 	bl	8003dec <__sfp>
 8003db4:	60a0      	str	r0, [r4, #8]
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 f818 	bl	8003dec <__sfp>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60e0      	str	r0, [r4, #12]
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	6860      	ldr	r0, [r4, #4]
 8003dc4:	f7ff ff82 	bl	8003ccc <std>
 8003dc8:	68a0      	ldr	r0, [r4, #8]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	2109      	movs	r1, #9
 8003dce:	f7ff ff7d 	bl	8003ccc <std>
 8003dd2:	68e0      	ldr	r0, [r4, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	2112      	movs	r1, #18
 8003dd8:	f7ff ff78 	bl	8003ccc <std>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	61a3      	str	r3, [r4, #24]
 8003de0:	e7d2      	b.n	8003d88 <__sinit+0xc>
 8003de2:	bf00      	nop
 8003de4:	080044d8 	.word	0x080044d8
 8003de8:	08003d15 	.word	0x08003d15

08003dec <__sfp>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	4607      	mov	r7, r0
 8003df0:	f7ff ffac 	bl	8003d4c <__sfp_lock_acquire>
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <__sfp+0x84>)
 8003df6:	681e      	ldr	r6, [r3, #0]
 8003df8:	69b3      	ldr	r3, [r6, #24]
 8003dfa:	b913      	cbnz	r3, 8003e02 <__sfp+0x16>
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f7ff ffbd 	bl	8003d7c <__sinit>
 8003e02:	3648      	adds	r6, #72	; 0x48
 8003e04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	d503      	bpl.n	8003e14 <__sfp+0x28>
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	b30b      	cbz	r3, 8003e54 <__sfp+0x68>
 8003e10:	6836      	ldr	r6, [r6, #0]
 8003e12:	e7f7      	b.n	8003e04 <__sfp+0x18>
 8003e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e18:	b9d5      	cbnz	r5, 8003e50 <__sfp+0x64>
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <__sfp+0x88>)
 8003e1c:	60e3      	str	r3, [r4, #12]
 8003e1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e22:	6665      	str	r5, [r4, #100]	; 0x64
 8003e24:	f000 f847 	bl	8003eb6 <__retarget_lock_init_recursive>
 8003e28:	f7ff ff96 	bl	8003d58 <__sfp_lock_release>
 8003e2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e34:	6025      	str	r5, [r4, #0]
 8003e36:	61a5      	str	r5, [r4, #24]
 8003e38:	2208      	movs	r2, #8
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e40:	f7ff f95a 	bl	80030f8 <memset>
 8003e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e50:	3468      	adds	r4, #104	; 0x68
 8003e52:	e7d9      	b.n	8003e08 <__sfp+0x1c>
 8003e54:	2104      	movs	r1, #4
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7ff ff62 	bl	8003d20 <__sfmoreglue>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	6030      	str	r0, [r6, #0]
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d1d5      	bne.n	8003e10 <__sfp+0x24>
 8003e64:	f7ff ff78 	bl	8003d58 <__sfp_lock_release>
 8003e68:	230c      	movs	r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	e7ee      	b.n	8003e4c <__sfp+0x60>
 8003e6e:	bf00      	nop
 8003e70:	080044d8 	.word	0x080044d8
 8003e74:	ffff0001 	.word	0xffff0001

08003e78 <_fwalk_reent>:
 8003e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e84:	2700      	movs	r7, #0
 8003e86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e8a:	f1b9 0901 	subs.w	r9, r9, #1
 8003e8e:	d505      	bpl.n	8003e9c <_fwalk_reent+0x24>
 8003e90:	6824      	ldr	r4, [r4, #0]
 8003e92:	2c00      	cmp	r4, #0
 8003e94:	d1f7      	bne.n	8003e86 <_fwalk_reent+0xe>
 8003e96:	4638      	mov	r0, r7
 8003e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9c:	89ab      	ldrh	r3, [r5, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d907      	bls.n	8003eb2 <_fwalk_reent+0x3a>
 8003ea2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	d003      	beq.n	8003eb2 <_fwalk_reent+0x3a>
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4630      	mov	r0, r6
 8003eae:	47c0      	blx	r8
 8003eb0:	4307      	orrs	r7, r0
 8003eb2:	3568      	adds	r5, #104	; 0x68
 8003eb4:	e7e9      	b.n	8003e8a <_fwalk_reent+0x12>

08003eb6 <__retarget_lock_init_recursive>:
 8003eb6:	4770      	bx	lr

08003eb8 <__retarget_lock_acquire_recursive>:
 8003eb8:	4770      	bx	lr

08003eba <__retarget_lock_release_recursive>:
 8003eba:	4770      	bx	lr

08003ebc <__swhatbuf_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	460e      	mov	r6, r1
 8003ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	b096      	sub	sp, #88	; 0x58
 8003ec8:	4614      	mov	r4, r2
 8003eca:	461d      	mov	r5, r3
 8003ecc:	da07      	bge.n	8003ede <__swhatbuf_r+0x22>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	602b      	str	r3, [r5, #0]
 8003ed2:	89b3      	ldrh	r3, [r6, #12]
 8003ed4:	061a      	lsls	r2, r3, #24
 8003ed6:	d410      	bmi.n	8003efa <__swhatbuf_r+0x3e>
 8003ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003edc:	e00e      	b.n	8003efc <__swhatbuf_r+0x40>
 8003ede:	466a      	mov	r2, sp
 8003ee0:	f000 f8fa 	bl	80040d8 <_fstat_r>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	dbf2      	blt.n	8003ece <__swhatbuf_r+0x12>
 8003ee8:	9a01      	ldr	r2, [sp, #4]
 8003eea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003eee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ef2:	425a      	negs	r2, r3
 8003ef4:	415a      	adcs	r2, r3
 8003ef6:	602a      	str	r2, [r5, #0]
 8003ef8:	e7ee      	b.n	8003ed8 <__swhatbuf_r+0x1c>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	2000      	movs	r0, #0
 8003efe:	6023      	str	r3, [r4, #0]
 8003f00:	b016      	add	sp, #88	; 0x58
 8003f02:	bd70      	pop	{r4, r5, r6, pc}

08003f04 <__smakebuf_r>:
 8003f04:	898b      	ldrh	r3, [r1, #12]
 8003f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f08:	079d      	lsls	r5, r3, #30
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	d507      	bpl.n	8003f20 <__smakebuf_r+0x1c>
 8003f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	2301      	movs	r3, #1
 8003f1a:	6163      	str	r3, [r4, #20]
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	ab01      	add	r3, sp, #4
 8003f22:	466a      	mov	r2, sp
 8003f24:	f7ff ffca 	bl	8003ebc <__swhatbuf_r>
 8003f28:	9900      	ldr	r1, [sp, #0]
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f7ff f93b 	bl	80031a8 <_malloc_r>
 8003f32:	b948      	cbnz	r0, 8003f48 <__smakebuf_r+0x44>
 8003f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f38:	059a      	lsls	r2, r3, #22
 8003f3a:	d4ef      	bmi.n	8003f1c <__smakebuf_r+0x18>
 8003f3c:	f023 0303 	bic.w	r3, r3, #3
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	81a3      	strh	r3, [r4, #12]
 8003f46:	e7e3      	b.n	8003f10 <__smakebuf_r+0xc>
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <__smakebuf_r+0x7c>)
 8003f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	6020      	str	r0, [r4, #0]
 8003f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f54:	81a3      	strh	r3, [r4, #12]
 8003f56:	9b00      	ldr	r3, [sp, #0]
 8003f58:	6163      	str	r3, [r4, #20]
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	6120      	str	r0, [r4, #16]
 8003f5e:	b15b      	cbz	r3, 8003f78 <__smakebuf_r+0x74>
 8003f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f8c9 	bl	80040fc <_isatty_r>
 8003f6a:	b128      	cbz	r0, 8003f78 <__smakebuf_r+0x74>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	89a0      	ldrh	r0, [r4, #12]
 8003f7a:	4305      	orrs	r5, r0
 8003f7c:	81a5      	strh	r5, [r4, #12]
 8003f7e:	e7cd      	b.n	8003f1c <__smakebuf_r+0x18>
 8003f80:	08003d15 	.word	0x08003d15

08003f84 <_raise_r>:
 8003f84:	291f      	cmp	r1, #31
 8003f86:	b538      	push	{r3, r4, r5, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	460d      	mov	r5, r1
 8003f8c:	d904      	bls.n	8003f98 <_raise_r+0x14>
 8003f8e:	2316      	movs	r3, #22
 8003f90:	6003      	str	r3, [r0, #0]
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f9a:	b112      	cbz	r2, 8003fa2 <_raise_r+0x1e>
 8003f9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fa0:	b94b      	cbnz	r3, 8003fb6 <_raise_r+0x32>
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f000 f830 	bl	8004008 <_getpid_r>
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4601      	mov	r1, r0
 8003fac:	4620      	mov	r0, r4
 8003fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fb2:	f000 b817 	b.w	8003fe4 <_kill_r>
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d00a      	beq.n	8003fd0 <_raise_r+0x4c>
 8003fba:	1c59      	adds	r1, r3, #1
 8003fbc:	d103      	bne.n	8003fc6 <_raise_r+0x42>
 8003fbe:	2316      	movs	r3, #22
 8003fc0:	6003      	str	r3, [r0, #0]
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	e7e7      	b.n	8003f96 <_raise_r+0x12>
 8003fc6:	2400      	movs	r4, #0
 8003fc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fcc:	4628      	mov	r0, r5
 8003fce:	4798      	blx	r3
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e7e0      	b.n	8003f96 <_raise_r+0x12>

08003fd4 <raise>:
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <raise+0xc>)
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f7ff bfd3 	b.w	8003f84 <_raise_r>
 8003fde:	bf00      	nop
 8003fe0:	24000000 	.word	0x24000000

08003fe4 <_kill_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_kill_r+0x20>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4604      	mov	r4, r0
 8003fec:	4608      	mov	r0, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	f7fe ff67 	bl	8002ec4 <_kill>
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d102      	bne.n	8004000 <_kill_r+0x1c>
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	b103      	cbz	r3, 8004000 <_kill_r+0x1c>
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	240000f8 	.word	0x240000f8

08004008 <_getpid_r>:
 8004008:	f7fe bf54 	b.w	8002eb4 <_getpid>

0800400c <__sread>:
 800400c:	b510      	push	{r4, lr}
 800400e:	460c      	mov	r4, r1
 8004010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004014:	f000 f894 	bl	8004140 <_read_r>
 8004018:	2800      	cmp	r0, #0
 800401a:	bfab      	itete	ge
 800401c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800401e:	89a3      	ldrhlt	r3, [r4, #12]
 8004020:	181b      	addge	r3, r3, r0
 8004022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004026:	bfac      	ite	ge
 8004028:	6563      	strge	r3, [r4, #84]	; 0x54
 800402a:	81a3      	strhlt	r3, [r4, #12]
 800402c:	bd10      	pop	{r4, pc}

0800402e <__swrite>:
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	461f      	mov	r7, r3
 8004034:	898b      	ldrh	r3, [r1, #12]
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	4605      	mov	r5, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4616      	mov	r6, r2
 800403e:	d505      	bpl.n	800404c <__swrite+0x1e>
 8004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004044:	2302      	movs	r3, #2
 8004046:	2200      	movs	r2, #0
 8004048:	f000 f868 	bl	800411c <_lseek_r>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	4632      	mov	r2, r6
 800405a:	463b      	mov	r3, r7
 800405c:	4628      	mov	r0, r5
 800405e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004062:	f000 b817 	b.w	8004094 <_write_r>

08004066 <__sseek>:
 8004066:	b510      	push	{r4, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406e:	f000 f855 	bl	800411c <_lseek_r>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	bf15      	itete	ne
 8004078:	6560      	strne	r0, [r4, #84]	; 0x54
 800407a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800407e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004082:	81a3      	strheq	r3, [r4, #12]
 8004084:	bf18      	it	ne
 8004086:	81a3      	strhne	r3, [r4, #12]
 8004088:	bd10      	pop	{r4, pc}

0800408a <__sclose>:
 800408a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408e:	f000 b813 	b.w	80040b8 <_close_r>
	...

08004094 <_write_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d07      	ldr	r5, [pc, #28]	; (80040b4 <_write_r+0x20>)
 8004098:	4604      	mov	r4, r0
 800409a:	4608      	mov	r0, r1
 800409c:	4611      	mov	r1, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7fe ff45 	bl	8002f32 <_write>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_write_r+0x1e>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_write_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	240000f8 	.word	0x240000f8

080040b8 <_close_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d06      	ldr	r5, [pc, #24]	; (80040d4 <_close_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fe ff51 	bl	8002f6a <_close>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_close_r+0x1a>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_close_r+0x1a>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	240000f8 	.word	0x240000f8

080040d8 <_fstat_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_fstat_r+0x20>)
 80040dc:	2300      	movs	r3, #0
 80040de:	4604      	mov	r4, r0
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	602b      	str	r3, [r5, #0]
 80040e6:	f7fe ff4c 	bl	8002f82 <_fstat>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d102      	bne.n	80040f4 <_fstat_r+0x1c>
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	b103      	cbz	r3, 80040f4 <_fstat_r+0x1c>
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
 80040f6:	bf00      	nop
 80040f8:	240000f8 	.word	0x240000f8

080040fc <_isatty_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4d06      	ldr	r5, [pc, #24]	; (8004118 <_isatty_r+0x1c>)
 8004100:	2300      	movs	r3, #0
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fe ff4b 	bl	8002fa2 <_isatty>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_isatty_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_isatty_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	240000f8 	.word	0x240000f8

0800411c <_lseek_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4d07      	ldr	r5, [pc, #28]	; (800413c <_lseek_r+0x20>)
 8004120:	4604      	mov	r4, r0
 8004122:	4608      	mov	r0, r1
 8004124:	4611      	mov	r1, r2
 8004126:	2200      	movs	r2, #0
 8004128:	602a      	str	r2, [r5, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f7fe ff44 	bl	8002fb8 <_lseek>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_lseek_r+0x1e>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_lseek_r+0x1e>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	240000f8 	.word	0x240000f8

08004140 <_read_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d07      	ldr	r5, [pc, #28]	; (8004160 <_read_r+0x20>)
 8004144:	4604      	mov	r4, r0
 8004146:	4608      	mov	r0, r1
 8004148:	4611      	mov	r1, r2
 800414a:	2200      	movs	r2, #0
 800414c:	602a      	str	r2, [r5, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	f7fe fed2 	bl	8002ef8 <_read>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_read_r+0x1e>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_read_r+0x1e>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	240000f8 	.word	0x240000f8

08004164 <_init>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr

08004170 <_fini>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr
