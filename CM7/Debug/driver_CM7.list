
driver_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c40  08003c40  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003c40  08003c40  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c40  08003c40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c44  08003c44  00013c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  24000000  08003c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  24000064  08003cac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000100  08003cac  00020100  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000713d  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001313  00000000  00000000  000271cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  000284e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003e8  00000000  00000000  00028940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b897  00000000  00000000  00028d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004bf0  00000000  00000000  000545bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2580  00000000  00000000  000591af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b72f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a98  00000000  00000000  0014b784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08003964 	.word	0x08003964

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	08003964 	.word	0x08003964

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <init_Bluetooh>:
void set_Baud_Rate(short baudRateSelection);
short get_Role(void);

//---------------------------------
void init_Bluetooh(USART_TypeDef *USARTx)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	Bluetooh_USART = USARTx;
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <init_Bluetooh+0x1c>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	6013      	str	r3, [r2, #0]
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	24000080 	.word	0x24000080

080003d0 <isConnection_established>:
bool isConnection_established(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 80003d6:	2064      	movs	r0, #100	; 0x64
 80003d8:	f001 fc62 	bl	8001ca0 <systickDelayMs>
	char* temp ;
	unsigned long size = 0 ;
 80003dc:	2300      	movs	r3, #0
 80003de:	603b      	str	r3, [r7, #0]
	char* cmd = "AT";
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <isConnection_established+0xa8>)
 80003e2:	607b      	str	r3, [r7, #4]
	short try_count = -1 ;
 80003e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003e8:	817b      	strh	r3, [r7, #10]
	//Wait until receive bluetooh responds
	while(size <=2){
 80003ea:	e034      	b.n	8000456 <isConnection_established+0x86>
	if(size <=2)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d80a      	bhi.n	8000408 <isConnection_established+0x38>
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80003f2:	4b22      	ldr	r3, [pc, #136]	; (800047c <isConnection_established+0xac>)
 80003f4:	681c      	ldr	r4, [r3, #0]
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ff7c 	bl	80002f4 <strlen>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	4620      	mov	r0, r4
 8000404:	f001 feac 	bl	8002160 <uart_send_string>
	temp = uart_get_buffer(Bluetooh_USART, &size);
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <isConnection_established+0xac>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	463a      	mov	r2, r7
 800040e:	4611      	mov	r1, r2
 8000410:	4618      	mov	r0, r3
 8000412:	f001 feca 	bl	80021aa <uart_get_buffer>
 8000416:	60f8      	str	r0, [r7, #12]
	try_count++ ;
 8000418:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800041c:	b29b      	uxth	r3, r3
 800041e:	3301      	adds	r3, #1
 8000420:	b29b      	uxth	r3, r3
 8000422:	817b      	strh	r3, [r7, #10]
	if(size <=2)
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2b02      	cmp	r3, #2
 8000428:	d80a      	bhi.n	8000440 <isConnection_established+0x70>
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <isConnection_established+0xac>)
 800042c:	681c      	ldr	r4, [r3, #0]
 800042e:	6878      	ldr	r0, [r7, #4]
 8000430:	f7ff ff60 	bl	80002f4 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	461a      	mov	r2, r3
 8000438:	6879      	ldr	r1, [r7, #4]
 800043a:	4620      	mov	r0, r4
 800043c:	f001 fe90 	bl	8002160 <uart_send_string>
	systickDelayMs(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f001 fc2d 	bl	8001ca0 <systickDelayMs>
	if(try_count ==1000)
 8000446:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800044a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800044e:	d102      	bne.n	8000456 <isConnection_established+0x86>
	{
		error("Connection is not Established");
 8000450:	480b      	ldr	r0, [pc, #44]	; (8000480 <isConnection_established+0xb0>)
 8000452:	f002 f8f7 	bl	8002644 <error>
	while(size <=2){
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	2b02      	cmp	r3, #2
 800045a:	d9c7      	bls.n	80003ec <isConnection_established+0x1c>
	}
	}
	if(strcmp(temp,"OK"))
 800045c:	4909      	ldr	r1, [pc, #36]	; (8000484 <isConnection_established+0xb4>)
 800045e:	68f8      	ldr	r0, [r7, #12]
 8000460:	f7ff ff3e 	bl	80002e0 <strcmp>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <isConnection_established+0x9e>
	{
		return true ;
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <isConnection_established+0xa0>
	}else
	{
		return false ;
 800046e:	2300      	movs	r3, #0
	}
}
 8000470:	4618      	mov	r0, r3
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	0800397c 	.word	0x0800397c
 800047c:	24000080 	.word	0x24000080
 8000480:	08003980 	.word	0x08003980
 8000484:	080039a0 	.word	0x080039a0

08000488 <get_baudRate_bluetooh>:
unsigned long get_baudRate_bluetooh(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b087      	sub	sp, #28
 800048c:	af00      	add	r7, sp, #0
	systickDelayMs(100);
 800048e:	2064      	movs	r0, #100	; 0x64
 8000490:	f001 fc06 	bl	8001ca0 <systickDelayMs>
	char* temp ;
		unsigned long size = 0 ;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
		char* cmd = "AT+BAUD\r\n";
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <get_baudRate_bluetooh+0x114>)
 800049a:	60fb      	str	r3, [r7, #12]
		short try_count = -1 ;
 800049c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a0:	827b      	strh	r3, [r7, #18]
		//Wait until receive bluetooh responds
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80004a2:	e024      	b.n	80004ee <get_baudRate_bluetooh+0x66>
			size = 0 ;
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80004a8:	4b3d      	ldr	r3, [pc, #244]	; (80005a0 <get_baudRate_bluetooh+0x118>)
 80004aa:	681c      	ldr	r4, [r3, #0]
 80004ac:	68f8      	ldr	r0, [r7, #12]
 80004ae:	f7ff ff21 	bl	80002f4 <strlen>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	68f9      	ldr	r1, [r7, #12]
 80004b8:	4620      	mov	r0, r4
 80004ba:	f001 fe51 	bl	8002160 <uart_send_string>
		systickDelayMs(200);
 80004be:	20c8      	movs	r0, #200	; 0xc8
 80004c0:	f001 fbee 	bl	8001ca0 <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80004c4:	4b36      	ldr	r3, [pc, #216]	; (80005a0 <get_baudRate_bluetooh+0x118>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	1d3a      	adds	r2, r7, #4
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fe6c 	bl	80021aa <uart_get_buffer>
 80004d2:	6178      	str	r0, [r7, #20]
		try_count++ ;
 80004d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004d8:	b29b      	uxth	r3, r3
 80004da:	3301      	adds	r3, #1
 80004dc:	b29b      	uxth	r3, r3
 80004de:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 80004e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80004e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e8:	d101      	bne.n	80004ee <get_baudRate_bluetooh+0x66>
		{
			return false ;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e051      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d9d7      	bls.n	80004a4 <get_baudRate_bluetooh+0x1c>
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b45      	cmp	r3, #69	; 0x45
 80004fa:	d104      	bne.n	8000506 <get_baudRate_bluetooh+0x7e>
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	3301      	adds	r3, #1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b52      	cmp	r3, #82	; 0x52
 8000504:	d0ce      	beq.n	80004a4 <get_baudRate_bluetooh+0x1c>
		}
		}
		 char * token = strtok(temp, "\r\n");
 8000506:	4927      	ldr	r1, [pc, #156]	; (80005a4 <get_baudRate_bluetooh+0x11c>)
 8000508:	6978      	ldr	r0, [r7, #20]
 800050a:	f002 facf 	bl	8002aac <strtok>
 800050e:	60b8      	str	r0, [r7, #8]
		 token = strtok(token, "=");
 8000510:	4925      	ldr	r1, [pc, #148]	; (80005a8 <get_baudRate_bluetooh+0x120>)
 8000512:	68b8      	ldr	r0, [r7, #8]
 8000514:	f002 faca 	bl	8002aac <strtok>
 8000518:	60b8      	str	r0, [r7, #8]
		 token = strtok(NULL," ");
 800051a:	4924      	ldr	r1, [pc, #144]	; (80005ac <get_baudRate_bluetooh+0x124>)
 800051c:	2000      	movs	r0, #0
 800051e:	f002 fac5 	bl	8002aac <strtok>
 8000522:	60b8      	str	r0, [r7, #8]
		 if(token == NULL)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d103      	bne.n	8000532 <get_baudRate_bluetooh+0xaa>
		 {
			 return get_baudRate_bluetooh();
 800052a:	f7ff ffad 	bl	8000488 <get_baudRate_bluetooh>
 800052e:	4603      	mov	r3, r0
 8000530:	e02f      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		 }
		 if (!((((char)token[0])>=48)&&(((char)token[0])<=52))){error("Get_Baud Rate not integer");}
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b2f      	cmp	r3, #47	; 0x2f
 8000538:	d903      	bls.n	8000542 <get_baudRate_bluetooh+0xba>
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b34      	cmp	r3, #52	; 0x34
 8000540:	d902      	bls.n	8000548 <get_baudRate_bluetooh+0xc0>
 8000542:	481b      	ldr	r0, [pc, #108]	; (80005b0 <get_baudRate_bluetooh+0x128>)
 8000544:	f002 f87e 	bl	8002644 <error>
		switch((char)*token)
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	3b30      	subs	r3, #48	; 0x30
 800054e:	2b04      	cmp	r3, #4
 8000550:	d81b      	bhi.n	800058a <get_baudRate_bluetooh+0x102>
 8000552:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <get_baudRate_bluetooh+0xd0>)
 8000554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000558:	0800056d 	.word	0x0800056d
 800055c:	08000573 	.word	0x08000573
 8000560:	08000579 	.word	0x08000579
 8000564:	0800057f 	.word	0x0800057f
 8000568:	08000585 	.word	0x08000585
		{
		case 48:
			return 115200;
 800056c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000570:	e00f      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		case 49:
			return 57600;
 8000572:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000576:	e00c      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		case 50:
			return 38400;
 8000578:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800057c:	e009      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		case 51:
			return 19200;
 800057e:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000582:	e006      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		case 52:
			return 9600;
 8000584:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000588:	e003      	b.n	8000592 <get_baudRate_bluetooh+0x10a>
		default:
			error("BlueTooh Baud Rate Error");
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <get_baudRate_bluetooh+0x12c>)
 800058c:	f002 f85a 	bl	8002644 <error>
		}
		return NULL;
 8000590:	2300      	movs	r3, #0

}
 8000592:	4618      	mov	r0, r3
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	bf00      	nop
 800059c:	080039a4 	.word	0x080039a4
 80005a0:	24000080 	.word	0x24000080
 80005a4:	080039b0 	.word	0x080039b0
 80005a8:	080039b4 	.word	0x080039b4
 80005ac:	080039b8 	.word	0x080039b8
 80005b0:	080039bc 	.word	0x080039bc
 80005b4:	080039d8 	.word	0x080039d8

080005b8 <get_Role>:
 * 3 IBeacon
 * 4 WeChat
 *
 * */
short get_Role(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0

	systickDelayMs(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f001 fb6e 	bl	8001ca0 <systickDelayMs>
	char* temp ;
		unsigned long size = 0 ;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
		char* cmd = "AT+ROLE\r\n";
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <get_Role+0x108>)
 80005ca:	60fb      	str	r3, [r7, #12]
		short try_count = -1 ;
 80005cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d0:	827b      	strh	r3, [r7, #18]
		//Wait until receive bluetooh responds
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 80005d2:	e025      	b.n	8000620 <get_Role+0x68>
			size = 0 ;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
		uart_send_string(Bluetooh_USART, cmd, strlen(cmd));
 80005d8:	4b3a      	ldr	r3, [pc, #232]	; (80006c4 <get_Role+0x10c>)
 80005da:	681c      	ldr	r4, [r3, #0]
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff fe89 	bl	80002f4 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	4620      	mov	r0, r4
 80005ea:	f001 fdb9 	bl	8002160 <uart_send_string>
		systickDelayMs(200);
 80005ee:	20c8      	movs	r0, #200	; 0xc8
 80005f0:	f001 fb56 	bl	8001ca0 <systickDelayMs>
		temp = uart_get_buffer(Bluetooh_USART, &size);
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <get_Role+0x10c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1d3a      	adds	r2, r7, #4
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fdd4 	bl	80021aa <uart_get_buffer>
 8000602:	6178      	str	r0, [r7, #20]
		try_count++ ;
 8000604:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000608:	b29b      	uxth	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b29b      	uxth	r3, r3
 800060e:	827b      	strh	r3, [r7, #18]
		if(try_count ==1000)
 8000610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000618:	d102      	bne.n	8000620 <get_Role+0x68>
		{
			error("Get Role Failed");
 800061a:	482b      	ldr	r0, [pc, #172]	; (80006c8 <get_Role+0x110>)
 800061c:	f002 f812 	bl	8002644 <error>
		while(size <=2 ||(temp[0]=='E'&&temp[1]=='R') ){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d9d6      	bls.n	80005d4 <get_Role+0x1c>
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b45      	cmp	r3, #69	; 0x45
 800062c:	d104      	bne.n	8000638 <get_Role+0x80>
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b52      	cmp	r3, #82	; 0x52
 8000636:	d0cd      	beq.n	80005d4 <get_Role+0x1c>
		}
		}
		 char * token = strtok(temp, "\r\n");
 8000638:	4924      	ldr	r1, [pc, #144]	; (80006cc <get_Role+0x114>)
 800063a:	6978      	ldr	r0, [r7, #20]
 800063c:	f002 fa36 	bl	8002aac <strtok>
 8000640:	60b8      	str	r0, [r7, #8]
		 token = strtok(token, "=");
 8000642:	4923      	ldr	r1, [pc, #140]	; (80006d0 <get_Role+0x118>)
 8000644:	68b8      	ldr	r0, [r7, #8]
 8000646:	f002 fa31 	bl	8002aac <strtok>
 800064a:	60b8      	str	r0, [r7, #8]
		 token = strtok(NULL," ");
 800064c:	4921      	ldr	r1, [pc, #132]	; (80006d4 <get_Role+0x11c>)
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fa2c 	bl	8002aac <strtok>
 8000654:	60b8      	str	r0, [r7, #8]
		 if(token == NULL){ error("Get Baud strtok failed");}
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <get_Role+0xaa>
 800065c:	481e      	ldr	r0, [pc, #120]	; (80006d8 <get_Role+0x120>)
 800065e:	f001 fff1 	bl	8002644 <error>
		 if (!((((char)token[0])>=48)&&(((char)token[0])<=52))){error("Get_Baud Rate not integer");}
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b2f      	cmp	r3, #47	; 0x2f
 8000668:	d903      	bls.n	8000672 <get_Role+0xba>
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b34      	cmp	r3, #52	; 0x34
 8000670:	d902      	bls.n	8000678 <get_Role+0xc0>
 8000672:	481a      	ldr	r0, [pc, #104]	; (80006dc <get_Role+0x124>)
 8000674:	f001 ffe6 	bl	8002644 <error>
		switch((char)*token)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3b30      	subs	r3, #48	; 0x30
 800067e:	2b04      	cmp	r3, #4
 8000680:	d816      	bhi.n	80006b0 <get_Role+0xf8>
 8000682:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <get_Role+0xd0>)
 8000684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000688:	0800069d 	.word	0x0800069d
 800068c:	080006a1 	.word	0x080006a1
 8000690:	080006a5 	.word	0x080006a5
 8000694:	080006a9 	.word	0x080006a9
 8000698:	080006ad 	.word	0x080006ad
		{
		case 48:
			return 0;
 800069c:	2300      	movs	r3, #0
 800069e:	e00b      	b.n	80006b8 <get_Role+0x100>
		case 49:
			return 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e009      	b.n	80006b8 <get_Role+0x100>
		case 50:
			return 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	e007      	b.n	80006b8 <get_Role+0x100>
		case 51:
			return 3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	e005      	b.n	80006b8 <get_Role+0x100>
		case 52:
			return 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	e003      	b.n	80006b8 <get_Role+0x100>
		default:
			error("BlueTooh Baud Rate Error");
 80006b0:	480b      	ldr	r0, [pc, #44]	; (80006e0 <get_Role+0x128>)
 80006b2:	f001 ffc7 	bl	8002644 <error>
		}
		return NULL;
 80006b6:	2300      	movs	r3, #0

}
 80006b8:	4618      	mov	r0, r3
 80006ba:	371c      	adds	r7, #28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	08003a18 	.word	0x08003a18
 80006c4:	24000080 	.word	0x24000080
 80006c8:	08003a24 	.word	0x08003a24
 80006cc:	080039b0 	.word	0x080039b0
 80006d0:	080039b4 	.word	0x080039b4
 80006d4:	080039b8 	.word	0x080039b8
 80006d8:	08003a34 	.word	0x08003a34
 80006dc:	080039bc 	.word	0x080039bc
 80006e0:	080039d8 	.word	0x080039d8

080006e4 <decimalToBinary>:

#define HSEON	(1U<<16) // HSE clock enable
#define HSERDY	(1U<<17) // HSE clock ready flag

long decimalToBinary(int decimalnum)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b087      	sub	sp, #28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    long binarynum = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
    int rem, temp = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]

    while (decimalnum!=0)
 80006f4:	e019      	b.n	800072a <decimalToBinary+0x46>
    {
        rem = decimalnum%2;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	bfb8      	it	lt
 8000700:	425b      	neglt	r3, r3
 8000702:	60fb      	str	r3, [r7, #12]
        decimalnum = decimalnum / 2;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	da00      	bge.n	800070c <decimalToBinary+0x28>
 800070a:	3301      	adds	r3, #1
 800070c:	105b      	asrs	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
        binarynum = binarynum + rem*temp;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	693a      	ldr	r2, [r7, #16]
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	4413      	add	r3, r2
 800071c:	617b      	str	r3, [r7, #20]
        temp = temp * 10;
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	613b      	str	r3, [r7, #16]
    while (decimalnum!=0)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e2      	bne.n	80006f6 <decimalToBinary+0x12>
    }
    return binarynum;
 8000730:	697b      	ldr	r3, [r7, #20]
}
 8000732:	4618      	mov	r0, r3
 8000734:	371c      	adds	r7, #28
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <PLLSRC_Select>:
 * 2: HSE selected as PLL clock (hse_ck)
 * 3: No clock send to DIVMx divider and PLLs
 *
 */
void PLLSRC_Select(short select)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
	if(select== 0)
 800074a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10c      	bne.n	800076c <PLLSRC_Select+0x2c>
	{
		RCC->PLLCKSELR &= ~(1U<<0);
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <PLLSRC_Select+0x94>)
 8000754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <PLLSRC_Select+0x94>)
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <PLLSRC_Select+0x94>)
 8000760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <PLLSRC_Select+0x94>)
 8000764:	f023 0302 	bic.w	r3, r3, #2
 8000768:	6293      	str	r3, [r2, #40]	; 0x28
	}else
	{
		RCC->PLLCKSELR |=  (1U<<0);
		RCC->PLLCKSELR |=  (1U<<1);
	}
}
 800076a:	e02d      	b.n	80007c8 <PLLSRC_Select+0x88>
	}else if(select ==1)
 800076c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10c      	bne.n	800078e <PLLSRC_Select+0x4e>
		RCC->PLLCKSELR |=  (1U<<0);
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <PLLSRC_Select+0x94>)
 8000776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000778:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <PLLSRC_Select+0x94>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <PLLSRC_Select+0x94>)
 8000782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <PLLSRC_Select+0x94>)
 8000786:	f023 0302 	bic.w	r3, r3, #2
 800078a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800078c:	e01c      	b.n	80007c8 <PLLSRC_Select+0x88>
	}else if(select == 2)
 800078e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000792:	2b02      	cmp	r3, #2
 8000794:	d10c      	bne.n	80007b0 <PLLSRC_Select+0x70>
		RCC->PLLCKSELR &= ~(1U<<0);
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <PLLSRC_Select+0x94>)
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <PLLSRC_Select+0x94>)
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <PLLSRC_Select+0x94>)
 80007a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <PLLSRC_Select+0x94>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007ae:	e00b      	b.n	80007c8 <PLLSRC_Select+0x88>
		RCC->PLLCKSELR |=  (1U<<0);
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <PLLSRC_Select+0x94>)
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <PLLSRC_Select+0x94>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <PLLSRC_Select+0x94>)
 80007be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <PLLSRC_Select+0x94>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	58024400 	.word	0x58024400

080007d8 <DIVM1>:
 * 32: division by 32 (default after reset)
 * ...
 * 63: division by 63
 */
void DIVM1(short prescaler)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	long temp = decimalToBinary(prescaler);
 80007e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff7c 	bl	80006e4 <decimalToBinary>
 80007ec:	6178      	str	r0, [r7, #20]
	for(int i = 4 ; i<10; i++)
 80007ee:	2304      	movs	r3, #4
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	e030      	b.n	8000856 <DIVM1+0x7e>
	{
		short s =  ( temp % 10);
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <DIVM1+0x90>)
 80007f8:	fb83 1302 	smull	r1, r3, r3, r2
 80007fc:	1099      	asrs	r1, r3, #2
 80007fe:	17d3      	asrs	r3, r2, #31
 8000800:	1ac9      	subs	r1, r1, r3
 8000802:	460b      	mov	r3, r1
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	1ad1      	subs	r1, r2, r3
 800080c:	460b      	mov	r3, r1
 800080e:	81fb      	strh	r3, [r7, #14]
		if(s==1)
 8000810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d109      	bne.n	800082c <DIVM1+0x54>
		{
			RCC->PLLCKSELR |= (1U<<i);
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <DIVM1+0x94>)
 800081a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800081c:	2101      	movs	r1, #1
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4911      	ldr	r1, [pc, #68]	; (800086c <DIVM1+0x94>)
 8000826:	4313      	orrs	r3, r2
 8000828:	628b      	str	r3, [r1, #40]	; 0x28
 800082a:	e009      	b.n	8000840 <DIVM1+0x68>
		}else
		{
			RCC->PLLCKSELR &= ~(1U<<i);
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <DIVM1+0x94>)
 800082e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000830:	2101      	movs	r1, #1
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	490c      	ldr	r1, [pc, #48]	; (800086c <DIVM1+0x94>)
 800083c:	4013      	ands	r3, r2
 800083e:	628b      	str	r3, [r1, #40]	; 0x28
		}
		temp /= 10;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <DIVM1+0x90>)
 8000844:	fb82 1203 	smull	r1, r2, r2, r3
 8000848:	1092      	asrs	r2, r2, #2
 800084a:	17db      	asrs	r3, r3, #31
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
	for(int i = 4 ; i<10; i++)
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	3301      	adds	r3, #1
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	2b09      	cmp	r3, #9
 800085a:	ddcb      	ble.n	80007f4 <DIVM1+0x1c>
	}

}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667
 800086c:	58024400 	.word	0x58024400

08000870 <SystemClockStatus>:
 * 2: HSE used as system clock (hse_ck)
 * 3: PLL1 used as system clock (pll1_p_ck)
 * others: Reserved
 */
void  SystemClockStatus(short CFGR)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	RCC->CFGR &= ~(1U<<2);
 800087a:	4b50      	ldr	r3, [pc, #320]	; (80009bc <SystemClockStatus+0x14c>)
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	4a4f      	ldr	r2, [pc, #316]	; (80009bc <SystemClockStatus+0x14c>)
 8000880:	f023 0304 	bic.w	r3, r3, #4
 8000884:	6113      	str	r3, [r2, #16]
	bool bit_0, bit_1;
	switch(CFGR)
 8000886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d81e      	bhi.n	80008cc <SystemClockStatus+0x5c>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <SystemClockStatus+0x24>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080008a5 	.word	0x080008a5
 8000898:	080008af 	.word	0x080008af
 800089c:	080008b9 	.word	0x080008b9
 80008a0:	080008c3 	.word	0x080008c3
	{
	case 0:
		bit_0 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	73bb      	strb	r3, [r7, #14]
		break;
 80008ac:	e013      	b.n	80008d6 <SystemClockStatus+0x66>
	case 1:
		bit_0 = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]
		break;
 80008b6:	e00e      	b.n	80008d6 <SystemClockStatus+0x66>
	case 2:
		bit_0 = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	73bb      	strb	r3, [r7, #14]
			break;
 80008c0:	e009      	b.n	80008d6 <SystemClockStatus+0x66>
	case 3:
		bit_0 = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73bb      	strb	r3, [r7, #14]
			break;
 80008ca:	e004      	b.n	80008d6 <SystemClockStatus+0x66>
	default:
		bit_0 = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
			break;
 80008d4:	bf00      	nop

	}


	if(bit_0)
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d006      	beq.n	80008ea <SystemClockStatus+0x7a>
	{
		RCC-> CFGR |= (1U<<0);
 80008dc:	4b37      	ldr	r3, [pc, #220]	; (80009bc <SystemClockStatus+0x14c>)
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	4a36      	ldr	r2, [pc, #216]	; (80009bc <SystemClockStatus+0x14c>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6113      	str	r3, [r2, #16]
 80008e8:	e005      	b.n	80008f6 <SystemClockStatus+0x86>
	}else
	{
		RCC-> CFGR &= ~(1U<<0);
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <SystemClockStatus+0x14c>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <SystemClockStatus+0x14c>)
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6113      	str	r3, [r2, #16]

	}
	if(bit_1)
 80008f6:	7bbb      	ldrb	r3, [r7, #14]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <SystemClockStatus+0x9a>
		{
			RCC-> CFGR |= (1U<<1);
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <SystemClockStatus+0x14c>)
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <SystemClockStatus+0x14c>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	6113      	str	r3, [r2, #16]
 8000908:	e005      	b.n	8000916 <SystemClockStatus+0xa6>
		}else
		{
			RCC-> CFGR &= ~(1U<<1);
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <SystemClockStatus+0x14c>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <SystemClockStatus+0x14c>)
 8000910:	f023 0302 	bic.w	r3, r3, #2
 8000914:	6113      	str	r3, [r2, #16]

		}
		if(bit_1==0){
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d024      	beq.n	800096c <SystemClockStatus+0xfc>
			if(bit_0==0)
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d00f      	beq.n	800094e <SystemClockStatus+0xde>
			{
			    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 800092e:	bf00      	nop
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <SystemClockStatus+0x14c>)
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	f003 0208 	and.w	r2, r3, #8
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	429a      	cmp	r2, r3
 800093c:	d1f8      	bne.n	8000930 <SystemClockStatus+0xc0>
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <SystemClockStatus+0x14c>)
 8000940:	691b      	ldr	r3, [r3, #16]
 8000942:	f003 0210 	and.w	r2, r3, #16
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	429a      	cmp	r2, r3
 800094a:	d1f1      	bne.n	8000930 <SystemClockStatus+0xc0>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));

						}
		}

}
 800094c:	e030      	b.n	80009b0 <SystemClockStatus+0x140>
			    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 800094e:	bf00      	nop
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <SystemClockStatus+0x14c>)
 8000952:	691b      	ldr	r3, [r3, #16]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	2b08      	cmp	r3, #8
 800095a:	d1f9      	bne.n	8000950 <SystemClockStatus+0xe0>
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <SystemClockStatus+0x14c>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	f003 0210 	and.w	r2, r3, #16
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	429a      	cmp	r2, r3
 8000968:	d1f2      	bne.n	8000950 <SystemClockStatus+0xe0>
}
 800096a:	e021      	b.n	80009b0 <SystemClockStatus+0x140>
			if(bit_0==0)
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	f083 0301 	eor.w	r3, r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00e      	beq.n	8000996 <SystemClockStatus+0x126>
						    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 8000978:	bf00      	nop
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <SystemClockStatus+0x14c>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	f003 0208 	and.w	r2, r3, #8
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	429a      	cmp	r2, r3
 8000986:	d1f8      	bne.n	800097a <SystemClockStatus+0x10a>
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <SystemClockStatus+0x14c>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	2b10      	cmp	r3, #16
 8000992:	d1f2      	bne.n	800097a <SystemClockStatus+0x10a>
}
 8000994:	e00c      	b.n	80009b0 <SystemClockStatus+0x140>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 8000996:	bf00      	nop
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <SystemClockStatus+0x14c>)
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	2b08      	cmp	r3, #8
 80009a2:	d1f9      	bne.n	8000998 <SystemClockStatus+0x128>
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SystemClockStatus+0x14c>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	d1f3      	bne.n	8000998 <SystemClockStatus+0x128>
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	58024400 	.word	0x58024400

080009c0 <PLL1DIVR>:
 * 3: pll1_q_ck = vco1_ck / 4
 * ...
 * 127: pll1_q_ck = vco1_ck / 128
 */
void PLL1DIVR(uint8_t DIVN1, short DIVP1, short DIVQ1, short DIVR1)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b089      	sub	sp, #36	; 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	4611      	mov	r1, r2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4623      	mov	r3, r4
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	4603      	mov	r3, r0
 80009d4:	80bb      	strh	r3, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	4613      	mov	r3, r2
 80009dc:	803b      	strh	r3, [r7, #0]
	if(DIVN1<=0x1FF && DIVN1>=0x000){
	RCC->PLL1DIVR  = DIVN1  ;
 80009de:	4a5f      	ldr	r2, [pc, #380]	; (8000b5c <PLL1DIVR+0x19c>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
	long temp = decimalToBinary(DIVP1);
 80009e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe7b 	bl	80006e4 <decimalToBinary>
 80009ee:	61f8      	str	r0, [r7, #28]
		for(int i = 9 ; i<16; i++)
 80009f0:	2309      	movs	r3, #9
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	e030      	b.n	8000a58 <PLL1DIVR+0x98>
		{
			short s =  ( temp % 10);
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <PLL1DIVR+0x1a0>)
 80009fa:	fb83 1302 	smull	r1, r3, r3, r2
 80009fe:	1099      	asrs	r1, r3, #2
 8000a00:	17d3      	asrs	r3, r2, #31
 8000a02:	1ac9      	subs	r1, r1, r3
 8000a04:	460b      	mov	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	1ad1      	subs	r1, r2, r3
 8000a0e:	460b      	mov	r3, r1
 8000a10:	817b      	strh	r3, [r7, #10]
			if(s==1)
 8000a12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d109      	bne.n	8000a2e <PLL1DIVR+0x6e>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000a1a:	4b50      	ldr	r3, [pc, #320]	; (8000b5c <PLL1DIVR+0x19c>)
 8000a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1e:	2101      	movs	r1, #1
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	494d      	ldr	r1, [pc, #308]	; (8000b5c <PLL1DIVR+0x19c>)
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	630b      	str	r3, [r1, #48]	; 0x30
 8000a2c:	e009      	b.n	8000a42 <PLL1DIVR+0x82>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8000a2e:	4b4b      	ldr	r3, [pc, #300]	; (8000b5c <PLL1DIVR+0x19c>)
 8000a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a32:	2101      	movs	r1, #1
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	4947      	ldr	r1, [pc, #284]	; (8000b5c <PLL1DIVR+0x19c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	4a46      	ldr	r2, [pc, #280]	; (8000b60 <PLL1DIVR+0x1a0>)
 8000a46:	fb82 1203 	smull	r1, r2, r2, r3
 8000a4a:	1092      	asrs	r2, r2, #2
 8000a4c:	17db      	asrs	r3, r3, #31
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	61fb      	str	r3, [r7, #28]
		for(int i = 9 ; i<16; i++)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	3301      	adds	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	ddcb      	ble.n	80009f6 <PLL1DIVR+0x36>
		}
	temp = decimalToBinary(DIVQ1);
 8000a5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe3e 	bl	80006e4 <decimalToBinary>
 8000a68:	61f8      	str	r0, [r7, #28]
		for(int i = 16; i<23; i++)
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e030      	b.n	8000ad2 <PLL1DIVR+0x112>
		{
			short s =  ( temp % 10);
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <PLL1DIVR+0x1a0>)
 8000a74:	fb83 1302 	smull	r1, r3, r3, r2
 8000a78:	1099      	asrs	r1, r3, #2
 8000a7a:	17d3      	asrs	r3, r2, #31
 8000a7c:	1ac9      	subs	r1, r1, r3
 8000a7e:	460b      	mov	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	440b      	add	r3, r1
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	1ad1      	subs	r1, r2, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	81bb      	strh	r3, [r7, #12]
			if(s==1)
 8000a8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d109      	bne.n	8000aa8 <PLL1DIVR+0xe8>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000a94:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <PLL1DIVR+0x19c>)
 8000a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a98:	2101      	movs	r1, #1
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	492e      	ldr	r1, [pc, #184]	; (8000b5c <PLL1DIVR+0x19c>)
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	630b      	str	r3, [r1, #48]	; 0x30
 8000aa6:	e009      	b.n	8000abc <PLL1DIVR+0xfc>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <PLL1DIVR+0x19c>)
 8000aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aac:	2101      	movs	r1, #1
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4929      	ldr	r1, [pc, #164]	; (8000b5c <PLL1DIVR+0x19c>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <PLL1DIVR+0x1a0>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1092      	asrs	r2, r2, #2
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	61fb      	str	r3, [r7, #28]
		for(int i = 16; i<23; i++)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2b16      	cmp	r3, #22
 8000ad6:	ddcb      	ble.n	8000a70 <PLL1DIVR+0xb0>
		}
	temp = decimalToBinary(DIVR1);
 8000ad8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe01 	bl	80006e4 <decimalToBinary>
 8000ae2:	61f8      	str	r0, [r7, #28]
		for(int i =24 ; i<31; i++)
 8000ae4:	2318      	movs	r3, #24
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	e030      	b.n	8000b4c <PLL1DIVR+0x18c>
		{
			short s =  ( temp % 10);
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <PLL1DIVR+0x1a0>)
 8000aee:	fb83 1302 	smull	r1, r3, r3, r2
 8000af2:	1099      	asrs	r1, r3, #2
 8000af4:	17d3      	asrs	r3, r2, #31
 8000af6:	1ac9      	subs	r1, r1, r3
 8000af8:	460b      	mov	r3, r1
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1ad1      	subs	r1, r2, r3
 8000b02:	460b      	mov	r3, r1
 8000b04:	81fb      	strh	r3, [r7, #14]
			if(s==1)
 8000b06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d109      	bne.n	8000b22 <PLL1DIVR+0x162>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <PLL1DIVR+0x19c>)
 8000b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b12:	2101      	movs	r1, #1
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	4910      	ldr	r1, [pc, #64]	; (8000b5c <PLL1DIVR+0x19c>)
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	630b      	str	r3, [r1, #48]	; 0x30
 8000b20:	e009      	b.n	8000b36 <PLL1DIVR+0x176>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <PLL1DIVR+0x19c>)
 8000b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b26:	2101      	movs	r1, #1
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	490a      	ldr	r1, [pc, #40]	; (8000b5c <PLL1DIVR+0x19c>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <PLL1DIVR+0x1a0>)
 8000b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b3e:	1092      	asrs	r2, r2, #2
 8000b40:	17db      	asrs	r3, r3, #31
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	61fb      	str	r3, [r7, #28]
		for(int i =24 ; i<31; i++)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	2b1e      	cmp	r3, #30
 8000b50:	ddcb      	ble.n	8000aea <PLL1DIVR+0x12a>
	{
		//Wrong Configuration
		while(1);
	}

}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	66666667 	.word	0x66666667

08000b64 <input_frequency_range>:
 *  1: The PLL1 input (ref1_ck) clock range frequency is between 2 and 4 MHz
 *  2: The PLL1 input (ref1_ck) clock range frequency is between 4 and 8 MHz
 *  3: The PLL1 input (ref1_ck) clock range frequency is between 8 and 16 MHz
 */
void input_frequency_range (short PLL1RGE)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
	switch(PLL1RGE)
 8000b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d83d      	bhi.n	8000bf2 <input_frequency_range+0x8e>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <input_frequency_range+0x18>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000ba7 	.word	0x08000ba7
 8000b84:	08000bc1 	.word	0x08000bc1
 8000b88:	08000bdb 	.word	0x08000bdb
	{
	case 0 :
		RCC->PLLCFGR &= ~(1U<<2);
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <input_frequency_range+0xb4>)
 8000b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <input_frequency_range+0xb4>)
 8000b92:	f023 0304 	bic.w	r3, r3, #4
 8000b96:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <input_frequency_range+0xb4>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <input_frequency_range+0xb4>)
 8000b9e:	f023 0308 	bic.w	r3, r3, #8
 8000ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
		break ;
 8000ba4:	e032      	b.n	8000c0c <input_frequency_range+0xa8>
	case 1 :
		RCC->PLLCFGR |= (1U<<2);
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <input_frequency_range+0xb4>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <input_frequency_range+0xb4>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <input_frequency_range+0xb4>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	4a18      	ldr	r2, [pc, #96]	; (8000c18 <input_frequency_range+0xb4>)
 8000bb8:	f023 0308 	bic.w	r3, r3, #8
 8000bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8000bbe:	e025      	b.n	8000c0c <input_frequency_range+0xa8>
	case 2 :
		RCC->PLLCFGR |= (1U<<3);
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <input_frequency_range+0xb4>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <input_frequency_range+0xb4>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<2);
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <input_frequency_range+0xb4>)
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <input_frequency_range+0xb4>)
 8000bd2:	f023 0304 	bic.w	r3, r3, #4
 8000bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 8000bd8:	e018      	b.n	8000c0c <input_frequency_range+0xa8>
	case 3 :
		RCC->PLLCFGR |= (1U<<3);
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <input_frequency_range+0xb4>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <input_frequency_range+0xb4>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR |= (1U<<2);
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <input_frequency_range+0xb4>)
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <input_frequency_range+0xb4>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
	default:
		RCC->PLLCFGR &= ~(1U<<2);
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <input_frequency_range+0xb4>)
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <input_frequency_range+0xb4>)
 8000bf8:	f023 0304 	bic.w	r3, r3, #4
 8000bfc:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <input_frequency_range+0xb4>)
 8000c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <input_frequency_range+0xb4>)
 8000c04:	f023 0308 	bic.w	r3, r3, #8
 8000c08:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <PLL1VCOSEL>:
 * These bits must be written before enabling the PLL1.
 * 0: Wide VCO range: 192 to 836 MHz (default after reset)
 * 1: Medium VCO range: 150 to 420 MHz
 */
void PLL1VCOSEL(bool wideOrMedium)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	if(wideOrMedium)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <PLL1VCOSEL+0x1e>
	{
		RCC->PLLCFGR |= (1U<<1);
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <PLL1VCOSEL+0x38>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <PLL1VCOSEL+0x38>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	62d3      	str	r3, [r2, #44]	; 0x2c
	}else
	{
		RCC->PLLCFGR &= ~(1U<<1);
	}
}
 8000c38:	e005      	b.n	8000c46 <PLL1VCOSEL+0x2a>
		RCC->PLLCFGR &= ~(1U<<1);
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <PLL1VCOSEL+0x38>)
 8000c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <PLL1VCOSEL+0x38>)
 8000c40:	f023 0302 	bic.w	r3, r3, #2
 8000c44:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	58024400 	.word	0x58024400

08000c58 <enable_PLL1_OutputDividers>:
void enable_PLL1_OutputDividers(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<16) ;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c66:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<17) ;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<18) ;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <enable_PLL1_OutputDividers+0x34>)
 8000c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	58024400 	.word	0x58024400

08000c90 <enable_PLL1_FractionalDivider>:
void enable_PLL1_FractionalDivider(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<0) ;
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <enable_PLL1_FractionalDivider+0x1c>)
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <enable_PLL1_FractionalDivider+0x1c>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	58024400 	.word	0x58024400

08000cb0 <StartPLL1>:
void StartPLL1(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	RCC->CR |= (1U<<24); //Start PLL1
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <StartPLL1+0x2c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <StartPLL1+0x2c>)
 8000cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cbe:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR &(1U<<25))); //Wait until ON
 8000cc0:	bf00      	nop
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <StartPLL1+0x2c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0f9      	beq.n	8000cc2 <StartPLL1+0x12>
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <D1CFGR_D1CPRE>:
 * 6: sys_ck divided by 128
 * 7: sys_ck divided by 256
 * 8: sys_ck divided by 512
 */
void D1CFGR_D1CPRE(short D1CPRE)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	switch(D1CPRE)
 8000cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cee:	2b08      	cmp	r3, #8
 8000cf0:	f200 80f7 	bhi.w	8000ee2 <D1CFGR_D1CPRE+0x202>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <D1CFGR_D1CPRE+0x1c>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d21 	.word	0x08000d21
 8000d00:	08000d53 	.word	0x08000d53
 8000d04:	08000d85 	.word	0x08000d85
 8000d08:	08000db7 	.word	0x08000db7
 8000d0c:	08000de9 	.word	0x08000de9
 8000d10:	08000e1b 	.word	0x08000e1b
 8000d14:	08000e4d 	.word	0x08000e4d
 8000d18:	08000e7f 	.word	0x08000e7f
 8000d1c:	08000eb1 	.word	0x08000eb1
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<8);
 8000d20:	4b7f      	ldr	r3, [pc, #508]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a7e      	ldr	r2, [pc, #504]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000d2c:	4b7c      	ldr	r3, [pc, #496]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a7b      	ldr	r2, [pc, #492]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d36:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000d38:	4b79      	ldr	r3, [pc, #484]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a78      	ldr	r2, [pc, #480]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d42:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 8000d44:	4b76      	ldr	r3, [pc, #472]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a75      	ldr	r2, [pc, #468]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d4e:	6193      	str	r3, [r2, #24]
		break;
 8000d50:	e0e0      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<8);
 8000d52:	4b73      	ldr	r3, [pc, #460]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a72      	ldr	r2, [pc, #456]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d5c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000d5e:	4b70      	ldr	r3, [pc, #448]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a6f      	ldr	r2, [pc, #444]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d68:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000d6a:	4b6d      	ldr	r3, [pc, #436]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a6c      	ldr	r2, [pc, #432]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d74:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000d76:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a69      	ldr	r2, [pc, #420]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d80:	6193      	str	r3, [r2, #24]
	    break;
 8000d82:	e0c7      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<8);
 8000d84:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a65      	ldr	r2, [pc, #404]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000d90:	4b63      	ldr	r3, [pc, #396]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a62      	ldr	r2, [pc, #392]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d9a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000da6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000da8:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a5c      	ldr	r2, [pc, #368]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db2:	6193      	str	r3, [r2, #24]
	    break;
 8000db4:	e0ae      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<8);
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a59      	ldr	r2, [pc, #356]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000dc2:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a56      	ldr	r2, [pc, #344]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dcc:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000dce:	4b54      	ldr	r3, [pc, #336]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a53      	ldr	r2, [pc, #332]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dd8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000dda:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a50      	ldr	r2, [pc, #320]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de4:	6193      	str	r3, [r2, #24]
	    break;
 8000de6:	e095      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<8);
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000df4:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a49      	ldr	r2, [pc, #292]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e0a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000e0c:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e16:	6193      	str	r3, [r2, #24]
		break;
 8000e18:	e07c      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<8);
 8000e1a:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a40      	ldr	r2, [pc, #256]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e24:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a3d      	ldr	r2, [pc, #244]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e30:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a37      	ldr	r2, [pc, #220]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e48:	6193      	str	r3, [r2, #24]
		break;
 8000e4a:	e063      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<8);
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e62:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000e64:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7a:	6193      	str	r3, [r2, #24]
		break;
 8000e7c:	e04a      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<8);
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e88:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a24      	ldr	r2, [pc, #144]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e94:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ea8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eac:	6193      	str	r3, [r2, #24]
		break;
 8000eae:	e031      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<8);
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000eda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ede:	6193      	str	r3, [r2, #24]
		break;
 8000ee0:	e018      	b.n	8000f14 <D1CFGR_D1CPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<8);
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eec:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ef8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f04:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <D1CFGR_D1CPRE+0x240>)
 8000f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f10:	6193      	str	r3, [r2, #24]
		break;
 8000f12:	bf00      	nop
	}
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	58024400 	.word	0x58024400

08000f24 <D1CFGR_HPRE>:
 * Note: The clocks are divided by the new prescaler factor from1 to 16 periods of the slowest APB
 * clock among rcc_pclk[4:1] after HPRE update.
 * Note: Note also that rcc_hclk3 = rcc_aclk.
 */
void D1CFGR_HPRE(short HPRE)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
	switch(HPRE)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	f200 80f7 	bhi.w	8001126 <D1CFGR_HPRE+0x202>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <D1CFGR_HPRE+0x1c>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08000f65 	.word	0x08000f65
 8000f44:	08000f97 	.word	0x08000f97
 8000f48:	08000fc9 	.word	0x08000fc9
 8000f4c:	08000ffb 	.word	0x08000ffb
 8000f50:	0800102d 	.word	0x0800102d
 8000f54:	0800105f 	.word	0x0800105f
 8000f58:	08001091 	.word	0x08001091
 8000f5c:	080010c3 	.word	0x080010c3
 8000f60:	080010f5 	.word	0x080010f5
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<0);
 8000f64:	4b7f      	ldr	r3, [pc, #508]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a7e      	ldr	r2, [pc, #504]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f6a:	f023 0301 	bic.w	r3, r3, #1
 8000f6e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000f70:	4b7c      	ldr	r3, [pc, #496]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a7b      	ldr	r2, [pc, #492]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000f7c:	4b79      	ldr	r3, [pc, #484]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a78      	ldr	r2, [pc, #480]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f82:	f023 0304 	bic.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 8000f88:	4b76      	ldr	r3, [pc, #472]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a75      	ldr	r2, [pc, #468]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f8e:	f023 0308 	bic.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
		break;
 8000f94:	e0e0      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<0);
 8000f96:	4b73      	ldr	r3, [pc, #460]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a72      	ldr	r2, [pc, #456]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000f9c:	f023 0301 	bic.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000fa2:	4b70      	ldr	r3, [pc, #448]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a6f      	ldr	r2, [pc, #444]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fa8:	f023 0302 	bic.w	r3, r3, #2
 8000fac:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000fae:	4b6d      	ldr	r3, [pc, #436]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a6c      	ldr	r2, [pc, #432]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000fba:	4b6a      	ldr	r3, [pc, #424]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a69      	ldr	r2, [pc, #420]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6193      	str	r3, [r2, #24]
	    break;
 8000fc6:	e0c7      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<0);
 8000fc8:	4b66      	ldr	r3, [pc, #408]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a65      	ldr	r2, [pc, #404]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000fd4:	4b63      	ldr	r3, [pc, #396]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a62      	ldr	r2, [pc, #392]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000fe0:	4b60      	ldr	r3, [pc, #384]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a5f      	ldr	r2, [pc, #380]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fe6:	f023 0304 	bic.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000fec:	4b5d      	ldr	r3, [pc, #372]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a5c      	ldr	r2, [pc, #368]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
	    break;
 8000ff8:	e0ae      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<0);
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <D1CFGR_HPRE+0x240>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a59      	ldr	r2, [pc, #356]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <D1CFGR_HPRE+0x240>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	4a53      	ldr	r2, [pc, #332]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001018:	f023 0304 	bic.w	r3, r3, #4
 800101c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a50      	ldr	r2, [pc, #320]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6193      	str	r3, [r2, #24]
	    break;
 800102a:	e095      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<0);
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <D1CFGR_HPRE+0x240>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <D1CFGR_HPRE+0x240>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <D1CFGR_HPRE+0x240>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a46      	ldr	r2, [pc, #280]	; (8001164 <D1CFGR_HPRE+0x240>)
 800104a:	f023 0304 	bic.w	r3, r3, #4
 800104e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a43      	ldr	r2, [pc, #268]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001056:	f043 0308 	orr.w	r3, r3, #8
 800105a:	6193      	str	r3, [r2, #24]
		break;
 800105c:	e07c      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<0);
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a40      	ldr	r2, [pc, #256]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <D1CFGR_HPRE+0x240>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	4a3d      	ldr	r2, [pc, #244]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001070:	f023 0302 	bic.w	r3, r3, #2
 8001074:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8001076:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a3a      	ldr	r2, [pc, #232]	; (8001164 <D1CFGR_HPRE+0x240>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a37      	ldr	r2, [pc, #220]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6193      	str	r3, [r2, #24]
		break;
 800108e:	e063      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<0);
 8001090:	4b34      	ldr	r3, [pc, #208]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a33      	ldr	r2, [pc, #204]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <D1CFGR_HPRE+0x240>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a30      	ldr	r2, [pc, #192]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010a2:	f023 0302 	bic.w	r3, r3, #2
 80010a6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
		break;
 80010c0:	e04a      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<0);
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a24      	ldr	r2, [pc, #144]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6193      	str	r3, [r2, #24]
		break;
 80010f2:	e031      	b.n	8001158 <D1CFGR_HPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<0);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <D1CFGR_HPRE+0x240>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <D1CFGR_HPRE+0x240>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <D1CFGR_HPRE+0x240>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <D1CFGR_HPRE+0x240>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
		break;
 8001124:	e018      	b.n	8001158 <D1CFGR_HPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<0);
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <D1CFGR_HPRE+0x240>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001138:	f023 0302 	bic.w	r3, r3, #2
 800113c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <D1CFGR_HPRE+0x240>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <D1CFGR_HPRE+0x240>)
 8001150:	f023 0308 	bic.w	r3, r3, #8
 8001154:	6193      	str	r3, [r2, #24]
		break;
 8001156:	bf00      	nop
	}
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	58024400 	.word	0x58024400

08001168 <D1PPRE>:
 * 2: rcc_pclk3 = rcc_hclk3 / 4
 * 3: rcc_pclk3 = rcc_hclk3 / 8
 * 4: rcc_pclk3 = rcc_hclk3 / 16
 */
void D1PPRE(short D1PPRE)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	switch (D1PPRE)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	2b04      	cmp	r3, #4
 8001178:	d867      	bhi.n	800124a <D1PPRE+0xe2>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <D1PPRE+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001195 	.word	0x08001195
 8001184:	080011bb 	.word	0x080011bb
 8001188:	080011df 	.word	0x080011df
 800118c:	08001203 	.word	0x08001203
 8001190:	08001227 	.word	0x08001227
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<4);
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <D1PPRE+0x114>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a38      	ldr	r2, [pc, #224]	; (800127c <D1PPRE+0x114>)
 800119a:	f023 0310 	bic.w	r3, r3, #16
 800119e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <D1PPRE+0x114>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a35      	ldr	r2, [pc, #212]	; (800127c <D1PPRE+0x114>)
 80011a6:	f023 0320 	bic.w	r3, r3, #32
 80011aa:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <D1PPRE+0x114>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <D1PPRE+0x114>)
 80011b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b6:	6193      	str	r3, [r2, #24]
		break;
 80011b8:	e05a      	b.n	8001270 <D1PPRE+0x108>
	case 1 :
		RCC->D1CFGR &= ~(1U<<4);
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <D1PPRE+0x114>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <D1PPRE+0x114>)
 80011c0:	f023 0310 	bic.w	r3, r3, #16
 80011c4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <D1PPRE+0x114>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a2c      	ldr	r2, [pc, #176]	; (800127c <D1PPRE+0x114>)
 80011cc:	f023 0320 	bic.w	r3, r3, #32
 80011d0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <D1PPRE+0x114>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <D1PPRE+0x114>)
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	6193      	str	r3, [r2, #24]
	case 2 :
		RCC->D1CFGR |= (1U<<4);
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <D1PPRE+0x114>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <D1PPRE+0x114>)
 80011e4:	f043 0310 	orr.w	r3, r3, #16
 80011e8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <D1PPRE+0x114>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <D1PPRE+0x114>)
 80011f0:	f023 0320 	bic.w	r3, r3, #32
 80011f4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <D1PPRE+0x114>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a20      	ldr	r2, [pc, #128]	; (800127c <D1PPRE+0x114>)
 80011fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001200:	6193      	str	r3, [r2, #24]
	case 3 :
		RCC->D1CFGR &= ~(1U<<4);
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <D1PPRE+0x114>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <D1PPRE+0x114>)
 8001208:	f023 0310 	bic.w	r3, r3, #16
 800120c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <D1PPRE+0x114>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a1a      	ldr	r2, [pc, #104]	; (800127c <D1PPRE+0x114>)
 8001214:	f043 0320 	orr.w	r3, r3, #32
 8001218:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <D1PPRE+0x114>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <D1PPRE+0x114>)
 8001220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001224:	6193      	str	r3, [r2, #24]
	case 4 :
		RCC->D1CFGR |= (1U<<4);
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <D1PPRE+0x114>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <D1PPRE+0x114>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <D1PPRE+0x114>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <D1PPRE+0x114>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <D1PPRE+0x114>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <D1PPRE+0x114>)
 8001244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001248:	6193      	str	r3, [r2, #24]
	default:
		RCC->D1CFGR &= ~(1U<<4);
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <D1PPRE+0x114>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <D1PPRE+0x114>)
 8001250:	f023 0310 	bic.w	r3, r3, #16
 8001254:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <D1PPRE+0x114>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <D1PPRE+0x114>)
 800125c:	f023 0320 	bic.w	r3, r3, #32
 8001260:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <D1PPRE+0x114>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <D1PPRE+0x114>)
 8001268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800126c:	6193      	str	r3, [r2, #24]
		break;
 800126e:	bf00      	nop
	}
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	58024400 	.word	0x58024400

08001280 <D2PPRE1>:
 *  3: rcc_pclk1 = rcc_hclk1 / 8
 *  4: rcc_pclk1 = rcc_hclk1 / 16
 *  Bits 3:0 Reserved, must be kept at reset value.
 */
void D2PPRE1(short D2PPRE1)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
	switch (D2PPRE1)
 800128a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d867      	bhi.n	8001362 <D2PPRE1+0xe2>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <D2PPRE1+0x18>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012d3 	.word	0x080012d3
 80012a0:	080012f7 	.word	0x080012f7
 80012a4:	0800131b 	.word	0x0800131b
 80012a8:	0800133f 	.word	0x0800133f
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <D2PPRE1+0x114>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	4a38      	ldr	r2, [pc, #224]	; (8001394 <D2PPRE1+0x114>)
 80012b2:	f023 0310 	bic.w	r3, r3, #16
 80012b6:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <D2PPRE1+0x114>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	4a35      	ldr	r2, [pc, #212]	; (8001394 <D2PPRE1+0x114>)
 80012be:	f023 0320 	bic.w	r3, r3, #32
 80012c2:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <D2PPRE1+0x114>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <D2PPRE1+0x114>)
 80012ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012ce:	61d3      	str	r3, [r2, #28]
		break;
 80012d0:	e05a      	b.n	8001388 <D2PPRE1+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <D2PPRE1+0x114>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <D2PPRE1+0x114>)
 80012d8:	f023 0310 	bic.w	r3, r3, #16
 80012dc:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <D2PPRE1+0x114>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <D2PPRE1+0x114>)
 80012e4:	f023 0320 	bic.w	r3, r3, #32
 80012e8:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <D2PPRE1+0x114>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a29      	ldr	r2, [pc, #164]	; (8001394 <D2PPRE1+0x114>)
 80012f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f4:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 80012f6:	4b27      	ldr	r3, [pc, #156]	; (8001394 <D2PPRE1+0x114>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <D2PPRE1+0x114>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <D2PPRE1+0x114>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <D2PPRE1+0x114>)
 8001308:	f023 0320 	bic.w	r3, r3, #32
 800130c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <D2PPRE1+0x114>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a20      	ldr	r2, [pc, #128]	; (8001394 <D2PPRE1+0x114>)
 8001314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001318:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <D2PPRE1+0x114>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <D2PPRE1+0x114>)
 8001320:	f023 0310 	bic.w	r3, r3, #16
 8001324:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <D2PPRE1+0x114>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <D2PPRE1+0x114>)
 800132c:	f043 0320 	orr.w	r3, r3, #32
 8001330:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <D2PPRE1+0x114>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <D2PPRE1+0x114>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <D2PPRE1+0x114>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <D2PPRE1+0x114>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <D2PPRE1+0x114>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <D2PPRE1+0x114>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <D2PPRE1+0x114>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <D2PPRE1+0x114>)
 800135c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001360:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <D2PPRE1+0x114>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <D2PPRE1+0x114>)
 8001368:	f023 0310 	bic.w	r3, r3, #16
 800136c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <D2PPRE1+0x114>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <D2PPRE1+0x114>)
 8001374:	f023 0320 	bic.w	r3, r3, #32
 8001378:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <D2PPRE1+0x114>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <D2PPRE1+0x114>)
 8001380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001384:	61d3      	str	r3, [r2, #28]
		break;
 8001386:	bf00      	nop
	}
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	58024400 	.word	0x58024400

08001398 <D3PPRE>:
110: rcc_pclk4 = rcc_hclk4 / 8
111: rcc_pclk4 = rcc_hclk4 / 16
Bits 3:0 Reserved, must be kept at reset value
 */
void D3PPRE(short D3PPRE)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	switch (D3PPRE)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d867      	bhi.n	800147a <D3PPRE+0xe2>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <D3PPRE+0x18>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c5 	.word	0x080013c5
 80013b4:	080013eb 	.word	0x080013eb
 80013b8:	0800140f 	.word	0x0800140f
 80013bc:	08001433 	.word	0x08001433
 80013c0:	08001457 	.word	0x08001457
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 80013c4:	4b39      	ldr	r3, [pc, #228]	; (80014ac <D3PPRE+0x114>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	4a38      	ldr	r2, [pc, #224]	; (80014ac <D3PPRE+0x114>)
 80013ca:	f023 0310 	bic.w	r3, r3, #16
 80013ce:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <D3PPRE+0x114>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	4a35      	ldr	r2, [pc, #212]	; (80014ac <D3PPRE+0x114>)
 80013d6:	f023 0320 	bic.w	r3, r3, #32
 80013da:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <D3PPRE+0x114>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a32      	ldr	r2, [pc, #200]	; (80014ac <D3PPRE+0x114>)
 80013e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013e6:	61d3      	str	r3, [r2, #28]
		break;
 80013e8:	e05a      	b.n	80014a0 <D3PPRE+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <D3PPRE+0x114>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <D3PPRE+0x114>)
 80013f0:	f023 0310 	bic.w	r3, r3, #16
 80013f4:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <D3PPRE+0x114>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <D3PPRE+0x114>)
 80013fc:	f023 0320 	bic.w	r3, r3, #32
 8001400:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <D3PPRE+0x114>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <D3PPRE+0x114>)
 8001408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800140c:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <D3PPRE+0x114>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <D3PPRE+0x114>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <D3PPRE+0x114>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <D3PPRE+0x114>)
 8001420:	f023 0320 	bic.w	r3, r3, #32
 8001424:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <D3PPRE+0x114>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a20      	ldr	r2, [pc, #128]	; (80014ac <D3PPRE+0x114>)
 800142c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001430:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <D3PPRE+0x114>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <D3PPRE+0x114>)
 8001438:	f023 0310 	bic.w	r3, r3, #16
 800143c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <D3PPRE+0x114>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <D3PPRE+0x114>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <D3PPRE+0x114>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <D3PPRE+0x114>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <D3PPRE+0x114>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <D3PPRE+0x114>)
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <D3PPRE+0x114>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a11      	ldr	r2, [pc, #68]	; (80014ac <D3PPRE+0x114>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <D3PPRE+0x114>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <D3PPRE+0x114>)
 8001474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001478:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <D3PPRE+0x114>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <D3PPRE+0x114>)
 8001480:	f023 0310 	bic.w	r3, r3, #16
 8001484:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <D3PPRE+0x114>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <D3PPRE+0x114>)
 800148c:	f023 0320 	bic.w	r3, r3, #32
 8001490:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <D3PPRE+0x114>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <D3PPRE+0x114>)
 8001498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800149c:	61d3      	str	r3, [r2, #28]
		break;
 800149e:	bf00      	nop
	}
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58024400 	.word	0x58024400

080014b0 <SysClockConfig>:
 * 		APB2 Timer Clocks: 240MHz
 * 		APB4 Peripheral Clocks: 120MHz
 * 		APB4 Timer Clocks: 240MHz
 */
void SysClockConfig(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	RCC->CR |= HSEON; //Enable  the HSE Clock
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <SysClockConfig+0x7c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <SysClockConfig+0x7c>)
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & HSERDY)); //Wait until HSE is ready
 80014c0:	bf00      	nop
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <SysClockConfig+0x7c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f9      	beq.n	80014c2 <SysClockConfig+0x12>
	//PLLSRC Source Mux
	PLLSRC_Select(2);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff f936 	bl	8000740 <PLLSRC_Select>
	//DIVM1 PPL1
	DIVM1(DIVM1_SC);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff f97f 	bl	80007d8 <DIVM1>
	PLL1DIVR(DIVN1_SC, DIVP1_SC, DIVQ1_SC, DIVR1_SC);
 80014da:	2301      	movs	r3, #1
 80014dc:	2201      	movs	r2, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	2078      	movs	r0, #120	; 0x78
 80014e2:	f7ff fa6d 	bl	80009c0 <PLL1DIVR>
	input_frequency_range(2);
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff fb3c 	bl	8000b64 <input_frequency_range>
	PLL1VCOSEL(0);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fb95 	bl	8000c1c <PLL1VCOSEL>
	enable_PLL1_OutputDividers();
 80014f2:	f7ff fbb1 	bl	8000c58 <enable_PLL1_OutputDividers>
	enable_PLL1_FractionalDivider();
 80014f6:	f7ff fbcb 	bl	8000c90 <enable_PLL1_FractionalDivider>
	StartPLL1();
 80014fa:	f7ff fbd9 	bl	8000cb0 <StartPLL1>
	D1CFGR_HPRE(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fd10 	bl	8000f24 <D1CFGR_HPRE>
	D1CFGR_D1CPRE(0);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fbeb 	bl	8000ce0 <D1CFGR_D1CPRE>
	SystemClockStatus(3);
 800150a:	2003      	movs	r0, #3
 800150c:	f7ff f9b0 	bl	8000870 <SystemClockStatus>
	D1PPRE(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff fe29 	bl	8001168 <D1PPRE>
	D2PPRE1(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff feb2 	bl	8001280 <D2PPRE1>
	D2PPRE1(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff feaf 	bl	8001280 <D2PPRE1>
	D3PPRE(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff ff38 	bl	8001398 <D3PPRE>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400

08001530 <get_SYSCLK>:
unsigned long  get_SYSCLK()
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	unsigned long SysClock =  8000000;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <get_SYSCLK+0x2c>)
 8001538:	607b      	str	r3, [r7, #4]
	SysClock /= DIVM1_SC ;
	SysClock *= DIVN1_SC ;
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	607b      	str	r3, [r7, #4]
	SysClock /= (DIVP1_SC+1) ;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	607b      	str	r3, [r7, #4]
	return SysClock;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	007a1200 	.word	0x007a1200

08001560 <SysClockAfter_D1Prescaler>:
unsigned long SysClockAfter_D1Prescaler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
	unsigned long SysClock = get_SYSCLK();
 8001566:	f7ff ffe3 	bl	8001530 <get_SYSCLK>
 800156a:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D1CPRE_SC);
 800156c:	2301      	movs	r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
	unsigned long x = SysClock/s;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	607b      	str	r3, [r7, #4]
	SysClock =x ;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]
	return SysClock;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <get_CPU1_Systick_Clock>:
{
	unsigned long SysClock =  SysClockAfter_D1Prescaler();
	return SysClock;
}
unsigned long  get_CPU1_Systick_Clock()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SYSCLK();
 800158e:	f7ff ffcf 	bl	8001530 <get_SYSCLK>
 8001592:	6078      	str	r0, [r7, #4]
	return SysClock;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <get_SysClock_AfterHPRE_Prescaler>:
unsigned long get_SysClock_AfterHPRE_Prescaler(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
	unsigned long SysClock = SysClockAfter_D1Prescaler();
 80015a4:	f7ff ffdc 	bl	8001560 <SysClockAfter_D1Prescaler>
 80015a8:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)HPRE_SC);
 80015aa:	2302      	movs	r3, #2
 80015ac:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	607b      	str	r3, [r7, #4]
		SysClock =x ;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
	return SysClock;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <get_APB1_Preipheral_Clock>:
{
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
	return SysClock;
}
unsigned long get_APB1_Preipheral_Clock()
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 80015cc:	f7ff ffe7 	bl	800159e <get_SysClock_AfterHPRE_Prescaler>
 80015d0:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE1_SC);
 80015d2:	2302      	movs	r3, #2
 80015d4:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <get_APB2_Preipheral_Clock>:
			SysClock =x ;
	SysClock *= 2;
	return SysClock;
}
unsigned long get_APB2_Preipheral_Clock()
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 80015f4:	f7ff ffd3 	bl	800159e <get_SysClock_AfterHPRE_Prescaler>
 80015f8:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE2_SC);
 80015fa:	2302      	movs	r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <enablePORT>:
#define GPIOJEN (1U<<9)
#define GPIOKEN (1U<<10)


void enablePORT(GPIO_TypeDef* Port)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if (Port==GPIOA) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a75      	ldr	r2, [pc, #468]	; (80017f8 <enablePORT+0x1e0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d110      	bne.n	800164a <enablePORT+0x32>
		RCC->AHB4ENR |= GPIOAEN;
 8001628:	4b74      	ldr	r3, [pc, #464]	; (80017fc <enablePORT+0x1e4>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a73      	ldr	r2, [pc, #460]	; (80017fc <enablePORT+0x1e4>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		//Making sure bit is changed
		while(!(RCC->AHB4ENR & GPIOAEN));
 8001638:	bf00      	nop
 800163a:	4b70      	ldr	r3, [pc, #448]	; (80017fc <enablePORT+0x1e4>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f8      	beq.n	800163a <enablePORT+0x22>
		while(!(RCC->AHB4ENR & GPIOKEN));

	}else
	{
	}
}
 8001648:	e0d0      	b.n	80017ec <enablePORT+0x1d4>
	} else if(Port==GPIOB) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <enablePORT+0x1e8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d110      	bne.n	8001674 <enablePORT+0x5c>
		RCC->AHB4ENR |= GPIOBEN;
 8001652:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <enablePORT+0x1e4>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	4a68      	ldr	r2, [pc, #416]	; (80017fc <enablePORT+0x1e4>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOBEN));
 8001662:	bf00      	nop
 8001664:	4b65      	ldr	r3, [pc, #404]	; (80017fc <enablePORT+0x1e4>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f8      	beq.n	8001664 <enablePORT+0x4c>
}
 8001672:	e0bb      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOC) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a63      	ldr	r2, [pc, #396]	; (8001804 <enablePORT+0x1ec>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d110      	bne.n	800169e <enablePORT+0x86>
		RCC->AHB4ENR |= GPIOCEN;
 800167c:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <enablePORT+0x1e4>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001682:	4a5e      	ldr	r2, [pc, #376]	; (80017fc <enablePORT+0x1e4>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOCEN));
 800168c:	bf00      	nop
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <enablePORT+0x1e4>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f8      	beq.n	800168e <enablePORT+0x76>
}
 800169c:	e0a6      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOD) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a59      	ldr	r2, [pc, #356]	; (8001808 <enablePORT+0x1f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d110      	bne.n	80016c8 <enablePORT+0xb0>
		RCC->AHB4ENR |= GPIODEN;
 80016a6:	4b55      	ldr	r3, [pc, #340]	; (80017fc <enablePORT+0x1e4>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4a53      	ldr	r2, [pc, #332]	; (80017fc <enablePORT+0x1e4>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIODEN));
 80016b6:	bf00      	nop
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <enablePORT+0x1e4>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f8      	beq.n	80016b8 <enablePORT+0xa0>
}
 80016c6:	e091      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOE) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a50      	ldr	r2, [pc, #320]	; (800180c <enablePORT+0x1f4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d110      	bne.n	80016f2 <enablePORT+0xda>
		RCC->AHB4ENR |= GPIOEEN;
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <enablePORT+0x1e4>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d6:	4a49      	ldr	r2, [pc, #292]	; (80017fc <enablePORT+0x1e4>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOEEN));
 80016e0:	bf00      	nop
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <enablePORT+0x1e4>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f8      	beq.n	80016e2 <enablePORT+0xca>
}
 80016f0:	e07c      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOF) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	; (8001810 <enablePORT+0x1f8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d110      	bne.n	800171c <enablePORT+0x104>
		RCC->AHB4ENR |= GPIOFEN;
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <enablePORT+0x1e4>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <enablePORT+0x1e4>)
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOFEN));
 800170a:	bf00      	nop
 800170c:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <enablePORT+0x1e4>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f8      	beq.n	800170c <enablePORT+0xf4>
}
 800171a:	e067      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOG) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3d      	ldr	r2, [pc, #244]	; (8001814 <enablePORT+0x1fc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d110      	bne.n	8001746 <enablePORT+0x12e>
		RCC->AHB4ENR |= GPIOGEN;
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <enablePORT+0x1e4>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <enablePORT+0x1e4>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOGEN));
 8001734:	bf00      	nop
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <enablePORT+0x1e4>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f8      	beq.n	8001736 <enablePORT+0x11e>
}
 8001744:	e052      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOH) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a33      	ldr	r2, [pc, #204]	; (8001818 <enablePORT+0x200>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d110      	bne.n	8001770 <enablePORT+0x158>
		RCC->AHB4ENR |= GPIOHEN;
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <enablePORT+0x1e4>)
 8001750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <enablePORT+0x1e4>)
 8001756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOHEN));
 800175e:	bf00      	nop
 8001760:	4b26      	ldr	r3, [pc, #152]	; (80017fc <enablePORT+0x1e4>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f8      	beq.n	8001760 <enablePORT+0x148>
}
 800176e:	e03d      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOI) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a2a      	ldr	r2, [pc, #168]	; (800181c <enablePORT+0x204>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d110      	bne.n	800179a <enablePORT+0x182>
		RCC->AHB4ENR |= GPIOIEN;
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <enablePORT+0x1e4>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800177e:	4a1f      	ldr	r2, [pc, #124]	; (80017fc <enablePORT+0x1e4>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOIEN));
 8001788:	bf00      	nop
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <enablePORT+0x1e4>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f8      	beq.n	800178a <enablePORT+0x172>
}
 8001798:	e028      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOJ) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <enablePORT+0x208>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d110      	bne.n	80017c4 <enablePORT+0x1ac>
		RCC->AHB4ENR |= GPIOJEN;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <enablePORT+0x1e4>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <enablePORT+0x1e4>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOJEN));
 80017b2:	bf00      	nop
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <enablePORT+0x1e4>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f8      	beq.n	80017b4 <enablePORT+0x19c>
}
 80017c2:	e013      	b.n	80017ec <enablePORT+0x1d4>
	}else if(Port==GPIOK) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <enablePORT+0x20c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d10f      	bne.n	80017ec <enablePORT+0x1d4>
		RCC->AHB4ENR |= GPIOKEN;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <enablePORT+0x1e4>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <enablePORT+0x1e4>)
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOKEN));
 80017dc:	bf00      	nop
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <enablePORT+0x1e4>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f8      	beq.n	80017de <enablePORT+0x1c6>
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	58020000 	.word	0x58020000
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020400 	.word	0x58020400
 8001804:	58020800 	.word	0x58020800
 8001808:	58020c00 	.word	0x58020c00
 800180c:	58021000 	.word	0x58021000
 8001810:	58021400 	.word	0x58021400
 8001814:	58021800 	.word	0x58021800
 8001818:	58021c00 	.word	0x58021c00
 800181c:	58022000 	.word	0x58022000
 8001820:	58022400 	.word	0x58022400
 8001824:	58022800 	.word	0x58022800

08001828 <Set_GPIO_MODER>:
 * 2: Alternate function mode
 * 3: Analog mode (reset state)
 * Note : If type argument is entered wrong pin configuration is becomes Input mode
 * */
void Set_GPIO_MODER(GPIO_TypeDef* Port,short Pin,short type)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	803b      	strh	r3, [r7, #0]
	bool bit_0, bit_1 ;
	switch(type)
 8001838:	f9b7 3000 	ldrsh.w	r3, [r7]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d81f      	bhi.n	8001880 <Set_GPIO_MODER+0x58>
 8001840:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <Set_GPIO_MODER+0x20>)
 8001842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001846:	bf00      	nop
 8001848:	08001859 	.word	0x08001859
 800184c:	08001863 	.word	0x08001863
 8001850:	0800186d 	.word	0x0800186d
 8001854:	08001877 	.word	0x08001877
	{
	case 0 :
		bit_0 = false ;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800185c:	2300      	movs	r3, #0
 800185e:	73bb      	strb	r3, [r7, #14]
		break ;
 8001860:	e012      	b.n	8001888 <Set_GPIO_MODER+0x60>
	case 1 :
		bit_0 =  true ;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001866:	2300      	movs	r3, #0
 8001868:	73bb      	strb	r3, [r7, #14]
		break;
 800186a:	e00d      	b.n	8001888 <Set_GPIO_MODER+0x60>
	case 2 :
		bit_0 = false ;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001870:	2301      	movs	r3, #1
 8001872:	73bb      	strb	r3, [r7, #14]
		break;
 8001874:	e008      	b.n	8001888 <Set_GPIO_MODER+0x60>
	case 3 :
		bit_0 = true ;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 800187a:	2301      	movs	r3, #1
 800187c:	73bb      	strb	r3, [r7, #14]
		break;
 800187e:	e003      	b.n	8001888 <Set_GPIO_MODER+0x60>
	default:
		bit_0 = false;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
		bit_1 = false;
 8001884:	2300      	movs	r3, #0
 8001886:	73bb      	strb	r3, [r7, #14]
	}
	if(bit_0)
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <Set_GPIO_MODER+0x7e>
	{
		Port->MODER |= (1U<<(Pin*2));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e00b      	b.n	80018be <Set_GPIO_MODER+0x96>
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
	}
	if(bit_1)
 80018be:	7bbb      	ldrb	r3, [r7, #14]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00c      	beq.n	80018de <Set_GPIO_MODER+0xb6>
	{
		Port->MODER |= (1U<<((Pin*2)+1));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	3301      	adds	r3, #1
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)+1));
	}
}
 80018dc:	e00c      	b.n	80018f8 <Set_GPIO_MODER+0xd0>
		Port->MODER &= ~(1U<<((Pin*2)+1));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	3301      	adds	r3, #1
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <Set_GPIO_AFR>:
 *14: AF14
 *15: AF15
 * Note if Afx entered bigger than 15 AFx becomes AF0
 */
void Set_GPIO_AFR(GPIO_TypeDef* Port,short pin,short AFx)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	803b      	strh	r3, [r7, #0]
	bool bit_0,bit_1,bit_2,bit_3;
	switch(AFx)
 8001914:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	f200 80b3 	bhi.w	8001a84 <Set_GPIO_AFR+0x180>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <Set_GPIO_AFR+0x20>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001965 	.word	0x08001965
 8001928:	08001977 	.word	0x08001977
 800192c:	08001989 	.word	0x08001989
 8001930:	0800199b 	.word	0x0800199b
 8001934:	080019ad 	.word	0x080019ad
 8001938:	080019bf 	.word	0x080019bf
 800193c:	080019d1 	.word	0x080019d1
 8001940:	080019e3 	.word	0x080019e3
 8001944:	080019f5 	.word	0x080019f5
 8001948:	08001a07 	.word	0x08001a07
 800194c:	08001a19 	.word	0x08001a19
 8001950:	08001a2b 	.word	0x08001a2b
 8001954:	08001a3d 	.word	0x08001a3d
 8001958:	08001a4f 	.word	0x08001a4f
 800195c:	08001a61 	.word	0x08001a61
 8001960:	08001a73 	.word	0x08001a73
	{
	case 0:
		bit_0 = false ;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001968:	2300      	movs	r3, #0
 800196a:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 800196c:	2300      	movs	r3, #0
 800196e:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001970:	2300      	movs	r3, #0
 8001972:	733b      	strb	r3, [r7, #12]
		break;
 8001974:	e08f      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 1:
		bit_0 = true  ;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800197a:	2300      	movs	r3, #0
 800197c:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 800197e:	2300      	movs	r3, #0
 8001980:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001982:	2300      	movs	r3, #0
 8001984:	733b      	strb	r3, [r7, #12]
		break;
 8001986:	e086      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 2:
		bit_0 = false ;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 800198c:	2301      	movs	r3, #1
 800198e:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001990:	2300      	movs	r3, #0
 8001992:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001994:	2300      	movs	r3, #0
 8001996:	733b      	strb	r3, [r7, #12]
		break;
 8001998:	e07d      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 3:
		bit_0 = true  ;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 800199e:	2301      	movs	r3, #1
 80019a0:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 80019a2:	2300      	movs	r3, #0
 80019a4:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80019a6:	2300      	movs	r3, #0
 80019a8:	733b      	strb	r3, [r7, #12]
		break;
 80019aa:	e074      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 4:
		bit_0 = false ;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80019b4:	2301      	movs	r3, #1
 80019b6:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80019b8:	2300      	movs	r3, #0
 80019ba:	733b      	strb	r3, [r7, #12]
		break;
 80019bc:	e06b      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 5:
		bit_0 = true  ;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80019c6:	2301      	movs	r3, #1
 80019c8:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80019ca:	2300      	movs	r3, #0
 80019cc:	733b      	strb	r3, [r7, #12]
		break;
 80019ce:	e062      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 6:
		bit_0 = false  ;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80019d8:	2301      	movs	r3, #1
 80019da:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80019dc:	2300      	movs	r3, #0
 80019de:	733b      	strb	r3, [r7, #12]
		break;
 80019e0:	e059      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 7:
		bit_0 = true  ;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80019ea:	2301      	movs	r3, #1
 80019ec:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80019ee:	2300      	movs	r3, #0
 80019f0:	733b      	strb	r3, [r7, #12]
		break;
 80019f2:	e050      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 8:
		bit_0 = false  ;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 80019fc:	2300      	movs	r3, #0
 80019fe:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a00:	2301      	movs	r3, #1
 8001a02:	733b      	strb	r3, [r7, #12]
		break;
 8001a04:	e047      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 9:
		bit_0 = true  ;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a12:	2301      	movs	r3, #1
 8001a14:	733b      	strb	r3, [r7, #12]
		break;
 8001a16:	e03e      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 10:
		bit_0 = false  ;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001a20:	2300      	movs	r3, #0
 8001a22:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 8001a24:	2301      	movs	r3, #1
 8001a26:	733b      	strb	r3, [r7, #12]
		break;
 8001a28:	e035      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 11:
		bit_0 = true  ;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001a32:	2300      	movs	r3, #0
 8001a34:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 8001a36:	2301      	movs	r3, #1
 8001a38:	733b      	strb	r3, [r7, #12]
		break;
 8001a3a:	e02c      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 12:
		bit_0 = false  ;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001a44:	2301      	movs	r3, #1
 8001a46:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	733b      	strb	r3, [r7, #12]
		break;
 8001a4c:	e023      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 13:
		bit_0 = true  ;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001a56:	2301      	movs	r3, #1
 8001a58:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	733b      	strb	r3, [r7, #12]
		break;
 8001a5e:	e01a      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 14:
		bit_0 = false  ;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	733b      	strb	r3, [r7, #12]
		break;
 8001a70:	e011      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	case 15:
		bit_0 = true;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	733b      	strb	r3, [r7, #12]
		break;
 8001a82:	e008      	b.n	8001a96 <Set_GPIO_AFR+0x192>
	default:
		bit_0 = false ;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001a90:	2300      	movs	r3, #0
 8001a92:	733b      	strb	r3, [r7, #12]
		break;
 8001a94:	bf00      	nop

	}
	if(pin<8&& pin >-1)
 8001a96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	dc76      	bgt.n	8001b8c <Set_GPIO_AFR+0x288>
 8001a9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db72      	blt.n	8001b8c <Set_GPIO_AFR+0x288>
	{
		if(bit_0)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00b      	beq.n	8001ac4 <Set_GPIO_AFR+0x1c0>
		{
			Port->AFR[0] |= (1U<<((pin*4)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	621a      	str	r2, [r3, #32]
 8001ac2:	e00b      	b.n	8001adc <Set_GPIO_AFR+0x1d8>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	621a      	str	r2, [r3, #32]
		}

		if(bit_1)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00c      	beq.n	8001afc <Set_GPIO_AFR+0x1f8>
		{
			Port->AFR[0] |= (1U<<((pin*4)+1));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3301      	adds	r3, #1
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	621a      	str	r2, [r3, #32]
 8001afa:	e00c      	b.n	8001b16 <Set_GPIO_AFR+0x212>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+1));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	3301      	adds	r3, #1
 8001b08:	2101      	movs	r1, #1
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	621a      	str	r2, [r3, #32]
		}

		if(bit_2)
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <Set_GPIO_AFR+0x232>
		{
			Port->AFR[0] |= (1U<<((pin*4)+2));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	621a      	str	r2, [r3, #32]
 8001b34:	e00c      	b.n	8001b50 <Set_GPIO_AFR+0x24c>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+2));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	621a      	str	r2, [r3, #32]
		}
		if(bit_3)
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00c      	beq.n	8001b70 <Set_GPIO_AFR+0x26c>
		{
			Port->AFR[0] |= (1U<<((pin*4)+3));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	3303      	adds	r3, #3
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	621a      	str	r2, [r3, #32]
		if(bit_3)
 8001b6e:	e090      	b.n	8001c92 <Set_GPIO_AFR+0x38e>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+3));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	621a      	str	r2, [r3, #32]
		if(bit_3)
 8001b8a:	e082      	b.n	8001c92 <Set_GPIO_AFR+0x38e>
		}
	}else if(pin>7 &&pin<16)
 8001b8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b90:	2b07      	cmp	r3, #7
 8001b92:	dd7e      	ble.n	8001c92 <Set_GPIO_AFR+0x38e>
 8001b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b98:	2b0f      	cmp	r3, #15
 8001b9a:	dc7a      	bgt.n	8001c92 <Set_GPIO_AFR+0x38e>
	{
		if(bit_0)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <Set_GPIO_AFR+0x2b8>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001baa:	3b08      	subs	r3, #8
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8001bba:	e00c      	b.n	8001bd6 <Set_GPIO_AFR+0x2d2>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bc4:	3b08      	subs	r3, #8
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_1)
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <Set_GPIO_AFR+0x2f4>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+1));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001be4:	3b08      	subs	r3, #8
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3301      	adds	r3, #1
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8001bf6:	e00d      	b.n	8001c14 <Set_GPIO_AFR+0x310>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+1));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c00:	3b08      	subs	r3, #8
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	3301      	adds	r3, #1
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_2)
 8001c14:	7b7b      	ldrb	r3, [r7, #13]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <Set_GPIO_AFR+0x332>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+2));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c22:	3b08      	subs	r3, #8
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
 8001c34:	e00d      	b.n	8001c52 <Set_GPIO_AFR+0x34e>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+2));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c3e:	3b08      	subs	r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(bit_3)
 8001c52:	7b3b      	ldrb	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00d      	beq.n	8001c74 <Set_GPIO_AFR+0x370>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+3));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c60:	3b08      	subs	r3, #8
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	3303      	adds	r3, #3
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}else
	{

	}
}
 8001c72:	e00e      	b.n	8001c92 <Set_GPIO_AFR+0x38e>
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+3));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c7c:	3b08      	subs	r3, #8
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3303      	adds	r3, #3
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c90:	e7ff      	b.n	8001c92 <Set_GPIO_AFR+0x38e>
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <systickDelayMs>:
#define CTRL_CLKSRC		 (1U<<2)
#define CTRL_COUNTFLAG	 (1U<<16)
#define SYSTICK_LOAD_VAL (get_CPU1_Systick_Clock()/1000)
//#define SYSTICK_LOAD_VAL (64000000/1000)
void systickDelayMs(int delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	/*Configure systick*/
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD =SYSTICK_LOAD_VAL;
 8001ca8:	f7ff fc6e 	bl	8001588 <get_CPU1_Systick_Clock>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <systickDelayMs+0x58>)
 8001cb0:	4912      	ldr	r1, [pc, #72]	; (8001cfc <systickDelayMs+0x5c>)
 8001cb2:	fba1 1303 	umull	r1, r3, r1, r3
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	6053      	str	r3, [r2, #4]
	/*Clear systick current value register*/
	SysTick->VAL = 0 ;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <systickDelayMs+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
	/*Enable systick and select clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <systickDelayMs+0x58>)
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i<delay ; i++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e009      	b.n	8001ce0 <systickDelayMs+0x40>
	{
		//Wait until CountFlag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 );
 8001ccc:	bf00      	nop
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <systickDelayMs+0x58>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f9      	beq.n	8001cce <systickDelayMs+0x2e>
	for(int i = 0 ; i<delay ; i++)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <systickDelayMs+0x2c>
	}
	SysTick->CTRL = 0 ;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <systickDelayMs+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <Uart_init>:
 * Pin Pairs: || Tx || Rx || AFx
 * 				PE1	   PE0	 8
 * 				PJ8	   PJ9	 8
 */
void Uart_init(GPIO_TypeDef* GPIOx,USART_TypeDef *USARTx,short TxPin, short Rxpin, short Afx,unsigned long BaudRate,unsigned long size_of_buffer)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	80fb      	strh	r3, [r7, #6]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80bb      	strh	r3, [r7, #4]
	 if(!(USARTx->CR1 & ENUE))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d13d      	bne.n	8001dda <Uart_init+0x9e>
	 	{
		 	selectedUART_enable(USARTx);
 8001d5e:	68b8      	ldr	r0, [r7, #8]
 8001d60:	f000 f936 	bl	8001fd0 <selectedUART_enable>
	 		enablePORT(GPIOx);
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fc57 	bl	8001618 <enablePORT>
	 		Set_GPIO_MODER(GPIOx, TxPin, 2);//TX
 8001d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4619      	mov	r1, r3
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fd58 	bl	8001828 <Set_GPIO_MODER>
	 		Set_GPIO_MODER(GPIOx, Rxpin, 2); //RX
 8001d78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fd51 	bl	8001828 <Set_GPIO_MODER>
	 		Set_GPIO_AFR(GPIOx, TxPin, Afx);
 8001d86:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fdb7 	bl	8001904 <Set_GPIO_AFR>
	 		Set_GPIO_AFR(GPIOx, Rxpin, Afx);
 8001d96:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff fdaf 	bl	8001904 <Set_GPIO_AFR>
	 		USARTx->CR1 |= RXNEIE;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f043 0220 	orr.w	r2, r3, #32
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	601a      	str	r2, [r3, #0]
	 		USARTx->CR3 |= (1U<<12); //disable ORE error
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	609a      	str	r2, [r3, #8]
	 		set_baudRate(USARTx, BaudRate);
 8001dbe:	69f9      	ldr	r1, [r7, #28]
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f000 f973 	bl	80020ac <set_baudRate>
	 		sampling_mode_and_FIFO(USARTx,false,false);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	68b8      	ldr	r0, [r7, #8]
 8001dcc:	f000 f83c 	bl	8001e48 <sampling_mode_and_FIFO>
	 		init_Buffer(USARTx, size_of_buffer);
 8001dd0:	6a39      	ldr	r1, [r7, #32]
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f000 face 	bl	8002374 <init_Buffer>
 8001dd8:	e002      	b.n	8001de0 <Uart_init+0xa4>

	 	}else
	 	{
	 		//That UART is already defined
	 		error("UART is already defined");
 8001dda:	480c      	ldr	r0, [pc, #48]	; (8001e0c <Uart_init+0xd0>)
 8001ddc:	f000 fc32 	bl	8002644 <error>
	 	}
		USARTx->CR1 |= ENUE;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	601a      	str	r2, [r3, #0]
		USARTx->CR1 |= ENRE;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f043 0204 	orr.w	r2, r3, #4
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 |= ENTE;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f043 0208 	orr.w	r2, r3, #8
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	08003a4c 	.word	0x08003a4c

08001e10 <get_PerihCLK>:


unsigned long get_PerihCLK(USART_TypeDef *USARTx)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if(USART1==USARTx || USART6 == USARTx)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <get_PerihCLK+0x30>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <get_PerihCLK+0x18>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <get_PerihCLK+0x34>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d103      	bne.n	8001e30 <get_PerihCLK+0x20>
	{
		return APB2_CLK;
 8001e28:	f7ff fbe1 	bl	80015ee <get_APB2_Preipheral_Clock>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	e002      	b.n	8001e36 <get_PerihCLK+0x26>
	}else
	{
		return APB1_CLK;
 8001e30:	f7ff fbc9 	bl	80015c6 <get_APB1_Preipheral_Clock>
 8001e34:	4603      	mov	r3, r0
	}
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400

08001e48 <sampling_mode_and_FIFO>:


void sampling_mode_and_FIFO (USART_TypeDef *USARTx, bool isitoversamplingby16,bool isit_FIFO)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
 8001e54:	4613      	mov	r3, r2
 8001e56:	70bb      	strb	r3, [r7, #2]
	if(isit_FIFO)
 8001e58:	78bb      	ldrb	r3, [r7, #2]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <sampling_mode_and_FIFO+0x3c>
		{
			USARTx->CR1 |= (1U<<29);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	601a      	str	r2, [r3, #0]
			if(!isitoversamplingby16)
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f083 0301 	eor.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <sampling_mode_and_FIFO+0x5a>
			{
				USARTx->CR1 |= (1U<<15);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
			if(isitoversamplingby16)
			{
				USARTx->CR1 |= (1U<<15);
			}
		}
}
 8001e82:	e00e      	b.n	8001ea2 <sampling_mode_and_FIFO+0x5a>
			USARTx->CR1 &= ~(1U<<29);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	601a      	str	r2, [r3, #0]
			if(isitoversamplingby16)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <sampling_mode_and_FIFO+0x5a>
				USARTx->CR1 |= (1U<<15);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <enable_USART1>:


 void enable_USART1(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART1 ;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <enable_USART1+0x20>)
 8001eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <enable_USART1+0x20>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	58024400 	.word	0x58024400

08001ed4 <enable_USART2>:
 void enable_USART2(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART2 ;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <enable_USART2+0x20>)
 8001eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <enable_USART2+0x20>)
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	58024400 	.word	0x58024400

08001ef8 <enable_USART3>:
 void enable_USART3(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART3 ;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <enable_USART3+0x20>)
 8001efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <enable_USART3+0x20>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400

08001f1c <enable_USART4>:
 void enable_USART4(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART4 ;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <enable_USART4+0x20>)
 8001f22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <enable_USART4+0x20>)
 8001f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	58024400 	.word	0x58024400

08001f40 <enable_USART5>:
 void enable_USART5(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART5 ;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <enable_USART5+0x20>)
 8001f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <enable_USART5+0x20>)
 8001f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	58024400 	.word	0x58024400

08001f64 <enable_USART6>:
 void enable_USART6(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART6 ;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <enable_USART6+0x20>)
 8001f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <enable_USART6+0x20>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	58024400 	.word	0x58024400

08001f88 <enable_USART7>:
 void enable_USART7(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART7 ;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <enable_USART7+0x20>)
 8001f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <enable_USART7+0x20>)
 8001f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400

08001fac <enable_USART8>:
 void enable_USART8(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART8 ;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <enable_USART8+0x20>)
 8001fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <enable_USART8+0x20>)
 8001fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400

08001fd0 <selectedUART_enable>:


 void selectedUART_enable(USART_TypeDef* USART)
 {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 	if(USART==USART1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a2b      	ldr	r2, [pc, #172]	; (8002088 <selectedUART_enable+0xb8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d105      	bne.n	8001fec <selectedUART_enable+0x1c>
 	{
 		NVIC_EnableIRQ(USART1_IRQn);
 8001fe0:	2025      	movs	r0, #37	; 0x25
 8001fe2:	f7ff fe8d 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART1();
 8001fe6:	f7ff ff63 	bl	8001eb0 <enable_USART1>
 		enable_USART8();
 	}else {
 		//USART is do not exists
 		error("USART do not exists");
 	}
 }
 8001fea:	e048      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==USART2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <selectedUART_enable+0xbc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d105      	bne.n	8002000 <selectedUART_enable+0x30>
 		NVIC_EnableIRQ(USART2_IRQn);
 8001ff4:	2026      	movs	r0, #38	; 0x26
 8001ff6:	f7ff fe83 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART2();
 8001ffa:	f7ff ff6b 	bl	8001ed4 <enable_USART2>
 }
 8001ffe:	e03e      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==USART3)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <selectedUART_enable+0xc0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d105      	bne.n	8002014 <selectedUART_enable+0x44>
 		NVIC_EnableIRQ(USART3_IRQn);
 8002008:	2027      	movs	r0, #39	; 0x27
 800200a:	f7ff fe79 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART3();
 800200e:	f7ff ff73 	bl	8001ef8 <enable_USART3>
 }
 8002012:	e034      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==UART4)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <selectedUART_enable+0xc4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d105      	bne.n	8002028 <selectedUART_enable+0x58>
 		NVIC_EnableIRQ(UART5_IRQn);
 800201c:	2035      	movs	r0, #53	; 0x35
 800201e:	f7ff fe6f 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART4();
 8002022:	f7ff ff7b 	bl	8001f1c <enable_USART4>
 }
 8002026:	e02a      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==UART5)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <selectedUART_enable+0xc8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d105      	bne.n	800203c <selectedUART_enable+0x6c>
 		NVIC_EnableIRQ(UART5_IRQn);
 8002030:	2035      	movs	r0, #53	; 0x35
 8002032:	f7ff fe65 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART5();
 8002036:	f7ff ff83 	bl	8001f40 <enable_USART5>
 }
 800203a:	e020      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==USART6)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <selectedUART_enable+0xcc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d105      	bne.n	8002050 <selectedUART_enable+0x80>
 		NVIC_EnableIRQ(USART6_IRQn);
 8002044:	2047      	movs	r0, #71	; 0x47
 8002046:	f7ff fe5b 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART6();
 800204a:	f7ff ff8b 	bl	8001f64 <enable_USART6>
 }
 800204e:	e016      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==UART7)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <selectedUART_enable+0xd0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d105      	bne.n	8002064 <selectedUART_enable+0x94>
 		NVIC_EnableIRQ(UART7_IRQn);
 8002058:	2052      	movs	r0, #82	; 0x52
 800205a:	f7ff fe51 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART7();
 800205e:	f7ff ff93 	bl	8001f88 <enable_USART7>
 }
 8002062:	e00c      	b.n	800207e <selectedUART_enable+0xae>
 	}else if (USART==UART8)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <selectedUART_enable+0xd4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d105      	bne.n	8002078 <selectedUART_enable+0xa8>
 		NVIC_EnableIRQ(UART8_IRQn);
 800206c:	2053      	movs	r0, #83	; 0x53
 800206e:	f7ff fe47 	bl	8001d00 <__NVIC_EnableIRQ>
 		enable_USART8();
 8002072:	f7ff ff9b 	bl	8001fac <enable_USART8>
 }
 8002076:	e002      	b.n	800207e <selectedUART_enable+0xae>
 		error("USART do not exists");
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <selectedUART_enable+0xd8>)
 800207a:	f000 fae3 	bl	8002644 <error>
 }
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40011000 	.word	0x40011000
 800208c:	40004400 	.word	0x40004400
 8002090:	40004800 	.word	0x40004800
 8002094:	40004c00 	.word	0x40004c00
 8002098:	40005000 	.word	0x40005000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40007800 	.word	0x40007800
 80020a4:	40007c00 	.word	0x40007c00
 80020a8:	08003a64 	.word	0x08003a64

080020ac <set_baudRate>:
 void set_baudRate(USART_TypeDef* USART ,unsigned long baud_rate)
 {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	 uart_set_baudrate(USART, get_PerihCLK(USART), baud_rate);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff feaa 	bl	8001e10 <get_PerihCLK>
 80020bc:	4603      	mov	r3, r0
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f804 	bl	80020d0 <uart_set_baudrate>
 }
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <uart_set_baudrate>:
	  		return -99 ;
	  	}
 }

 static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PerihCLK,uint32_t BaudRate)
 {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
		if(((USARTx->CR1 & (1U<<15)) && !(USARTx->CR1 & (1U<<29)))||(!(USARTx->CR1 & (1U<<15)) && (USARTx->CR1 & (1U<<29))))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <uart_set_baudrate+0x24>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <uart_set_baudrate+0x3c>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10e      	bne.n	800211e <uart_set_baudrate+0x4e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <uart_set_baudrate+0x4e>
		{
			USARTx->BRR = compute_uart_bd(PerihCLK,BaudRate);
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f000 f813 	bl	800213a <compute_uart_bd>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	e009      	b.n	8002132 <uart_set_baudrate+0x62>

		}else
		{
			USARTx->BRR = (compute_uart_bd(PerihCLK,BaudRate)*2);
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f000 f80a 	bl	800213a <compute_uart_bd>
 8002126:	4603      	mov	r3, r0
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	60da      	str	r2, [r3, #12]

		}
 }
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <compute_uart_bd>:

 static uint16_t compute_uart_bd(uint32_t PerihCLK,uint32_t BaudRate)
 {
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
	 return ((PerihCLK + (BaudRate/2U))/BaudRate);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	085a      	lsrs	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	441a      	add	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	b29b      	uxth	r3, r3
 }
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <uart_send_string>:
		//Write to transmit data register
		while(!(USART->ISR & ISR_TXE));
		USART->TDR = (ch & 0xFF);
 }
 void uart_send_string(USART_TypeDef* USART, char* string, int size)
 {
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
	 for(int i= 0 ; i<size ; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e010      	b.n	8002194 <uart_send_string+0x34>
	 {
	 	while(!(USART->ISR & ISR_TXE));
 8002172:	bf00      	nop
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f9      	beq.n	8002174 <uart_send_string+0x14>
	 	USART->TDR = (string[i] & 0xFF );
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
	 for(int i= 0 ; i<size ; i++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbea      	blt.n	8002172 <uart_send_string+0x12>
	 }
 }
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <uart_get_buffer>:

 char* uart_get_buffer(USART_TypeDef* USART,unsigned long *Size)
 {
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	 char* temp = malloc(sizeof(char)*get_current_loc_Buffer(USART));
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f875 	bl	80022a4 <get_current_loc_Buffer>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fbab 	bl	8002918 <malloc>
 80021c2:	4603      	mov	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]
	 unsigned long temp_loc = get_current_loc_Buffer(USART);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f86c 	bl	80022a4 <get_current_loc_Buffer>
 80021cc:	6178      	str	r0, [r7, #20]
	 *Size = get_current_loc_Buffer(USART) ;
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f868 	bl	80022a4 <get_current_loc_Buffer>
 80021d4:	4602      	mov	r2, r0
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
	 while(get_current_loc_Buffer(USART)!=0)
 80021da:	e010      	b.n	80021fe <uart_get_buffer+0x54>
	 {
	 	char temp_uart_buffer_byte = uart_get_buffer_BYTE(USART);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f81b 	bl	8002218 <uart_get_buffer_BYTE>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
	 	if(temp_uart_buffer_byte!=255)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2bff      	cmp	r3, #255	; 0xff
 80021ea:	d00f      	beq.n	800220c <uart_get_buffer+0x62>
	 	{
			temp[temp_loc-1] =temp_uart_buffer_byte;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	701a      	strb	r2, [r3, #0]
			temp_loc--;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
	 while(get_current_loc_Buffer(USART)!=0)
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f850 	bl	80022a4 <get_current_loc_Buffer>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1e8      	bne.n	80021dc <uart_get_buffer+0x32>
 800220a:	e000      	b.n	800220e <uart_get_buffer+0x64>
	 	}else
	 	{
	 		break ;
 800220c:	bf00      	nop
	 	}
	 }

	 return temp ;
 800220e:	693b      	ldr	r3, [r7, #16]
 }
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <uart_get_buffer_BYTE>:

 char uart_get_buffer_BYTE(USART_TypeDef* USART)
 {
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	 unsigned long loc = get_current_loc_Buffer(USART);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f83f 	bl	80022a4 <get_current_loc_Buffer>
 8002226:	6178      	str	r0, [r7, #20]
	 if(loc !=0)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d014      	beq.n	8002258 <uart_get_buffer_BYTE+0x40>
	 {
		 uint8_t* temp =  get_Buffer(USART);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f928 	bl	8002484 <get_Buffer>
 8002234:	6138      	str	r0, [r7, #16]
		 char temp_char = temp[loc-1];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3b01      	subs	r3, #1
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	73fb      	strb	r3, [r7, #15]
		 temp[loc-1] = '\000';
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3b01      	subs	r3, #1
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
		 decrease_Buffer(USART);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f97e 	bl	8002550 <decrease_Buffer>
		 return temp_char ;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	e000      	b.n	800225a <uart_get_buffer_BYTE+0x42>
	 }else
	 {
		 return 255 ;
 8002258:	23ff      	movs	r3, #255	; 0xff
	 }
 }
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <UART1_rx_interrupt>:

 void UART1_rx_interrupt(USART_TypeDef* USART)
 {
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	 	 char key= USART->RDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	73fb      	strb	r3, [r7, #15]
	 	uint8_t *temp = UART1Buffer;
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <UART1_rx_interrupt+0x38>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60bb      	str	r3, [r7, #8]
	 	temp[current_loc_buffer_rx_UART1]=key ;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <UART1_rx_interrupt+0x3c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	4413      	add	r3, r2
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	701a      	strb	r2, [r3, #0]
	 	current_loc_buffer_rx_UART1++;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <UART1_rx_interrupt+0x3c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <UART1_rx_interrupt+0x3c>)
 800228c:	6013      	str	r3, [r2, #0]
 }
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	240000bc 	.word	0x240000bc
 80022a0:	24000084 	.word	0x24000084

080022a4 <get_current_loc_Buffer>:
 unsigned long get_current_loc_Buffer (USART_TypeDef *USARTx)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
						if(USARTx == USART1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a20      	ldr	r2, [pc, #128]	; (8002330 <get_current_loc_Buffer+0x8c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d102      	bne.n	80022ba <get_current_loc_Buffer+0x16>
						{
							return current_loc_buffer_rx_UART1  ;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <get_current_loc_Buffer+0x90>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	e035      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if (USARTx == USART2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <get_current_loc_Buffer+0x94>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d102      	bne.n	80022c8 <get_current_loc_Buffer+0x24>
						{
							return current_loc_buffer_rx_UART2 ;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <get_current_loc_Buffer+0x98>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e02e      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if (USARTx == USART3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <get_current_loc_Buffer+0x9c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d102      	bne.n	80022d6 <get_current_loc_Buffer+0x32>
						{
							return current_loc_buffer_rx_UART3 ;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <get_current_loc_Buffer+0xa0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	e027      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if (USARTx == UART4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <get_current_loc_Buffer+0xa4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d102      	bne.n	80022e4 <get_current_loc_Buffer+0x40>
						{
							return current_loc_buffer_rx_UART4;
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <get_current_loc_Buffer+0xa8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e020      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART5)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a1a      	ldr	r2, [pc, #104]	; (8002350 <get_current_loc_Buffer+0xac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d102      	bne.n	80022f2 <get_current_loc_Buffer+0x4e>
						{
							return current_loc_buffer_rx_UART5;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <get_current_loc_Buffer+0xb0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	e019      	b.n	8002326 <get_current_loc_Buffer+0x82>

						}else if(USARTx == USART6)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <get_current_loc_Buffer+0xb4>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d102      	bne.n	8002300 <get_current_loc_Buffer+0x5c>
						{
							return current_loc_buffer_rx_UART6;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <get_current_loc_Buffer+0xb8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	e012      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART7)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <get_current_loc_Buffer+0xbc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d102      	bne.n	800230e <get_current_loc_Buffer+0x6a>
						{
							return current_loc_buffer_rx_UART7 ;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <get_current_loc_Buffer+0xc0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e00b      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else if(USARTx == UART8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <get_current_loc_Buffer+0xc4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d102      	bne.n	800231c <get_current_loc_Buffer+0x78>
						{
							return current_loc_buffer_rx_UART8 ;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <get_current_loc_Buffer+0xc8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e004      	b.n	8002326 <get_current_loc_Buffer+0x82>
						}else
						{
							error("USART is not Exists Current Loc Buffer");
 800231c:	4814      	ldr	r0, [pc, #80]	; (8002370 <get_current_loc_Buffer+0xcc>)
 800231e:	f000 f991 	bl	8002644 <error>
							return -99 ;
 8002322:	f06f 0362 	mvn.w	r3, #98	; 0x62
						}
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40011000 	.word	0x40011000
 8002334:	24000084 	.word	0x24000084
 8002338:	40004400 	.word	0x40004400
 800233c:	24000088 	.word	0x24000088
 8002340:	40004800 	.word	0x40004800
 8002344:	2400008c 	.word	0x2400008c
 8002348:	40004c00 	.word	0x40004c00
 800234c:	24000090 	.word	0x24000090
 8002350:	40005000 	.word	0x40005000
 8002354:	24000094 	.word	0x24000094
 8002358:	40011400 	.word	0x40011400
 800235c:	24000098 	.word	0x24000098
 8002360:	40007800 	.word	0x40007800
 8002364:	2400009c 	.word	0x2400009c
 8002368:	40007c00 	.word	0x40007c00
 800236c:	240000a0 	.word	0x240000a0
 8002370:	08003aa0 	.word	0x08003aa0

08002374 <init_Buffer>:
void disable_UART(USART_TypeDef* USARTx)
 {
	 USARTx->CR1 &= ~ENUE;
 }
 void init_Buffer(USART_TypeDef* USARTx,unsigned long size)
 {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
	 	 	 	 	 	 	 	 if(USARTx == USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <init_Buffer+0xd0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d107      	bne.n	8002396 <init_Buffer+0x22>
		 						{
		 							 UART1Buffer = malloc(sizeof(uint8_t)*size);
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f000 fac6 	bl	8002918 <malloc>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <init_Buffer+0xd4>)
 8002392:	601a      	str	r2, [r3, #0]
		 							 UART7Buffer = malloc(sizeof(uint8_t)*size);
		 						}else if(USARTx == UART8)
		 						{
		 							 UART8Buffer = malloc(sizeof(uint8_t)*size);
		 						}
 }
 8002394:	e052      	b.n	800243c <init_Buffer+0xc8>
		 						}else if (USARTx == USART2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a2c      	ldr	r2, [pc, #176]	; (800244c <init_Buffer+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d107      	bne.n	80023ae <init_Buffer+0x3a>
		 							 UART2Buffer = malloc(sizeof(uint8_t)*size);
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f000 faba 	bl	8002918 <malloc>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <init_Buffer+0xdc>)
 80023aa:	601a      	str	r2, [r3, #0]
 }
 80023ac:	e046      	b.n	800243c <init_Buffer+0xc8>
		 						}else if (USARTx == USART3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <init_Buffer+0xe0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d107      	bne.n	80023c6 <init_Buffer+0x52>
		 							 UART3Buffer = malloc(sizeof(uint8_t)*size);
 80023b6:	6838      	ldr	r0, [r7, #0]
 80023b8:	f000 faae 	bl	8002918 <malloc>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <init_Buffer+0xe4>)
 80023c2:	601a      	str	r2, [r3, #0]
 }
 80023c4:	e03a      	b.n	800243c <init_Buffer+0xc8>
		 						}else if (USARTx == UART4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <init_Buffer+0xe8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d107      	bne.n	80023de <init_Buffer+0x6a>
		 							 UART4Buffer = malloc(sizeof(uint8_t)*size);
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	f000 faa2 	bl	8002918 <malloc>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <init_Buffer+0xec>)
 80023da:	601a      	str	r2, [r3, #0]
 }
 80023dc:	e02e      	b.n	800243c <init_Buffer+0xc8>
		 						}else if(USARTx == UART5)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <init_Buffer+0xf0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d107      	bne.n	80023f6 <init_Buffer+0x82>
		 							 UART5Buffer = malloc(sizeof(uint8_t)*size);
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f000 fa96 	bl	8002918 <malloc>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <init_Buffer+0xf4>)
 80023f2:	601a      	str	r2, [r3, #0]
 }
 80023f4:	e022      	b.n	800243c <init_Buffer+0xc8>
		 						}else if(USARTx == USART6)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1c      	ldr	r2, [pc, #112]	; (800246c <init_Buffer+0xf8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d107      	bne.n	800240e <init_Buffer+0x9a>
		 							 UART6Buffer = malloc(sizeof(uint8_t)*size);
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	f000 fa8a 	bl	8002918 <malloc>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <init_Buffer+0xfc>)
 800240a:	601a      	str	r2, [r3, #0]
 }
 800240c:	e016      	b.n	800243c <init_Buffer+0xc8>
		 						}else if(USARTx == UART7)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a18      	ldr	r2, [pc, #96]	; (8002474 <init_Buffer+0x100>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d107      	bne.n	8002426 <init_Buffer+0xb2>
		 							 UART7Buffer = malloc(sizeof(uint8_t)*size);
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f000 fa7e 	bl	8002918 <malloc>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <init_Buffer+0x104>)
 8002422:	601a      	str	r2, [r3, #0]
 }
 8002424:	e00a      	b.n	800243c <init_Buffer+0xc8>
		 						}else if(USARTx == UART8)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <init_Buffer+0x108>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d106      	bne.n	800243c <init_Buffer+0xc8>
		 							 UART8Buffer = malloc(sizeof(uint8_t)*size);
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f000 fa72 	bl	8002918 <malloc>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <init_Buffer+0x10c>)
 800243a:	601a      	str	r2, [r3, #0]
 }
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40011000 	.word	0x40011000
 8002448:	240000bc 	.word	0x240000bc
 800244c:	40004400 	.word	0x40004400
 8002450:	240000dc 	.word	0x240000dc
 8002454:	40004800 	.word	0x40004800
 8002458:	240000cc 	.word	0x240000cc
 800245c:	40004c00 	.word	0x40004c00
 8002460:	240000b0 	.word	0x240000b0
 8002464:	40005000 	.word	0x40005000
 8002468:	240000b4 	.word	0x240000b4
 800246c:	40011400 	.word	0x40011400
 8002470:	240000c0 	.word	0x240000c0
 8002474:	40007800 	.word	0x40007800
 8002478:	240000c8 	.word	0x240000c8
 800247c:	40007c00 	.word	0x40007c00
 8002480:	240000c4 	.word	0x240000c4

08002484 <get_Buffer>:

 uint8_t* get_Buffer(USART_TypeDef* USARTx)
 {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	 	 	 	 	 	 	 	 if(USARTx == USART1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <get_Buffer+0x88>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d102      	bne.n	800249a <get_Buffer+0x16>
		 						{
		 							return  UART1Buffer;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <get_Buffer+0x8c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e034      	b.n	8002504 <get_Buffer+0x80>
		 						}else if (USARTx == USART2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <get_Buffer+0x90>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d102      	bne.n	80024a8 <get_Buffer+0x24>
		 						{
		 							return UART2Buffer ;
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <get_Buffer+0x94>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	e02d      	b.n	8002504 <get_Buffer+0x80>
		 						}else if (USARTx == USART3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <get_Buffer+0x98>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d102      	bne.n	80024b6 <get_Buffer+0x32>
		 						{
		 							return UART3Buffer ;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <get_Buffer+0x9c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e026      	b.n	8002504 <get_Buffer+0x80>
		 						}else if (USARTx == UART4)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <get_Buffer+0xa0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d102      	bne.n	80024c4 <get_Buffer+0x40>
		 						{
		 							return UART4Buffer;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <get_Buffer+0xa4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e01f      	b.n	8002504 <get_Buffer+0x80>
		 						}else if(USARTx == UART5)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <get_Buffer+0xa8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <get_Buffer+0x4e>
		 						{
		 							return UART5Buffer;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <get_Buffer+0xac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e018      	b.n	8002504 <get_Buffer+0x80>

		 						}else if(USARTx == USART6)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <get_Buffer+0xb0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d102      	bne.n	80024e0 <get_Buffer+0x5c>
		 						{
		 							return UART6Buffer;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <get_Buffer+0xb4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	e011      	b.n	8002504 <get_Buffer+0x80>
		 						}else if(USARTx == UART7)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <get_Buffer+0xb8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <get_Buffer+0x6a>
		 						{
		 							return UART7Buffer ;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <get_Buffer+0xbc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	e00a      	b.n	8002504 <get_Buffer+0x80>
		 						}else if(USARTx == UART8)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <get_Buffer+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d102      	bne.n	80024fc <get_Buffer+0x78>
		 						{
		 							return UART8Buffer ;
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <get_Buffer+0xc4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	e003      	b.n	8002504 <get_Buffer+0x80>
		 						}else
		 						{
		 							error("Error in get_Buffer because of the USART");
 80024fc:	4813      	ldr	r0, [pc, #76]	; (800254c <get_Buffer+0xc8>)
 80024fe:	f000 f8a1 	bl	8002644 <error>
		 							return NULL;
 8002502:	2300      	movs	r3, #0
		 						}
 }
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40011000 	.word	0x40011000
 8002510:	240000bc 	.word	0x240000bc
 8002514:	40004400 	.word	0x40004400
 8002518:	240000dc 	.word	0x240000dc
 800251c:	40004800 	.word	0x40004800
 8002520:	240000cc 	.word	0x240000cc
 8002524:	40004c00 	.word	0x40004c00
 8002528:	240000b0 	.word	0x240000b0
 800252c:	40005000 	.word	0x40005000
 8002530:	240000b4 	.word	0x240000b4
 8002534:	40011400 	.word	0x40011400
 8002538:	240000c0 	.word	0x240000c0
 800253c:	40007800 	.word	0x40007800
 8002540:	240000c8 	.word	0x240000c8
 8002544:	40007c00 	.word	0x40007c00
 8002548:	240000c4 	.word	0x240000c4
 800254c:	08003ac8 	.word	0x08003ac8

08002550 <decrease_Buffer>:
			 						{
			 						 	 current_loc_buffer_rx_UART8++;
			 						}
 }
 void decrease_Buffer(USART_TypeDef* USARTx)
 {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	 	 	 	 	 	 	 	 	 if(USARTx == USART1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <decrease_Buffer+0xb4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d105      	bne.n	800256c <decrease_Buffer+0x1c>
			 						{
			 						 	 current_loc_buffer_rx_UART1--;
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <decrease_Buffer+0xb8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	4a28      	ldr	r2, [pc, #160]	; (8002608 <decrease_Buffer+0xb8>)
 8002568:	6013      	str	r3, [r2, #0]
			 						 	 current_loc_buffer_rx_UART7--;
			 						}else if(USARTx == UART8)
			 						{
			 						 	 current_loc_buffer_rx_UART8--;
			 						}
 }
 800256a:	e044      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if (USARTx == USART2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a27      	ldr	r2, [pc, #156]	; (800260c <decrease_Buffer+0xbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d105      	bne.n	8002580 <decrease_Buffer+0x30>
			 						 	 current_loc_buffer_rx_UART2--;
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <decrease_Buffer+0xc0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3b01      	subs	r3, #1
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <decrease_Buffer+0xc0>)
 800257c:	6013      	str	r3, [r2, #0]
 }
 800257e:	e03a      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if (USARTx == USART3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <decrease_Buffer+0xc4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d105      	bne.n	8002594 <decrease_Buffer+0x44>
			 						 	 current_loc_buffer_rx_UART3--;
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <decrease_Buffer+0xc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3b01      	subs	r3, #1
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <decrease_Buffer+0xc8>)
 8002590:	6013      	str	r3, [r2, #0]
 }
 8002592:	e030      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if (USARTx == UART4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a21      	ldr	r2, [pc, #132]	; (800261c <decrease_Buffer+0xcc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d105      	bne.n	80025a8 <decrease_Buffer+0x58>
			 						 	 current_loc_buffer_rx_UART4--;
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <decrease_Buffer+0xd0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <decrease_Buffer+0xd0>)
 80025a4:	6013      	str	r3, [r2, #0]
 }
 80025a6:	e026      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART5)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1e      	ldr	r2, [pc, #120]	; (8002624 <decrease_Buffer+0xd4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d105      	bne.n	80025bc <decrease_Buffer+0x6c>
			 						 	 current_loc_buffer_rx_UART5--;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <decrease_Buffer+0xd8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <decrease_Buffer+0xd8>)
 80025b8:	6013      	str	r3, [r2, #0]
 }
 80025ba:	e01c      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if(USARTx == USART6)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1b      	ldr	r2, [pc, #108]	; (800262c <decrease_Buffer+0xdc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d105      	bne.n	80025d0 <decrease_Buffer+0x80>
			 						 	 current_loc_buffer_rx_UART6--;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <decrease_Buffer+0xe0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <decrease_Buffer+0xe0>)
 80025cc:	6013      	str	r3, [r2, #0]
 }
 80025ce:	e012      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART7)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a18      	ldr	r2, [pc, #96]	; (8002634 <decrease_Buffer+0xe4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d105      	bne.n	80025e4 <decrease_Buffer+0x94>
			 						 	 current_loc_buffer_rx_UART7--;
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <decrease_Buffer+0xe8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	4a16      	ldr	r2, [pc, #88]	; (8002638 <decrease_Buffer+0xe8>)
 80025e0:	6013      	str	r3, [r2, #0]
 }
 80025e2:	e008      	b.n	80025f6 <decrease_Buffer+0xa6>
			 						}else if(USARTx == UART8)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <decrease_Buffer+0xec>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d104      	bne.n	80025f6 <decrease_Buffer+0xa6>
			 						 	 current_loc_buffer_rx_UART8--;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <decrease_Buffer+0xf0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	4a13      	ldr	r2, [pc, #76]	; (8002640 <decrease_Buffer+0xf0>)
 80025f4:	6013      	str	r3, [r2, #0]
 }
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40011000 	.word	0x40011000
 8002608:	24000084 	.word	0x24000084
 800260c:	40004400 	.word	0x40004400
 8002610:	24000088 	.word	0x24000088
 8002614:	40004800 	.word	0x40004800
 8002618:	2400008c 	.word	0x2400008c
 800261c:	40004c00 	.word	0x40004c00
 8002620:	24000090 	.word	0x24000090
 8002624:	40005000 	.word	0x40005000
 8002628:	24000094 	.word	0x24000094
 800262c:	40011400 	.word	0x40011400
 8002630:	24000098 	.word	0x24000098
 8002634:	40007800 	.word	0x40007800
 8002638:	2400009c 	.word	0x2400009c
 800263c:	40007c00 	.word	0x40007c00
 8002640:	240000a0 	.word	0x240000a0

08002644 <error>:


void error(char* ErrorName)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	while(1);
 800264c:	e7fe      	b.n	800264c <error+0x8>
	...

08002650 <main>:
unsigned long count;

void clear_arr(char* Buffer,int size);

int main(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af04      	add	r7, sp, #16

	SysClockConfig();
 8002656:	f7fe ff2b 	bl	80014b0 <SysClockConfig>
	enablePORT(GPIOC);
 800265a:	4817      	ldr	r0, [pc, #92]	; (80026b8 <main+0x68>)
 800265c:	f7fe ffdc 	bl	8001618 <enablePORT>
	Uart_init(GPIOB, USART1, 6, 7, 7, 9600, 1024);
 8002660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2307      	movs	r3, #7
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2307      	movs	r3, #7
 8002672:	2206      	movs	r2, #6
 8002674:	4911      	ldr	r1, [pc, #68]	; (80026bc <main+0x6c>)
 8002676:	4812      	ldr	r0, [pc, #72]	; (80026c0 <main+0x70>)
 8002678:	f7ff fb60 	bl	8001d3c <Uart_init>
	init_Bluetooh(USART1);
 800267c:	480f      	ldr	r0, [pc, #60]	; (80026bc <main+0x6c>)
 800267e:	f7fd fe97 	bl	80003b0 <init_Bluetooh>


	while(1)
	{
		if(!isConnection_established())
 8002682:	f7fd fea5 	bl	80003d0 <isConnection_established>
 8002686:	4603      	mov	r3, r0
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <main+0x48>
			{
				return -1 ;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
 8002696:	e00a      	b.n	80026ae <main+0x5e>
			}
			unsigned long baud = get_baudRate_bluetooh();
 8002698:	f7fd fef6 	bl	8000488 <get_baudRate_bluetooh>
 800269c:	6078      	str	r0, [r7, #4]
			short role = get_Role();
 800269e:	f7fd ff8b 	bl	80005b8 <get_Role>
 80026a2:	4603      	mov	r3, r0
 80026a4:	807b      	strh	r3, [r7, #2]

		systickDelayMs(10);
 80026a6:	200a      	movs	r0, #10
 80026a8:	f7ff fafa 	bl	8001ca0 <systickDelayMs>
	{
 80026ac:	e7e9      	b.n	8002682 <main+0x32>
	}
	return 0 ;
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	58020800 	.word	0x58020800
 80026bc:	40011000 	.word	0x40011000
 80026c0:	58020400 	.word	0x58020400

080026c4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	//Check if RXNE is set
	if((USART1->ISR & ISR_RXNE))
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <USART1_IRQHandler+0x1c>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <USART1_IRQHandler+0x16>
	{
		//Do Something
		UART1_rx_interrupt(USART1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <USART1_IRQHandler+0x1c>)
 80026d6:	f7ff fdc5 	bl	8002264 <UART1_rx_interrupt>
	}
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40011000 	.word	0x40011000

080026e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
	return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_kill>:

int _kill(int pid, int sig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026fe:	f000 f8e1 	bl	80028c4 <__errno>
 8002702:	4603      	mov	r3, r0
 8002704:	2216      	movs	r2, #22
 8002706:	601a      	str	r2, [r3, #0]
	return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_exit>:

void _exit (int status)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ffe7 	bl	80026f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002726:	e7fe      	b.n	8002726 <_exit+0x12>

08002728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e00a      	b.n	8002750 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800273a:	f3af 8000 	nop.w
 800273e:	4601      	mov	r1, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	b2ca      	uxtb	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf0      	blt.n	800273a <_read+0x12>
	}

return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e009      	b.n	8002788 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	60ba      	str	r2, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf1      	blt.n	8002774 <_write+0x12>
	}
	return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_close>:

int _close(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	return -1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c2:	605a      	str	r2, [r3, #4]
	return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_isatty>:

int _isatty(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	return 1;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
	return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002834:	f000 f846 	bl	80028c4 <__errno>
 8002838:	4603      	mov	r3, r0
 800283a:	220c      	movs	r2, #12
 800283c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e009      	b.n	8002858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <_sbrk+0x64>)
 8002854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	24080000 	.word	0x24080000
 8002864:	00000400 	.word	0x00000400
 8002868:	240000a4 	.word	0x240000a4
 800286c:	24000100 	.word	0x24000100

08002870 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002870:	480d      	ldr	r0, [pc, #52]	; (80028a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002872:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002874:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <LoopForever+0x6>)
  ldr r1, =_edata
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <LoopForever+0xe>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <LoopForever+0x16>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800289e:	f000 f817 	bl	80028d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028a2:	f7ff fed5 	bl	8002650 <main>

080028a6 <LoopForever>:

LoopForever:
    b LoopForever
 80028a6:	e7fe      	b.n	80028a6 <LoopForever>
  ldr   r0, =_estack
 80028a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028b0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80028b4:	08003c48 	.word	0x08003c48
  ldr r2, =_sbss
 80028b8:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80028bc:	24000100 	.word	0x24000100

080028c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC1_2_IRQHandler>
	...

080028c4 <__errno>:
 80028c4:	4b01      	ldr	r3, [pc, #4]	; (80028cc <__errno+0x8>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	24000000 	.word	0x24000000

080028d0 <__libc_init_array>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4d0d      	ldr	r5, [pc, #52]	; (8002908 <__libc_init_array+0x38>)
 80028d4:	4c0d      	ldr	r4, [pc, #52]	; (800290c <__libc_init_array+0x3c>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	2600      	movs	r6, #0
 80028dc:	42a6      	cmp	r6, r4
 80028de:	d109      	bne.n	80028f4 <__libc_init_array+0x24>
 80028e0:	4d0b      	ldr	r5, [pc, #44]	; (8002910 <__libc_init_array+0x40>)
 80028e2:	4c0c      	ldr	r4, [pc, #48]	; (8002914 <__libc_init_array+0x44>)
 80028e4:	f001 f83e 	bl	8003964 <_init>
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	2600      	movs	r6, #0
 80028ee:	42a6      	cmp	r6, r4
 80028f0:	d105      	bne.n	80028fe <__libc_init_array+0x2e>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f8:	4798      	blx	r3
 80028fa:	3601      	adds	r6, #1
 80028fc:	e7ee      	b.n	80028dc <__libc_init_array+0xc>
 80028fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002902:	4798      	blx	r3
 8002904:	3601      	adds	r6, #1
 8002906:	e7f2      	b.n	80028ee <__libc_init_array+0x1e>
 8002908:	08003c40 	.word	0x08003c40
 800290c:	08003c40 	.word	0x08003c40
 8002910:	08003c40 	.word	0x08003c40
 8002914:	08003c44 	.word	0x08003c44

08002918 <malloc>:
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <malloc+0xc>)
 800291a:	4601      	mov	r1, r0
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	f000 b85b 	b.w	80029d8 <_malloc_r>
 8002922:	bf00      	nop
 8002924:	24000000 	.word	0x24000000

08002928 <memset>:
 8002928:	4402      	add	r2, r0
 800292a:	4603      	mov	r3, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_free_r>:
 8002938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800293a:	2900      	cmp	r1, #0
 800293c:	d048      	beq.n	80029d0 <_free_r+0x98>
 800293e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002942:	9001      	str	r0, [sp, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f1a1 0404 	sub.w	r4, r1, #4
 800294a:	bfb8      	it	lt
 800294c:	18e4      	addlt	r4, r4, r3
 800294e:	f000 f939 	bl	8002bc4 <__malloc_lock>
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <_free_r+0x9c>)
 8002954:	9801      	ldr	r0, [sp, #4]
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	4615      	mov	r5, r2
 800295a:	b933      	cbnz	r3, 800296a <_free_r+0x32>
 800295c:	6063      	str	r3, [r4, #4]
 800295e:	6014      	str	r4, [r2, #0]
 8002960:	b003      	add	sp, #12
 8002962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002966:	f000 b933 	b.w	8002bd0 <__malloc_unlock>
 800296a:	42a3      	cmp	r3, r4
 800296c:	d90b      	bls.n	8002986 <_free_r+0x4e>
 800296e:	6821      	ldr	r1, [r4, #0]
 8002970:	1862      	adds	r2, r4, r1
 8002972:	4293      	cmp	r3, r2
 8002974:	bf04      	itt	eq
 8002976:	681a      	ldreq	r2, [r3, #0]
 8002978:	685b      	ldreq	r3, [r3, #4]
 800297a:	6063      	str	r3, [r4, #4]
 800297c:	bf04      	itt	eq
 800297e:	1852      	addeq	r2, r2, r1
 8002980:	6022      	streq	r2, [r4, #0]
 8002982:	602c      	str	r4, [r5, #0]
 8002984:	e7ec      	b.n	8002960 <_free_r+0x28>
 8002986:	461a      	mov	r2, r3
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	b10b      	cbz	r3, 8002990 <_free_r+0x58>
 800298c:	42a3      	cmp	r3, r4
 800298e:	d9fa      	bls.n	8002986 <_free_r+0x4e>
 8002990:	6811      	ldr	r1, [r2, #0]
 8002992:	1855      	adds	r5, r2, r1
 8002994:	42a5      	cmp	r5, r4
 8002996:	d10b      	bne.n	80029b0 <_free_r+0x78>
 8002998:	6824      	ldr	r4, [r4, #0]
 800299a:	4421      	add	r1, r4
 800299c:	1854      	adds	r4, r2, r1
 800299e:	42a3      	cmp	r3, r4
 80029a0:	6011      	str	r1, [r2, #0]
 80029a2:	d1dd      	bne.n	8002960 <_free_r+0x28>
 80029a4:	681c      	ldr	r4, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	6053      	str	r3, [r2, #4]
 80029aa:	4421      	add	r1, r4
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	e7d7      	b.n	8002960 <_free_r+0x28>
 80029b0:	d902      	bls.n	80029b8 <_free_r+0x80>
 80029b2:	230c      	movs	r3, #12
 80029b4:	6003      	str	r3, [r0, #0]
 80029b6:	e7d3      	b.n	8002960 <_free_r+0x28>
 80029b8:	6825      	ldr	r5, [r4, #0]
 80029ba:	1961      	adds	r1, r4, r5
 80029bc:	428b      	cmp	r3, r1
 80029be:	bf04      	itt	eq
 80029c0:	6819      	ldreq	r1, [r3, #0]
 80029c2:	685b      	ldreq	r3, [r3, #4]
 80029c4:	6063      	str	r3, [r4, #4]
 80029c6:	bf04      	itt	eq
 80029c8:	1949      	addeq	r1, r1, r5
 80029ca:	6021      	streq	r1, [r4, #0]
 80029cc:	6054      	str	r4, [r2, #4]
 80029ce:	e7c7      	b.n	8002960 <_free_r+0x28>
 80029d0:	b003      	add	sp, #12
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	240000a8 	.word	0x240000a8

080029d8 <_malloc_r>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	1ccd      	adds	r5, r1, #3
 80029dc:	f025 0503 	bic.w	r5, r5, #3
 80029e0:	3508      	adds	r5, #8
 80029e2:	2d0c      	cmp	r5, #12
 80029e4:	bf38      	it	cc
 80029e6:	250c      	movcc	r5, #12
 80029e8:	2d00      	cmp	r5, #0
 80029ea:	4606      	mov	r6, r0
 80029ec:	db01      	blt.n	80029f2 <_malloc_r+0x1a>
 80029ee:	42a9      	cmp	r1, r5
 80029f0:	d903      	bls.n	80029fa <_malloc_r+0x22>
 80029f2:	230c      	movs	r3, #12
 80029f4:	6033      	str	r3, [r6, #0]
 80029f6:	2000      	movs	r0, #0
 80029f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fa:	f000 f8e3 	bl	8002bc4 <__malloc_lock>
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <_malloc_r+0xac>)
 8002a00:	680a      	ldr	r2, [r1, #0]
 8002a02:	4614      	mov	r4, r2
 8002a04:	b99c      	cbnz	r4, 8002a2e <_malloc_r+0x56>
 8002a06:	4f20      	ldr	r7, [pc, #128]	; (8002a88 <_malloc_r+0xb0>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b923      	cbnz	r3, 8002a16 <_malloc_r+0x3e>
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f000 f83c 	bl	8002a8c <_sbrk_r>
 8002a14:	6038      	str	r0, [r7, #0]
 8002a16:	4629      	mov	r1, r5
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 f837 	bl	8002a8c <_sbrk_r>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	d123      	bne.n	8002a6a <_malloc_r+0x92>
 8002a22:	230c      	movs	r3, #12
 8002a24:	6033      	str	r3, [r6, #0]
 8002a26:	4630      	mov	r0, r6
 8002a28:	f000 f8d2 	bl	8002bd0 <__malloc_unlock>
 8002a2c:	e7e3      	b.n	80029f6 <_malloc_r+0x1e>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	1b5b      	subs	r3, r3, r5
 8002a32:	d417      	bmi.n	8002a64 <_malloc_r+0x8c>
 8002a34:	2b0b      	cmp	r3, #11
 8002a36:	d903      	bls.n	8002a40 <_malloc_r+0x68>
 8002a38:	6023      	str	r3, [r4, #0]
 8002a3a:	441c      	add	r4, r3
 8002a3c:	6025      	str	r5, [r4, #0]
 8002a3e:	e004      	b.n	8002a4a <_malloc_r+0x72>
 8002a40:	6863      	ldr	r3, [r4, #4]
 8002a42:	42a2      	cmp	r2, r4
 8002a44:	bf0c      	ite	eq
 8002a46:	600b      	streq	r3, [r1, #0]
 8002a48:	6053      	strne	r3, [r2, #4]
 8002a4a:	4630      	mov	r0, r6
 8002a4c:	f000 f8c0 	bl	8002bd0 <__malloc_unlock>
 8002a50:	f104 000b 	add.w	r0, r4, #11
 8002a54:	1d23      	adds	r3, r4, #4
 8002a56:	f020 0007 	bic.w	r0, r0, #7
 8002a5a:	1ac2      	subs	r2, r0, r3
 8002a5c:	d0cc      	beq.n	80029f8 <_malloc_r+0x20>
 8002a5e:	1a1b      	subs	r3, r3, r0
 8002a60:	50a3      	str	r3, [r4, r2]
 8002a62:	e7c9      	b.n	80029f8 <_malloc_r+0x20>
 8002a64:	4622      	mov	r2, r4
 8002a66:	6864      	ldr	r4, [r4, #4]
 8002a68:	e7cc      	b.n	8002a04 <_malloc_r+0x2c>
 8002a6a:	1cc4      	adds	r4, r0, #3
 8002a6c:	f024 0403 	bic.w	r4, r4, #3
 8002a70:	42a0      	cmp	r0, r4
 8002a72:	d0e3      	beq.n	8002a3c <_malloc_r+0x64>
 8002a74:	1a21      	subs	r1, r4, r0
 8002a76:	4630      	mov	r0, r6
 8002a78:	f000 f808 	bl	8002a8c <_sbrk_r>
 8002a7c:	3001      	adds	r0, #1
 8002a7e:	d1dd      	bne.n	8002a3c <_malloc_r+0x64>
 8002a80:	e7cf      	b.n	8002a22 <_malloc_r+0x4a>
 8002a82:	bf00      	nop
 8002a84:	240000a8 	.word	0x240000a8
 8002a88:	240000ac 	.word	0x240000ac

08002a8c <_sbrk_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4d06      	ldr	r5, [pc, #24]	; (8002aa8 <_sbrk_r+0x1c>)
 8002a90:	2300      	movs	r3, #0
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	f7ff feb4 	bl	8002804 <_sbrk>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk_r+0x1a>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_sbrk_r+0x1a>
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	240000f0 	.word	0x240000f0

08002aac <strtok>:
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <strtok+0x5c>)
 8002aae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ab0:	681e      	ldr	r6, [r3, #0]
 8002ab2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	b9fc      	cbnz	r4, 8002af8 <strtok+0x4c>
 8002ab8:	2050      	movs	r0, #80	; 0x50
 8002aba:	9101      	str	r1, [sp, #4]
 8002abc:	f7ff ff2c 	bl	8002918 <malloc>
 8002ac0:	9901      	ldr	r1, [sp, #4]
 8002ac2:	65b0      	str	r0, [r6, #88]	; 0x58
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	b920      	cbnz	r0, 8002ad2 <strtok+0x26>
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <strtok+0x60>)
 8002aca:	4811      	ldr	r0, [pc, #68]	; (8002b10 <strtok+0x64>)
 8002acc:	2157      	movs	r1, #87	; 0x57
 8002ace:	f000 f849 	bl	8002b64 <__assert_func>
 8002ad2:	e9c0 4400 	strd	r4, r4, [r0]
 8002ad6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002ada:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002ade:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002ae2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002ae6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002aea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002aee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002af2:	6184      	str	r4, [r0, #24]
 8002af4:	7704      	strb	r4, [r0, #28]
 8002af6:	6244      	str	r4, [r0, #36]	; 0x24
 8002af8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8002afa:	2301      	movs	r3, #1
 8002afc:	4628      	mov	r0, r5
 8002afe:	b002      	add	sp, #8
 8002b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b04:	f000 b806 	b.w	8002b14 <__strtok_r>
 8002b08:	24000000 	.word	0x24000000
 8002b0c:	08003af8 	.word	0x08003af8
 8002b10:	08003b0f 	.word	0x08003b0f

08002b14 <__strtok_r>:
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b908      	cbnz	r0, 8002b1c <__strtok_r+0x8>
 8002b18:	6810      	ldr	r0, [r2, #0]
 8002b1a:	b188      	cbz	r0, 8002b40 <__strtok_r+0x2c>
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002b24:	460f      	mov	r7, r1
 8002b26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002b2a:	b91e      	cbnz	r6, 8002b34 <__strtok_r+0x20>
 8002b2c:	b965      	cbnz	r5, 8002b48 <__strtok_r+0x34>
 8002b2e:	6015      	str	r5, [r2, #0]
 8002b30:	4628      	mov	r0, r5
 8002b32:	e005      	b.n	8002b40 <__strtok_r+0x2c>
 8002b34:	42b5      	cmp	r5, r6
 8002b36:	d1f6      	bne.n	8002b26 <__strtok_r+0x12>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <__strtok_r+0xa>
 8002b3c:	6014      	str	r4, [r2, #0]
 8002b3e:	7003      	strb	r3, [r0, #0]
 8002b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b42:	461c      	mov	r4, r3
 8002b44:	e00c      	b.n	8002b60 <__strtok_r+0x4c>
 8002b46:	b915      	cbnz	r5, 8002b4e <__strtok_r+0x3a>
 8002b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002b4c:	460e      	mov	r6, r1
 8002b4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002b52:	42ab      	cmp	r3, r5
 8002b54:	d1f7      	bne.n	8002b46 <__strtok_r+0x32>
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f3      	beq.n	8002b42 <__strtok_r+0x2e>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002b60:	6014      	str	r4, [r2, #0]
 8002b62:	e7ed      	b.n	8002b40 <__strtok_r+0x2c>

08002b64 <__assert_func>:
 8002b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b66:	4614      	mov	r4, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <__assert_func+0x2c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4605      	mov	r5, r0
 8002b70:	68d8      	ldr	r0, [r3, #12]
 8002b72:	b14c      	cbz	r4, 8002b88 <__assert_func+0x24>
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <__assert_func+0x30>)
 8002b76:	9100      	str	r1, [sp, #0]
 8002b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <__assert_func+0x34>)
 8002b7e:	462b      	mov	r3, r5
 8002b80:	f000 f80e 	bl	8002ba0 <fiprintf>
 8002b84:	f000 fbd8 	bl	8003338 <abort>
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__assert_func+0x38>)
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	e7f3      	b.n	8002b76 <__assert_func+0x12>
 8002b8e:	bf00      	nop
 8002b90:	24000000 	.word	0x24000000
 8002b94:	08003b70 	.word	0x08003b70
 8002b98:	08003b7d 	.word	0x08003b7d
 8002b9c:	08003bab 	.word	0x08003bab

08002ba0 <fiprintf>:
 8002ba0:	b40e      	push	{r1, r2, r3}
 8002ba2:	b503      	push	{r0, r1, lr}
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	ab03      	add	r3, sp, #12
 8002ba8:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <fiprintf+0x20>)
 8002baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bae:	6800      	ldr	r0, [r0, #0]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	f000 f83d 	bl	8002c30 <_vfiprintf_r>
 8002bb6:	b002      	add	sp, #8
 8002bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bbc:	b003      	add	sp, #12
 8002bbe:	4770      	bx	lr
 8002bc0:	24000000 	.word	0x24000000

08002bc4 <__malloc_lock>:
 8002bc4:	4801      	ldr	r0, [pc, #4]	; (8002bcc <__malloc_lock+0x8>)
 8002bc6:	f000 bd77 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 8002bca:	bf00      	nop
 8002bcc:	240000f8 	.word	0x240000f8

08002bd0 <__malloc_unlock>:
 8002bd0:	4801      	ldr	r0, [pc, #4]	; (8002bd8 <__malloc_unlock+0x8>)
 8002bd2:	f000 bd72 	b.w	80036ba <__retarget_lock_release_recursive>
 8002bd6:	bf00      	nop
 8002bd8:	240000f8 	.word	0x240000f8

08002bdc <__sfputc_r>:
 8002bdc:	6893      	ldr	r3, [r2, #8]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	b410      	push	{r4}
 8002be4:	6093      	str	r3, [r2, #8]
 8002be6:	da08      	bge.n	8002bfa <__sfputc_r+0x1e>
 8002be8:	6994      	ldr	r4, [r2, #24]
 8002bea:	42a3      	cmp	r3, r4
 8002bec:	db01      	blt.n	8002bf2 <__sfputc_r+0x16>
 8002bee:	290a      	cmp	r1, #10
 8002bf0:	d103      	bne.n	8002bfa <__sfputc_r+0x1e>
 8002bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bf6:	f000 badf 	b.w	80031b8 <__swbuf_r>
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	1c58      	adds	r0, r3, #1
 8002bfe:	6010      	str	r0, [r2, #0]
 8002c00:	7019      	strb	r1, [r3, #0]
 8002c02:	4608      	mov	r0, r1
 8002c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <__sfputs_r>:
 8002c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0c:	4606      	mov	r6, r0
 8002c0e:	460f      	mov	r7, r1
 8002c10:	4614      	mov	r4, r2
 8002c12:	18d5      	adds	r5, r2, r3
 8002c14:	42ac      	cmp	r4, r5
 8002c16:	d101      	bne.n	8002c1c <__sfputs_r+0x12>
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e007      	b.n	8002c2c <__sfputs_r+0x22>
 8002c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c20:	463a      	mov	r2, r7
 8002c22:	4630      	mov	r0, r6
 8002c24:	f7ff ffda 	bl	8002bdc <__sfputc_r>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d1f3      	bne.n	8002c14 <__sfputs_r+0xa>
 8002c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c30 <_vfiprintf_r>:
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	460d      	mov	r5, r1
 8002c36:	b09d      	sub	sp, #116	; 0x74
 8002c38:	4614      	mov	r4, r2
 8002c3a:	4698      	mov	r8, r3
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	b118      	cbz	r0, 8002c48 <_vfiprintf_r+0x18>
 8002c40:	6983      	ldr	r3, [r0, #24]
 8002c42:	b90b      	cbnz	r3, 8002c48 <_vfiprintf_r+0x18>
 8002c44:	f000 fc9a 	bl	800357c <__sinit>
 8002c48:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <_vfiprintf_r+0x240>)
 8002c4a:	429d      	cmp	r5, r3
 8002c4c:	d11b      	bne.n	8002c86 <_vfiprintf_r+0x56>
 8002c4e:	6875      	ldr	r5, [r6, #4]
 8002c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c52:	07d9      	lsls	r1, r3, #31
 8002c54:	d405      	bmi.n	8002c62 <_vfiprintf_r+0x32>
 8002c56:	89ab      	ldrh	r3, [r5, #12]
 8002c58:	059a      	lsls	r2, r3, #22
 8002c5a:	d402      	bmi.n	8002c62 <_vfiprintf_r+0x32>
 8002c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c5e:	f000 fd2b 	bl	80036b8 <__retarget_lock_acquire_recursive>
 8002c62:	89ab      	ldrh	r3, [r5, #12]
 8002c64:	071b      	lsls	r3, r3, #28
 8002c66:	d501      	bpl.n	8002c6c <_vfiprintf_r+0x3c>
 8002c68:	692b      	ldr	r3, [r5, #16]
 8002c6a:	b9eb      	cbnz	r3, 8002ca8 <_vfiprintf_r+0x78>
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f000 faf4 	bl	800325c <__swsetup_r>
 8002c74:	b1c0      	cbz	r0, 8002ca8 <_vfiprintf_r+0x78>
 8002c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c78:	07dc      	lsls	r4, r3, #31
 8002c7a:	d50e      	bpl.n	8002c9a <_vfiprintf_r+0x6a>
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	b01d      	add	sp, #116	; 0x74
 8002c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c86:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <_vfiprintf_r+0x244>)
 8002c88:	429d      	cmp	r5, r3
 8002c8a:	d101      	bne.n	8002c90 <_vfiprintf_r+0x60>
 8002c8c:	68b5      	ldr	r5, [r6, #8]
 8002c8e:	e7df      	b.n	8002c50 <_vfiprintf_r+0x20>
 8002c90:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <_vfiprintf_r+0x248>)
 8002c92:	429d      	cmp	r5, r3
 8002c94:	bf08      	it	eq
 8002c96:	68f5      	ldreq	r5, [r6, #12]
 8002c98:	e7da      	b.n	8002c50 <_vfiprintf_r+0x20>
 8002c9a:	89ab      	ldrh	r3, [r5, #12]
 8002c9c:	0598      	lsls	r0, r3, #22
 8002c9e:	d4ed      	bmi.n	8002c7c <_vfiprintf_r+0x4c>
 8002ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ca2:	f000 fd0a 	bl	80036ba <__retarget_lock_release_recursive>
 8002ca6:	e7e9      	b.n	8002c7c <_vfiprintf_r+0x4c>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9309      	str	r3, [sp, #36]	; 0x24
 8002cac:	2320      	movs	r3, #32
 8002cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cb6:	2330      	movs	r3, #48	; 0x30
 8002cb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002e7c <_vfiprintf_r+0x24c>
 8002cbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cc0:	f04f 0901 	mov.w	r9, #1
 8002cc4:	4623      	mov	r3, r4
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ccc:	b10a      	cbz	r2, 8002cd2 <_vfiprintf_r+0xa2>
 8002cce:	2a25      	cmp	r2, #37	; 0x25
 8002cd0:	d1f9      	bne.n	8002cc6 <_vfiprintf_r+0x96>
 8002cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8002cd6:	d00b      	beq.n	8002cf0 <_vfiprintf_r+0xc0>
 8002cd8:	465b      	mov	r3, fp
 8002cda:	4622      	mov	r2, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7ff ff93 	bl	8002c0a <__sfputs_r>
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	f000 80aa 	beq.w	8002e3e <_vfiprintf_r+0x20e>
 8002cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cec:	445a      	add	r2, fp
 8002cee:	9209      	str	r2, [sp, #36]	; 0x24
 8002cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a2 	beq.w	8002e3e <_vfiprintf_r+0x20e>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d04:	f10a 0a01 	add.w	sl, sl, #1
 8002d08:	9304      	str	r3, [sp, #16]
 8002d0a:	9307      	str	r3, [sp, #28]
 8002d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d10:	931a      	str	r3, [sp, #104]	; 0x68
 8002d12:	4654      	mov	r4, sl
 8002d14:	2205      	movs	r2, #5
 8002d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d1a:	4858      	ldr	r0, [pc, #352]	; (8002e7c <_vfiprintf_r+0x24c>)
 8002d1c:	f7fd faf8 	bl	8000310 <memchr>
 8002d20:	9a04      	ldr	r2, [sp, #16]
 8002d22:	b9d8      	cbnz	r0, 8002d5c <_vfiprintf_r+0x12c>
 8002d24:	06d1      	lsls	r1, r2, #27
 8002d26:	bf44      	itt	mi
 8002d28:	2320      	movmi	r3, #32
 8002d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d2e:	0713      	lsls	r3, r2, #28
 8002d30:	bf44      	itt	mi
 8002d32:	232b      	movmi	r3, #43	; 0x2b
 8002d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d38:	f89a 3000 	ldrb.w	r3, [sl]
 8002d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3e:	d015      	beq.n	8002d6c <_vfiprintf_r+0x13c>
 8002d40:	9a07      	ldr	r2, [sp, #28]
 8002d42:	4654      	mov	r4, sl
 8002d44:	2000      	movs	r0, #0
 8002d46:	f04f 0c0a 	mov.w	ip, #10
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d50:	3b30      	subs	r3, #48	; 0x30
 8002d52:	2b09      	cmp	r3, #9
 8002d54:	d94e      	bls.n	8002df4 <_vfiprintf_r+0x1c4>
 8002d56:	b1b0      	cbz	r0, 8002d86 <_vfiprintf_r+0x156>
 8002d58:	9207      	str	r2, [sp, #28]
 8002d5a:	e014      	b.n	8002d86 <_vfiprintf_r+0x156>
 8002d5c:	eba0 0308 	sub.w	r3, r0, r8
 8002d60:	fa09 f303 	lsl.w	r3, r9, r3
 8002d64:	4313      	orrs	r3, r2
 8002d66:	9304      	str	r3, [sp, #16]
 8002d68:	46a2      	mov	sl, r4
 8002d6a:	e7d2      	b.n	8002d12 <_vfiprintf_r+0xe2>
 8002d6c:	9b03      	ldr	r3, [sp, #12]
 8002d6e:	1d19      	adds	r1, r3, #4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	9103      	str	r1, [sp, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bfbb      	ittet	lt
 8002d78:	425b      	neglt	r3, r3
 8002d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d7e:	9307      	strge	r3, [sp, #28]
 8002d80:	9307      	strlt	r3, [sp, #28]
 8002d82:	bfb8      	it	lt
 8002d84:	9204      	strlt	r2, [sp, #16]
 8002d86:	7823      	ldrb	r3, [r4, #0]
 8002d88:	2b2e      	cmp	r3, #46	; 0x2e
 8002d8a:	d10c      	bne.n	8002da6 <_vfiprintf_r+0x176>
 8002d8c:	7863      	ldrb	r3, [r4, #1]
 8002d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d90:	d135      	bne.n	8002dfe <_vfiprintf_r+0x1ce>
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	9203      	str	r2, [sp, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bfb8      	it	lt
 8002d9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002da2:	3402      	adds	r4, #2
 8002da4:	9305      	str	r3, [sp, #20]
 8002da6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e8c <_vfiprintf_r+0x25c>
 8002daa:	7821      	ldrb	r1, [r4, #0]
 8002dac:	2203      	movs	r2, #3
 8002dae:	4650      	mov	r0, sl
 8002db0:	f7fd faae 	bl	8000310 <memchr>
 8002db4:	b140      	cbz	r0, 8002dc8 <_vfiprintf_r+0x198>
 8002db6:	2340      	movs	r3, #64	; 0x40
 8002db8:	eba0 000a 	sub.w	r0, r0, sl
 8002dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8002dc0:	9b04      	ldr	r3, [sp, #16]
 8002dc2:	4303      	orrs	r3, r0
 8002dc4:	3401      	adds	r4, #1
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dcc:	482c      	ldr	r0, [pc, #176]	; (8002e80 <_vfiprintf_r+0x250>)
 8002dce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dd2:	2206      	movs	r2, #6
 8002dd4:	f7fd fa9c 	bl	8000310 <memchr>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d03f      	beq.n	8002e5c <_vfiprintf_r+0x22c>
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <_vfiprintf_r+0x254>)
 8002dde:	bb1b      	cbnz	r3, 8002e28 <_vfiprintf_r+0x1f8>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3307      	adds	r3, #7
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	3308      	adds	r3, #8
 8002dea:	9303      	str	r3, [sp, #12]
 8002dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dee:	443b      	add	r3, r7
 8002df0:	9309      	str	r3, [sp, #36]	; 0x24
 8002df2:	e767      	b.n	8002cc4 <_vfiprintf_r+0x94>
 8002df4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002df8:	460c      	mov	r4, r1
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	e7a5      	b.n	8002d4a <_vfiprintf_r+0x11a>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	3401      	adds	r4, #1
 8002e02:	9305      	str	r3, [sp, #20]
 8002e04:	4619      	mov	r1, r3
 8002e06:	f04f 0c0a 	mov.w	ip, #10
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e10:	3a30      	subs	r2, #48	; 0x30
 8002e12:	2a09      	cmp	r2, #9
 8002e14:	d903      	bls.n	8002e1e <_vfiprintf_r+0x1ee>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0c5      	beq.n	8002da6 <_vfiprintf_r+0x176>
 8002e1a:	9105      	str	r1, [sp, #20]
 8002e1c:	e7c3      	b.n	8002da6 <_vfiprintf_r+0x176>
 8002e1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e22:	4604      	mov	r4, r0
 8002e24:	2301      	movs	r3, #1
 8002e26:	e7f0      	b.n	8002e0a <_vfiprintf_r+0x1da>
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	462a      	mov	r2, r5
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <_vfiprintf_r+0x258>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	4630      	mov	r0, r6
 8002e34:	f3af 8000 	nop.w
 8002e38:	4607      	mov	r7, r0
 8002e3a:	1c78      	adds	r0, r7, #1
 8002e3c:	d1d6      	bne.n	8002dec <_vfiprintf_r+0x1bc>
 8002e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e40:	07d9      	lsls	r1, r3, #31
 8002e42:	d405      	bmi.n	8002e50 <_vfiprintf_r+0x220>
 8002e44:	89ab      	ldrh	r3, [r5, #12]
 8002e46:	059a      	lsls	r2, r3, #22
 8002e48:	d402      	bmi.n	8002e50 <_vfiprintf_r+0x220>
 8002e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e4c:	f000 fc35 	bl	80036ba <__retarget_lock_release_recursive>
 8002e50:	89ab      	ldrh	r3, [r5, #12]
 8002e52:	065b      	lsls	r3, r3, #25
 8002e54:	f53f af12 	bmi.w	8002c7c <_vfiprintf_r+0x4c>
 8002e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e5a:	e711      	b.n	8002c80 <_vfiprintf_r+0x50>
 8002e5c:	ab03      	add	r3, sp, #12
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	462a      	mov	r2, r5
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <_vfiprintf_r+0x258>)
 8002e64:	a904      	add	r1, sp, #16
 8002e66:	4630      	mov	r0, r6
 8002e68:	f000 f880 	bl	8002f6c <_printf_i>
 8002e6c:	e7e4      	b.n	8002e38 <_vfiprintf_r+0x208>
 8002e6e:	bf00      	nop
 8002e70:	08003c00 	.word	0x08003c00
 8002e74:	08003c20 	.word	0x08003c20
 8002e78:	08003be0 	.word	0x08003be0
 8002e7c:	08003bac 	.word	0x08003bac
 8002e80:	08003bb6 	.word	0x08003bb6
 8002e84:	00000000 	.word	0x00000000
 8002e88:	08002c0b 	.word	0x08002c0b
 8002e8c:	08003bb2 	.word	0x08003bb2

08002e90 <_printf_common>:
 8002e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e94:	4616      	mov	r6, r2
 8002e96:	4699      	mov	r9, r3
 8002e98:	688a      	ldr	r2, [r1, #8]
 8002e9a:	690b      	ldr	r3, [r1, #16]
 8002e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bfb8      	it	lt
 8002ea4:	4613      	movlt	r3, r2
 8002ea6:	6033      	str	r3, [r6, #0]
 8002ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eac:	4607      	mov	r7, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	b10a      	cbz	r2, 8002eb6 <_printf_common+0x26>
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	6033      	str	r3, [r6, #0]
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	0699      	lsls	r1, r3, #26
 8002eba:	bf42      	ittt	mi
 8002ebc:	6833      	ldrmi	r3, [r6, #0]
 8002ebe:	3302      	addmi	r3, #2
 8002ec0:	6033      	strmi	r3, [r6, #0]
 8002ec2:	6825      	ldr	r5, [r4, #0]
 8002ec4:	f015 0506 	ands.w	r5, r5, #6
 8002ec8:	d106      	bne.n	8002ed8 <_printf_common+0x48>
 8002eca:	f104 0a19 	add.w	sl, r4, #25
 8002ece:	68e3      	ldr	r3, [r4, #12]
 8002ed0:	6832      	ldr	r2, [r6, #0]
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	42ab      	cmp	r3, r5
 8002ed6:	dc26      	bgt.n	8002f26 <_printf_common+0x96>
 8002ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002edc:	1e13      	subs	r3, r2, #0
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	bf18      	it	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	0692      	lsls	r2, r2, #26
 8002ee6:	d42b      	bmi.n	8002f40 <_printf_common+0xb0>
 8002ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eec:	4649      	mov	r1, r9
 8002eee:	4638      	mov	r0, r7
 8002ef0:	47c0      	blx	r8
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d01e      	beq.n	8002f34 <_printf_common+0xa4>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	68e5      	ldr	r5, [r4, #12]
 8002efa:	6832      	ldr	r2, [r6, #0]
 8002efc:	f003 0306 	and.w	r3, r3, #6
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	bf08      	it	eq
 8002f04:	1aad      	subeq	r5, r5, r2
 8002f06:	68a3      	ldr	r3, [r4, #8]
 8002f08:	6922      	ldr	r2, [r4, #16]
 8002f0a:	bf0c      	ite	eq
 8002f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f10:	2500      	movne	r5, #0
 8002f12:	4293      	cmp	r3, r2
 8002f14:	bfc4      	itt	gt
 8002f16:	1a9b      	subgt	r3, r3, r2
 8002f18:	18ed      	addgt	r5, r5, r3
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	341a      	adds	r4, #26
 8002f1e:	42b5      	cmp	r5, r6
 8002f20:	d11a      	bne.n	8002f58 <_printf_common+0xc8>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e008      	b.n	8002f38 <_printf_common+0xa8>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4652      	mov	r2, sl
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	47c0      	blx	r8
 8002f30:	3001      	adds	r0, #1
 8002f32:	d103      	bne.n	8002f3c <_printf_common+0xac>
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7c6      	b.n	8002ece <_printf_common+0x3e>
 8002f40:	18e1      	adds	r1, r4, r3
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	2030      	movs	r0, #48	; 0x30
 8002f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f4a:	4422      	add	r2, r4
 8002f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f54:	3302      	adds	r3, #2
 8002f56:	e7c7      	b.n	8002ee8 <_printf_common+0x58>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4649      	mov	r1, r9
 8002f5e:	4638      	mov	r0, r7
 8002f60:	47c0      	blx	r8
 8002f62:	3001      	adds	r0, #1
 8002f64:	d0e6      	beq.n	8002f34 <_printf_common+0xa4>
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7d9      	b.n	8002f1e <_printf_common+0x8e>
	...

08002f6c <_printf_i>:
 8002f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	460c      	mov	r4, r1
 8002f72:	4691      	mov	r9, r2
 8002f74:	7e27      	ldrb	r7, [r4, #24]
 8002f76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f78:	2f78      	cmp	r7, #120	; 0x78
 8002f7a:	4680      	mov	r8, r0
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f82:	d807      	bhi.n	8002f94 <_printf_i+0x28>
 8002f84:	2f62      	cmp	r7, #98	; 0x62
 8002f86:	d80a      	bhi.n	8002f9e <_printf_i+0x32>
 8002f88:	2f00      	cmp	r7, #0
 8002f8a:	f000 80d8 	beq.w	800313e <_printf_i+0x1d2>
 8002f8e:	2f58      	cmp	r7, #88	; 0x58
 8002f90:	f000 80a3 	beq.w	80030da <_printf_i+0x16e>
 8002f94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f9c:	e03a      	b.n	8003014 <_printf_i+0xa8>
 8002f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fa2:	2b15      	cmp	r3, #21
 8002fa4:	d8f6      	bhi.n	8002f94 <_printf_i+0x28>
 8002fa6:	a001      	add	r0, pc, #4	; (adr r0, 8002fac <_printf_i+0x40>)
 8002fa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fac:	08003005 	.word	0x08003005
 8002fb0:	08003019 	.word	0x08003019
 8002fb4:	08002f95 	.word	0x08002f95
 8002fb8:	08002f95 	.word	0x08002f95
 8002fbc:	08002f95 	.word	0x08002f95
 8002fc0:	08002f95 	.word	0x08002f95
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08002f95 	.word	0x08002f95
 8002fcc:	08002f95 	.word	0x08002f95
 8002fd0:	08002f95 	.word	0x08002f95
 8002fd4:	08002f95 	.word	0x08002f95
 8002fd8:	08003125 	.word	0x08003125
 8002fdc:	08003049 	.word	0x08003049
 8002fe0:	08003107 	.word	0x08003107
 8002fe4:	08002f95 	.word	0x08002f95
 8002fe8:	08002f95 	.word	0x08002f95
 8002fec:	08003147 	.word	0x08003147
 8002ff0:	08002f95 	.word	0x08002f95
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	08002f95 	.word	0x08002f95
 8002ffc:	08002f95 	.word	0x08002f95
 8003000:	0800310f 	.word	0x0800310f
 8003004:	680b      	ldr	r3, [r1, #0]
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	600a      	str	r2, [r1, #0]
 800300c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003014:	2301      	movs	r3, #1
 8003016:	e0a3      	b.n	8003160 <_printf_i+0x1f4>
 8003018:	6825      	ldr	r5, [r4, #0]
 800301a:	6808      	ldr	r0, [r1, #0]
 800301c:	062e      	lsls	r6, r5, #24
 800301e:	f100 0304 	add.w	r3, r0, #4
 8003022:	d50a      	bpl.n	800303a <_printf_i+0xce>
 8003024:	6805      	ldr	r5, [r0, #0]
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	2d00      	cmp	r5, #0
 800302a:	da03      	bge.n	8003034 <_printf_i+0xc8>
 800302c:	232d      	movs	r3, #45	; 0x2d
 800302e:	426d      	negs	r5, r5
 8003030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003034:	485e      	ldr	r0, [pc, #376]	; (80031b0 <_printf_i+0x244>)
 8003036:	230a      	movs	r3, #10
 8003038:	e019      	b.n	800306e <_printf_i+0x102>
 800303a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800303e:	6805      	ldr	r5, [r0, #0]
 8003040:	600b      	str	r3, [r1, #0]
 8003042:	bf18      	it	ne
 8003044:	b22d      	sxthne	r5, r5
 8003046:	e7ef      	b.n	8003028 <_printf_i+0xbc>
 8003048:	680b      	ldr	r3, [r1, #0]
 800304a:	6825      	ldr	r5, [r4, #0]
 800304c:	1d18      	adds	r0, r3, #4
 800304e:	6008      	str	r0, [r1, #0]
 8003050:	0628      	lsls	r0, r5, #24
 8003052:	d501      	bpl.n	8003058 <_printf_i+0xec>
 8003054:	681d      	ldr	r5, [r3, #0]
 8003056:	e002      	b.n	800305e <_printf_i+0xf2>
 8003058:	0669      	lsls	r1, r5, #25
 800305a:	d5fb      	bpl.n	8003054 <_printf_i+0xe8>
 800305c:	881d      	ldrh	r5, [r3, #0]
 800305e:	4854      	ldr	r0, [pc, #336]	; (80031b0 <_printf_i+0x244>)
 8003060:	2f6f      	cmp	r7, #111	; 0x6f
 8003062:	bf0c      	ite	eq
 8003064:	2308      	moveq	r3, #8
 8003066:	230a      	movne	r3, #10
 8003068:	2100      	movs	r1, #0
 800306a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800306e:	6866      	ldr	r6, [r4, #4]
 8003070:	60a6      	str	r6, [r4, #8]
 8003072:	2e00      	cmp	r6, #0
 8003074:	bfa2      	ittt	ge
 8003076:	6821      	ldrge	r1, [r4, #0]
 8003078:	f021 0104 	bicge.w	r1, r1, #4
 800307c:	6021      	strge	r1, [r4, #0]
 800307e:	b90d      	cbnz	r5, 8003084 <_printf_i+0x118>
 8003080:	2e00      	cmp	r6, #0
 8003082:	d04d      	beq.n	8003120 <_printf_i+0x1b4>
 8003084:	4616      	mov	r6, r2
 8003086:	fbb5 f1f3 	udiv	r1, r5, r3
 800308a:	fb03 5711 	mls	r7, r3, r1, r5
 800308e:	5dc7      	ldrb	r7, [r0, r7]
 8003090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003094:	462f      	mov	r7, r5
 8003096:	42bb      	cmp	r3, r7
 8003098:	460d      	mov	r5, r1
 800309a:	d9f4      	bls.n	8003086 <_printf_i+0x11a>
 800309c:	2b08      	cmp	r3, #8
 800309e:	d10b      	bne.n	80030b8 <_printf_i+0x14c>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	07df      	lsls	r7, r3, #31
 80030a4:	d508      	bpl.n	80030b8 <_printf_i+0x14c>
 80030a6:	6923      	ldr	r3, [r4, #16]
 80030a8:	6861      	ldr	r1, [r4, #4]
 80030aa:	4299      	cmp	r1, r3
 80030ac:	bfde      	ittt	le
 80030ae:	2330      	movle	r3, #48	; 0x30
 80030b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030b8:	1b92      	subs	r2, r2, r6
 80030ba:	6122      	str	r2, [r4, #16]
 80030bc:	f8cd a000 	str.w	sl, [sp]
 80030c0:	464b      	mov	r3, r9
 80030c2:	aa03      	add	r2, sp, #12
 80030c4:	4621      	mov	r1, r4
 80030c6:	4640      	mov	r0, r8
 80030c8:	f7ff fee2 	bl	8002e90 <_printf_common>
 80030cc:	3001      	adds	r0, #1
 80030ce:	d14c      	bne.n	800316a <_printf_i+0x1fe>
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	b004      	add	sp, #16
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030da:	4835      	ldr	r0, [pc, #212]	; (80031b0 <_printf_i+0x244>)
 80030dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	680e      	ldr	r6, [r1, #0]
 80030e4:	061f      	lsls	r7, r3, #24
 80030e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80030ea:	600e      	str	r6, [r1, #0]
 80030ec:	d514      	bpl.n	8003118 <_printf_i+0x1ac>
 80030ee:	07d9      	lsls	r1, r3, #31
 80030f0:	bf44      	itt	mi
 80030f2:	f043 0320 	orrmi.w	r3, r3, #32
 80030f6:	6023      	strmi	r3, [r4, #0]
 80030f8:	b91d      	cbnz	r5, 8003102 <_printf_i+0x196>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f023 0320 	bic.w	r3, r3, #32
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	2310      	movs	r3, #16
 8003104:	e7b0      	b.n	8003068 <_printf_i+0xfc>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	f043 0320 	orr.w	r3, r3, #32
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	2378      	movs	r3, #120	; 0x78
 8003110:	4828      	ldr	r0, [pc, #160]	; (80031b4 <_printf_i+0x248>)
 8003112:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003116:	e7e3      	b.n	80030e0 <_printf_i+0x174>
 8003118:	065e      	lsls	r6, r3, #25
 800311a:	bf48      	it	mi
 800311c:	b2ad      	uxthmi	r5, r5
 800311e:	e7e6      	b.n	80030ee <_printf_i+0x182>
 8003120:	4616      	mov	r6, r2
 8003122:	e7bb      	b.n	800309c <_printf_i+0x130>
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	6826      	ldr	r6, [r4, #0]
 8003128:	6960      	ldr	r0, [r4, #20]
 800312a:	1d1d      	adds	r5, r3, #4
 800312c:	600d      	str	r5, [r1, #0]
 800312e:	0635      	lsls	r5, r6, #24
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	d501      	bpl.n	8003138 <_printf_i+0x1cc>
 8003134:	6018      	str	r0, [r3, #0]
 8003136:	e002      	b.n	800313e <_printf_i+0x1d2>
 8003138:	0671      	lsls	r1, r6, #25
 800313a:	d5fb      	bpl.n	8003134 <_printf_i+0x1c8>
 800313c:	8018      	strh	r0, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	6123      	str	r3, [r4, #16]
 8003142:	4616      	mov	r6, r2
 8003144:	e7ba      	b.n	80030bc <_printf_i+0x150>
 8003146:	680b      	ldr	r3, [r1, #0]
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	600a      	str	r2, [r1, #0]
 800314c:	681e      	ldr	r6, [r3, #0]
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	2100      	movs	r1, #0
 8003152:	4630      	mov	r0, r6
 8003154:	f7fd f8dc 	bl	8000310 <memchr>
 8003158:	b108      	cbz	r0, 800315e <_printf_i+0x1f2>
 800315a:	1b80      	subs	r0, r0, r6
 800315c:	6060      	str	r0, [r4, #4]
 800315e:	6863      	ldr	r3, [r4, #4]
 8003160:	6123      	str	r3, [r4, #16]
 8003162:	2300      	movs	r3, #0
 8003164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003168:	e7a8      	b.n	80030bc <_printf_i+0x150>
 800316a:	6923      	ldr	r3, [r4, #16]
 800316c:	4632      	mov	r2, r6
 800316e:	4649      	mov	r1, r9
 8003170:	4640      	mov	r0, r8
 8003172:	47d0      	blx	sl
 8003174:	3001      	adds	r0, #1
 8003176:	d0ab      	beq.n	80030d0 <_printf_i+0x164>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	079b      	lsls	r3, r3, #30
 800317c:	d413      	bmi.n	80031a6 <_printf_i+0x23a>
 800317e:	68e0      	ldr	r0, [r4, #12]
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	4298      	cmp	r0, r3
 8003184:	bfb8      	it	lt
 8003186:	4618      	movlt	r0, r3
 8003188:	e7a4      	b.n	80030d4 <_printf_i+0x168>
 800318a:	2301      	movs	r3, #1
 800318c:	4632      	mov	r2, r6
 800318e:	4649      	mov	r1, r9
 8003190:	4640      	mov	r0, r8
 8003192:	47d0      	blx	sl
 8003194:	3001      	adds	r0, #1
 8003196:	d09b      	beq.n	80030d0 <_printf_i+0x164>
 8003198:	3501      	adds	r5, #1
 800319a:	68e3      	ldr	r3, [r4, #12]
 800319c:	9903      	ldr	r1, [sp, #12]
 800319e:	1a5b      	subs	r3, r3, r1
 80031a0:	42ab      	cmp	r3, r5
 80031a2:	dcf2      	bgt.n	800318a <_printf_i+0x21e>
 80031a4:	e7eb      	b.n	800317e <_printf_i+0x212>
 80031a6:	2500      	movs	r5, #0
 80031a8:	f104 0619 	add.w	r6, r4, #25
 80031ac:	e7f5      	b.n	800319a <_printf_i+0x22e>
 80031ae:	bf00      	nop
 80031b0:	08003bbd 	.word	0x08003bbd
 80031b4:	08003bce 	.word	0x08003bce

080031b8 <__swbuf_r>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	460e      	mov	r6, r1
 80031bc:	4614      	mov	r4, r2
 80031be:	4605      	mov	r5, r0
 80031c0:	b118      	cbz	r0, 80031ca <__swbuf_r+0x12>
 80031c2:	6983      	ldr	r3, [r0, #24]
 80031c4:	b90b      	cbnz	r3, 80031ca <__swbuf_r+0x12>
 80031c6:	f000 f9d9 	bl	800357c <__sinit>
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <__swbuf_r+0x98>)
 80031cc:	429c      	cmp	r4, r3
 80031ce:	d12b      	bne.n	8003228 <__swbuf_r+0x70>
 80031d0:	686c      	ldr	r4, [r5, #4]
 80031d2:	69a3      	ldr	r3, [r4, #24]
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	071a      	lsls	r2, r3, #28
 80031da:	d52f      	bpl.n	800323c <__swbuf_r+0x84>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	b36b      	cbz	r3, 800323c <__swbuf_r+0x84>
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	1ac0      	subs	r0, r0, r3
 80031e6:	6963      	ldr	r3, [r4, #20]
 80031e8:	b2f6      	uxtb	r6, r6
 80031ea:	4283      	cmp	r3, r0
 80031ec:	4637      	mov	r7, r6
 80031ee:	dc04      	bgt.n	80031fa <__swbuf_r+0x42>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 f92e 	bl	8003454 <_fflush_r>
 80031f8:	bb30      	cbnz	r0, 8003248 <__swbuf_r+0x90>
 80031fa:	68a3      	ldr	r3, [r4, #8]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	60a3      	str	r3, [r4, #8]
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	6022      	str	r2, [r4, #0]
 8003206:	701e      	strb	r6, [r3, #0]
 8003208:	6963      	ldr	r3, [r4, #20]
 800320a:	3001      	adds	r0, #1
 800320c:	4283      	cmp	r3, r0
 800320e:	d004      	beq.n	800321a <__swbuf_r+0x62>
 8003210:	89a3      	ldrh	r3, [r4, #12]
 8003212:	07db      	lsls	r3, r3, #31
 8003214:	d506      	bpl.n	8003224 <__swbuf_r+0x6c>
 8003216:	2e0a      	cmp	r6, #10
 8003218:	d104      	bne.n	8003224 <__swbuf_r+0x6c>
 800321a:	4621      	mov	r1, r4
 800321c:	4628      	mov	r0, r5
 800321e:	f000 f919 	bl	8003454 <_fflush_r>
 8003222:	b988      	cbnz	r0, 8003248 <__swbuf_r+0x90>
 8003224:	4638      	mov	r0, r7
 8003226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <__swbuf_r+0x9c>)
 800322a:	429c      	cmp	r4, r3
 800322c:	d101      	bne.n	8003232 <__swbuf_r+0x7a>
 800322e:	68ac      	ldr	r4, [r5, #8]
 8003230:	e7cf      	b.n	80031d2 <__swbuf_r+0x1a>
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <__swbuf_r+0xa0>)
 8003234:	429c      	cmp	r4, r3
 8003236:	bf08      	it	eq
 8003238:	68ec      	ldreq	r4, [r5, #12]
 800323a:	e7ca      	b.n	80031d2 <__swbuf_r+0x1a>
 800323c:	4621      	mov	r1, r4
 800323e:	4628      	mov	r0, r5
 8003240:	f000 f80c 	bl	800325c <__swsetup_r>
 8003244:	2800      	cmp	r0, #0
 8003246:	d0cb      	beq.n	80031e0 <__swbuf_r+0x28>
 8003248:	f04f 37ff 	mov.w	r7, #4294967295
 800324c:	e7ea      	b.n	8003224 <__swbuf_r+0x6c>
 800324e:	bf00      	nop
 8003250:	08003c00 	.word	0x08003c00
 8003254:	08003c20 	.word	0x08003c20
 8003258:	08003be0 	.word	0x08003be0

0800325c <__swsetup_r>:
 800325c:	4b32      	ldr	r3, [pc, #200]	; (8003328 <__swsetup_r+0xcc>)
 800325e:	b570      	push	{r4, r5, r6, lr}
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	4606      	mov	r6, r0
 8003264:	460c      	mov	r4, r1
 8003266:	b125      	cbz	r5, 8003272 <__swsetup_r+0x16>
 8003268:	69ab      	ldr	r3, [r5, #24]
 800326a:	b913      	cbnz	r3, 8003272 <__swsetup_r+0x16>
 800326c:	4628      	mov	r0, r5
 800326e:	f000 f985 	bl	800357c <__sinit>
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <__swsetup_r+0xd0>)
 8003274:	429c      	cmp	r4, r3
 8003276:	d10f      	bne.n	8003298 <__swsetup_r+0x3c>
 8003278:	686c      	ldr	r4, [r5, #4]
 800327a:	89a3      	ldrh	r3, [r4, #12]
 800327c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003280:	0719      	lsls	r1, r3, #28
 8003282:	d42c      	bmi.n	80032de <__swsetup_r+0x82>
 8003284:	06dd      	lsls	r5, r3, #27
 8003286:	d411      	bmi.n	80032ac <__swsetup_r+0x50>
 8003288:	2309      	movs	r3, #9
 800328a:	6033      	str	r3, [r6, #0]
 800328c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003290:	81a3      	strh	r3, [r4, #12]
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	e03e      	b.n	8003316 <__swsetup_r+0xba>
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <__swsetup_r+0xd4>)
 800329a:	429c      	cmp	r4, r3
 800329c:	d101      	bne.n	80032a2 <__swsetup_r+0x46>
 800329e:	68ac      	ldr	r4, [r5, #8]
 80032a0:	e7eb      	b.n	800327a <__swsetup_r+0x1e>
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <__swsetup_r+0xd8>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	bf08      	it	eq
 80032a8:	68ec      	ldreq	r4, [r5, #12]
 80032aa:	e7e6      	b.n	800327a <__swsetup_r+0x1e>
 80032ac:	0758      	lsls	r0, r3, #29
 80032ae:	d512      	bpl.n	80032d6 <__swsetup_r+0x7a>
 80032b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b2:	b141      	cbz	r1, 80032c6 <__swsetup_r+0x6a>
 80032b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b8:	4299      	cmp	r1, r3
 80032ba:	d002      	beq.n	80032c2 <__swsetup_r+0x66>
 80032bc:	4630      	mov	r0, r6
 80032be:	f7ff fb3b 	bl	8002938 <_free_r>
 80032c2:	2300      	movs	r3, #0
 80032c4:	6363      	str	r3, [r4, #52]	; 0x34
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032cc:	81a3      	strh	r3, [r4, #12]
 80032ce:	2300      	movs	r3, #0
 80032d0:	6063      	str	r3, [r4, #4]
 80032d2:	6923      	ldr	r3, [r4, #16]
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	81a3      	strh	r3, [r4, #12]
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	b94b      	cbnz	r3, 80032f6 <__swsetup_r+0x9a>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d003      	beq.n	80032f6 <__swsetup_r+0x9a>
 80032ee:	4621      	mov	r1, r4
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 fa07 	bl	8003704 <__smakebuf_r>
 80032f6:	89a0      	ldrh	r0, [r4, #12]
 80032f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032fc:	f010 0301 	ands.w	r3, r0, #1
 8003300:	d00a      	beq.n	8003318 <__swsetup_r+0xbc>
 8003302:	2300      	movs	r3, #0
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	6963      	ldr	r3, [r4, #20]
 8003308:	425b      	negs	r3, r3
 800330a:	61a3      	str	r3, [r4, #24]
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b943      	cbnz	r3, 8003322 <__swsetup_r+0xc6>
 8003310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003314:	d1ba      	bne.n	800328c <__swsetup_r+0x30>
 8003316:	bd70      	pop	{r4, r5, r6, pc}
 8003318:	0781      	lsls	r1, r0, #30
 800331a:	bf58      	it	pl
 800331c:	6963      	ldrpl	r3, [r4, #20]
 800331e:	60a3      	str	r3, [r4, #8]
 8003320:	e7f4      	b.n	800330c <__swsetup_r+0xb0>
 8003322:	2000      	movs	r0, #0
 8003324:	e7f7      	b.n	8003316 <__swsetup_r+0xba>
 8003326:	bf00      	nop
 8003328:	24000000 	.word	0x24000000
 800332c:	08003c00 	.word	0x08003c00
 8003330:	08003c20 	.word	0x08003c20
 8003334:	08003be0 	.word	0x08003be0

08003338 <abort>:
 8003338:	b508      	push	{r3, lr}
 800333a:	2006      	movs	r0, #6
 800333c:	f000 fa4a 	bl	80037d4 <raise>
 8003340:	2001      	movs	r0, #1
 8003342:	f7ff f9e7 	bl	8002714 <_exit>
	...

08003348 <__sflush_r>:
 8003348:	898a      	ldrh	r2, [r1, #12]
 800334a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	0710      	lsls	r0, r2, #28
 8003352:	460c      	mov	r4, r1
 8003354:	d458      	bmi.n	8003408 <__sflush_r+0xc0>
 8003356:	684b      	ldr	r3, [r1, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	dc05      	bgt.n	8003368 <__sflush_r+0x20>
 800335c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	dc02      	bgt.n	8003368 <__sflush_r+0x20>
 8003362:	2000      	movs	r0, #0
 8003364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800336a:	2e00      	cmp	r6, #0
 800336c:	d0f9      	beq.n	8003362 <__sflush_r+0x1a>
 800336e:	2300      	movs	r3, #0
 8003370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003374:	682f      	ldr	r7, [r5, #0]
 8003376:	602b      	str	r3, [r5, #0]
 8003378:	d032      	beq.n	80033e0 <__sflush_r+0x98>
 800337a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	075a      	lsls	r2, r3, #29
 8003380:	d505      	bpl.n	800338e <__sflush_r+0x46>
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	1ac0      	subs	r0, r0, r3
 8003386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003388:	b10b      	cbz	r3, 800338e <__sflush_r+0x46>
 800338a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800338c:	1ac0      	subs	r0, r0, r3
 800338e:	2300      	movs	r3, #0
 8003390:	4602      	mov	r2, r0
 8003392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003394:	6a21      	ldr	r1, [r4, #32]
 8003396:	4628      	mov	r0, r5
 8003398:	47b0      	blx	r6
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	d106      	bne.n	80033ae <__sflush_r+0x66>
 80033a0:	6829      	ldr	r1, [r5, #0]
 80033a2:	291d      	cmp	r1, #29
 80033a4:	d82c      	bhi.n	8003400 <__sflush_r+0xb8>
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <__sflush_r+0x108>)
 80033a8:	40ca      	lsrs	r2, r1
 80033aa:	07d6      	lsls	r6, r2, #31
 80033ac:	d528      	bpl.n	8003400 <__sflush_r+0xb8>
 80033ae:	2200      	movs	r2, #0
 80033b0:	6062      	str	r2, [r4, #4]
 80033b2:	04d9      	lsls	r1, r3, #19
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	6022      	str	r2, [r4, #0]
 80033b8:	d504      	bpl.n	80033c4 <__sflush_r+0x7c>
 80033ba:	1c42      	adds	r2, r0, #1
 80033bc:	d101      	bne.n	80033c2 <__sflush_r+0x7a>
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	b903      	cbnz	r3, 80033c4 <__sflush_r+0x7c>
 80033c2:	6560      	str	r0, [r4, #84]	; 0x54
 80033c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c6:	602f      	str	r7, [r5, #0]
 80033c8:	2900      	cmp	r1, #0
 80033ca:	d0ca      	beq.n	8003362 <__sflush_r+0x1a>
 80033cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033d0:	4299      	cmp	r1, r3
 80033d2:	d002      	beq.n	80033da <__sflush_r+0x92>
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff faaf 	bl	8002938 <_free_r>
 80033da:	2000      	movs	r0, #0
 80033dc:	6360      	str	r0, [r4, #52]	; 0x34
 80033de:	e7c1      	b.n	8003364 <__sflush_r+0x1c>
 80033e0:	6a21      	ldr	r1, [r4, #32]
 80033e2:	2301      	movs	r3, #1
 80033e4:	4628      	mov	r0, r5
 80033e6:	47b0      	blx	r6
 80033e8:	1c41      	adds	r1, r0, #1
 80033ea:	d1c7      	bne.n	800337c <__sflush_r+0x34>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0c4      	beq.n	800337c <__sflush_r+0x34>
 80033f2:	2b1d      	cmp	r3, #29
 80033f4:	d001      	beq.n	80033fa <__sflush_r+0xb2>
 80033f6:	2b16      	cmp	r3, #22
 80033f8:	d101      	bne.n	80033fe <__sflush_r+0xb6>
 80033fa:	602f      	str	r7, [r5, #0]
 80033fc:	e7b1      	b.n	8003362 <__sflush_r+0x1a>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003404:	81a3      	strh	r3, [r4, #12]
 8003406:	e7ad      	b.n	8003364 <__sflush_r+0x1c>
 8003408:	690f      	ldr	r7, [r1, #16]
 800340a:	2f00      	cmp	r7, #0
 800340c:	d0a9      	beq.n	8003362 <__sflush_r+0x1a>
 800340e:	0793      	lsls	r3, r2, #30
 8003410:	680e      	ldr	r6, [r1, #0]
 8003412:	bf08      	it	eq
 8003414:	694b      	ldreq	r3, [r1, #20]
 8003416:	600f      	str	r7, [r1, #0]
 8003418:	bf18      	it	ne
 800341a:	2300      	movne	r3, #0
 800341c:	eba6 0807 	sub.w	r8, r6, r7
 8003420:	608b      	str	r3, [r1, #8]
 8003422:	f1b8 0f00 	cmp.w	r8, #0
 8003426:	dd9c      	ble.n	8003362 <__sflush_r+0x1a>
 8003428:	6a21      	ldr	r1, [r4, #32]
 800342a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800342c:	4643      	mov	r3, r8
 800342e:	463a      	mov	r2, r7
 8003430:	4628      	mov	r0, r5
 8003432:	47b0      	blx	r6
 8003434:	2800      	cmp	r0, #0
 8003436:	dc06      	bgt.n	8003446 <__sflush_r+0xfe>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	e78e      	b.n	8003364 <__sflush_r+0x1c>
 8003446:	4407      	add	r7, r0
 8003448:	eba8 0800 	sub.w	r8, r8, r0
 800344c:	e7e9      	b.n	8003422 <__sflush_r+0xda>
 800344e:	bf00      	nop
 8003450:	20400001 	.word	0x20400001

08003454 <_fflush_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	690b      	ldr	r3, [r1, #16]
 8003458:	4605      	mov	r5, r0
 800345a:	460c      	mov	r4, r1
 800345c:	b913      	cbnz	r3, 8003464 <_fflush_r+0x10>
 800345e:	2500      	movs	r5, #0
 8003460:	4628      	mov	r0, r5
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	b118      	cbz	r0, 800346e <_fflush_r+0x1a>
 8003466:	6983      	ldr	r3, [r0, #24]
 8003468:	b90b      	cbnz	r3, 800346e <_fflush_r+0x1a>
 800346a:	f000 f887 	bl	800357c <__sinit>
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <_fflush_r+0x6c>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d11b      	bne.n	80034ac <_fflush_r+0x58>
 8003474:	686c      	ldr	r4, [r5, #4]
 8003476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ef      	beq.n	800345e <_fflush_r+0xa>
 800347e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003480:	07d0      	lsls	r0, r2, #31
 8003482:	d404      	bmi.n	800348e <_fflush_r+0x3a>
 8003484:	0599      	lsls	r1, r3, #22
 8003486:	d402      	bmi.n	800348e <_fflush_r+0x3a>
 8003488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348a:	f000 f915 	bl	80036b8 <__retarget_lock_acquire_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	4621      	mov	r1, r4
 8003492:	f7ff ff59 	bl	8003348 <__sflush_r>
 8003496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003498:	07da      	lsls	r2, r3, #31
 800349a:	4605      	mov	r5, r0
 800349c:	d4e0      	bmi.n	8003460 <_fflush_r+0xc>
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	059b      	lsls	r3, r3, #22
 80034a2:	d4dd      	bmi.n	8003460 <_fflush_r+0xc>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f000 f908 	bl	80036ba <__retarget_lock_release_recursive>
 80034aa:	e7d9      	b.n	8003460 <_fflush_r+0xc>
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <_fflush_r+0x70>)
 80034ae:	429c      	cmp	r4, r3
 80034b0:	d101      	bne.n	80034b6 <_fflush_r+0x62>
 80034b2:	68ac      	ldr	r4, [r5, #8]
 80034b4:	e7df      	b.n	8003476 <_fflush_r+0x22>
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <_fflush_r+0x74>)
 80034b8:	429c      	cmp	r4, r3
 80034ba:	bf08      	it	eq
 80034bc:	68ec      	ldreq	r4, [r5, #12]
 80034be:	e7da      	b.n	8003476 <_fflush_r+0x22>
 80034c0:	08003c00 	.word	0x08003c00
 80034c4:	08003c20 	.word	0x08003c20
 80034c8:	08003be0 	.word	0x08003be0

080034cc <std>:
 80034cc:	2300      	movs	r3, #0
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	e9c0 3300 	strd	r3, r3, [r0]
 80034d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034da:	6083      	str	r3, [r0, #8]
 80034dc:	8181      	strh	r1, [r0, #12]
 80034de:	6643      	str	r3, [r0, #100]	; 0x64
 80034e0:	81c2      	strh	r2, [r0, #14]
 80034e2:	6183      	str	r3, [r0, #24]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2208      	movs	r2, #8
 80034e8:	305c      	adds	r0, #92	; 0x5c
 80034ea:	f7ff fa1d 	bl	8002928 <memset>
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <std+0x38>)
 80034f0:	6263      	str	r3, [r4, #36]	; 0x24
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <std+0x3c>)
 80034f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <std+0x40>)
 80034f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <std+0x44>)
 80034fc:	6224      	str	r4, [r4, #32]
 80034fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003500:	bd10      	pop	{r4, pc}
 8003502:	bf00      	nop
 8003504:	0800380d 	.word	0x0800380d
 8003508:	0800382f 	.word	0x0800382f
 800350c:	08003867 	.word	0x08003867
 8003510:	0800388b 	.word	0x0800388b

08003514 <_cleanup_r>:
 8003514:	4901      	ldr	r1, [pc, #4]	; (800351c <_cleanup_r+0x8>)
 8003516:	f000 b8af 	b.w	8003678 <_fwalk_reent>
 800351a:	bf00      	nop
 800351c:	08003455 	.word	0x08003455

08003520 <__sfmoreglue>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	1e4a      	subs	r2, r1, #1
 8003524:	2568      	movs	r5, #104	; 0x68
 8003526:	4355      	muls	r5, r2
 8003528:	460e      	mov	r6, r1
 800352a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800352e:	f7ff fa53 	bl	80029d8 <_malloc_r>
 8003532:	4604      	mov	r4, r0
 8003534:	b140      	cbz	r0, 8003548 <__sfmoreglue+0x28>
 8003536:	2100      	movs	r1, #0
 8003538:	e9c0 1600 	strd	r1, r6, [r0]
 800353c:	300c      	adds	r0, #12
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003544:	f7ff f9f0 	bl	8002928 <memset>
 8003548:	4620      	mov	r0, r4
 800354a:	bd70      	pop	{r4, r5, r6, pc}

0800354c <__sfp_lock_acquire>:
 800354c:	4801      	ldr	r0, [pc, #4]	; (8003554 <__sfp_lock_acquire+0x8>)
 800354e:	f000 b8b3 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 8003552:	bf00      	nop
 8003554:	240000fc 	.word	0x240000fc

08003558 <__sfp_lock_release>:
 8003558:	4801      	ldr	r0, [pc, #4]	; (8003560 <__sfp_lock_release+0x8>)
 800355a:	f000 b8ae 	b.w	80036ba <__retarget_lock_release_recursive>
 800355e:	bf00      	nop
 8003560:	240000fc 	.word	0x240000fc

08003564 <__sinit_lock_acquire>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__sinit_lock_acquire+0x8>)
 8003566:	f000 b8a7 	b.w	80036b8 <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	240000f7 	.word	0x240000f7

08003570 <__sinit_lock_release>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__sinit_lock_release+0x8>)
 8003572:	f000 b8a2 	b.w	80036ba <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	240000f7 	.word	0x240000f7

0800357c <__sinit>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff0 	bl	8003564 <__sinit_lock_acquire>
 8003584:	69a3      	ldr	r3, [r4, #24]
 8003586:	b11b      	cbz	r3, 8003590 <__sinit+0x14>
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f7ff bff0 	b.w	8003570 <__sinit_lock_release>
 8003590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003594:	6523      	str	r3, [r4, #80]	; 0x50
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <__sinit+0x68>)
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <__sinit+0x6c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	62a2      	str	r2, [r4, #40]	; 0x28
 800359e:	42a3      	cmp	r3, r4
 80035a0:	bf04      	itt	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	61a3      	streq	r3, [r4, #24]
 80035a6:	4620      	mov	r0, r4
 80035a8:	f000 f820 	bl	80035ec <__sfp>
 80035ac:	6060      	str	r0, [r4, #4]
 80035ae:	4620      	mov	r0, r4
 80035b0:	f000 f81c 	bl	80035ec <__sfp>
 80035b4:	60a0      	str	r0, [r4, #8]
 80035b6:	4620      	mov	r0, r4
 80035b8:	f000 f818 	bl	80035ec <__sfp>
 80035bc:	2200      	movs	r2, #0
 80035be:	60e0      	str	r0, [r4, #12]
 80035c0:	2104      	movs	r1, #4
 80035c2:	6860      	ldr	r0, [r4, #4]
 80035c4:	f7ff ff82 	bl	80034cc <std>
 80035c8:	68a0      	ldr	r0, [r4, #8]
 80035ca:	2201      	movs	r2, #1
 80035cc:	2109      	movs	r1, #9
 80035ce:	f7ff ff7d 	bl	80034cc <std>
 80035d2:	68e0      	ldr	r0, [r4, #12]
 80035d4:	2202      	movs	r2, #2
 80035d6:	2112      	movs	r1, #18
 80035d8:	f7ff ff78 	bl	80034cc <std>
 80035dc:	2301      	movs	r3, #1
 80035de:	61a3      	str	r3, [r4, #24]
 80035e0:	e7d2      	b.n	8003588 <__sinit+0xc>
 80035e2:	bf00      	nop
 80035e4:	08003af4 	.word	0x08003af4
 80035e8:	08003515 	.word	0x08003515

080035ec <__sfp>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	4607      	mov	r7, r0
 80035f0:	f7ff ffac 	bl	800354c <__sfp_lock_acquire>
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <__sfp+0x84>)
 80035f6:	681e      	ldr	r6, [r3, #0]
 80035f8:	69b3      	ldr	r3, [r6, #24]
 80035fa:	b913      	cbnz	r3, 8003602 <__sfp+0x16>
 80035fc:	4630      	mov	r0, r6
 80035fe:	f7ff ffbd 	bl	800357c <__sinit>
 8003602:	3648      	adds	r6, #72	; 0x48
 8003604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003608:	3b01      	subs	r3, #1
 800360a:	d503      	bpl.n	8003614 <__sfp+0x28>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	b30b      	cbz	r3, 8003654 <__sfp+0x68>
 8003610:	6836      	ldr	r6, [r6, #0]
 8003612:	e7f7      	b.n	8003604 <__sfp+0x18>
 8003614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003618:	b9d5      	cbnz	r5, 8003650 <__sfp+0x64>
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <__sfp+0x88>)
 800361c:	60e3      	str	r3, [r4, #12]
 800361e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003622:	6665      	str	r5, [r4, #100]	; 0x64
 8003624:	f000 f847 	bl	80036b6 <__retarget_lock_init_recursive>
 8003628:	f7ff ff96 	bl	8003558 <__sfp_lock_release>
 800362c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003634:	6025      	str	r5, [r4, #0]
 8003636:	61a5      	str	r5, [r4, #24]
 8003638:	2208      	movs	r2, #8
 800363a:	4629      	mov	r1, r5
 800363c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003640:	f7ff f972 	bl	8002928 <memset>
 8003644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800364c:	4620      	mov	r0, r4
 800364e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003650:	3468      	adds	r4, #104	; 0x68
 8003652:	e7d9      	b.n	8003608 <__sfp+0x1c>
 8003654:	2104      	movs	r1, #4
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff ff62 	bl	8003520 <__sfmoreglue>
 800365c:	4604      	mov	r4, r0
 800365e:	6030      	str	r0, [r6, #0]
 8003660:	2800      	cmp	r0, #0
 8003662:	d1d5      	bne.n	8003610 <__sfp+0x24>
 8003664:	f7ff ff78 	bl	8003558 <__sfp_lock_release>
 8003668:	230c      	movs	r3, #12
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	e7ee      	b.n	800364c <__sfp+0x60>
 800366e:	bf00      	nop
 8003670:	08003af4 	.word	0x08003af4
 8003674:	ffff0001 	.word	0xffff0001

08003678 <_fwalk_reent>:
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	4688      	mov	r8, r1
 8003680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003684:	2700      	movs	r7, #0
 8003686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800368a:	f1b9 0901 	subs.w	r9, r9, #1
 800368e:	d505      	bpl.n	800369c <_fwalk_reent+0x24>
 8003690:	6824      	ldr	r4, [r4, #0]
 8003692:	2c00      	cmp	r4, #0
 8003694:	d1f7      	bne.n	8003686 <_fwalk_reent+0xe>
 8003696:	4638      	mov	r0, r7
 8003698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369c:	89ab      	ldrh	r3, [r5, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d907      	bls.n	80036b2 <_fwalk_reent+0x3a>
 80036a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036a6:	3301      	adds	r3, #1
 80036a8:	d003      	beq.n	80036b2 <_fwalk_reent+0x3a>
 80036aa:	4629      	mov	r1, r5
 80036ac:	4630      	mov	r0, r6
 80036ae:	47c0      	blx	r8
 80036b0:	4307      	orrs	r7, r0
 80036b2:	3568      	adds	r5, #104	; 0x68
 80036b4:	e7e9      	b.n	800368a <_fwalk_reent+0x12>

080036b6 <__retarget_lock_init_recursive>:
 80036b6:	4770      	bx	lr

080036b8 <__retarget_lock_acquire_recursive>:
 80036b8:	4770      	bx	lr

080036ba <__retarget_lock_release_recursive>:
 80036ba:	4770      	bx	lr

080036bc <__swhatbuf_r>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	460e      	mov	r6, r1
 80036c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c4:	2900      	cmp	r1, #0
 80036c6:	b096      	sub	sp, #88	; 0x58
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	da07      	bge.n	80036de <__swhatbuf_r+0x22>
 80036ce:	2300      	movs	r3, #0
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	89b3      	ldrh	r3, [r6, #12]
 80036d4:	061a      	lsls	r2, r3, #24
 80036d6:	d410      	bmi.n	80036fa <__swhatbuf_r+0x3e>
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	e00e      	b.n	80036fc <__swhatbuf_r+0x40>
 80036de:	466a      	mov	r2, sp
 80036e0:	f000 f8fa 	bl	80038d8 <_fstat_r>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	dbf2      	blt.n	80036ce <__swhatbuf_r+0x12>
 80036e8:	9a01      	ldr	r2, [sp, #4]
 80036ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036f2:	425a      	negs	r2, r3
 80036f4:	415a      	adcs	r2, r3
 80036f6:	602a      	str	r2, [r5, #0]
 80036f8:	e7ee      	b.n	80036d8 <__swhatbuf_r+0x1c>
 80036fa:	2340      	movs	r3, #64	; 0x40
 80036fc:	2000      	movs	r0, #0
 80036fe:	6023      	str	r3, [r4, #0]
 8003700:	b016      	add	sp, #88	; 0x58
 8003702:	bd70      	pop	{r4, r5, r6, pc}

08003704 <__smakebuf_r>:
 8003704:	898b      	ldrh	r3, [r1, #12]
 8003706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003708:	079d      	lsls	r5, r3, #30
 800370a:	4606      	mov	r6, r0
 800370c:	460c      	mov	r4, r1
 800370e:	d507      	bpl.n	8003720 <__smakebuf_r+0x1c>
 8003710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	2301      	movs	r3, #1
 800371a:	6163      	str	r3, [r4, #20]
 800371c:	b002      	add	sp, #8
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	ab01      	add	r3, sp, #4
 8003722:	466a      	mov	r2, sp
 8003724:	f7ff ffca 	bl	80036bc <__swhatbuf_r>
 8003728:	9900      	ldr	r1, [sp, #0]
 800372a:	4605      	mov	r5, r0
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff f953 	bl	80029d8 <_malloc_r>
 8003732:	b948      	cbnz	r0, 8003748 <__smakebuf_r+0x44>
 8003734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003738:	059a      	lsls	r2, r3, #22
 800373a:	d4ef      	bmi.n	800371c <__smakebuf_r+0x18>
 800373c:	f023 0303 	bic.w	r3, r3, #3
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	81a3      	strh	r3, [r4, #12]
 8003746:	e7e3      	b.n	8003710 <__smakebuf_r+0xc>
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <__smakebuf_r+0x7c>)
 800374a:	62b3      	str	r3, [r6, #40]	; 0x28
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	6020      	str	r0, [r4, #0]
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	6163      	str	r3, [r4, #20]
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b15b      	cbz	r3, 8003778 <__smakebuf_r+0x74>
 8003760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003764:	4630      	mov	r0, r6
 8003766:	f000 f8c9 	bl	80038fc <_isatty_r>
 800376a:	b128      	cbz	r0, 8003778 <__smakebuf_r+0x74>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	89a0      	ldrh	r0, [r4, #12]
 800377a:	4305      	orrs	r5, r0
 800377c:	81a5      	strh	r5, [r4, #12]
 800377e:	e7cd      	b.n	800371c <__smakebuf_r+0x18>
 8003780:	08003515 	.word	0x08003515

08003784 <_raise_r>:
 8003784:	291f      	cmp	r1, #31
 8003786:	b538      	push	{r3, r4, r5, lr}
 8003788:	4604      	mov	r4, r0
 800378a:	460d      	mov	r5, r1
 800378c:	d904      	bls.n	8003798 <_raise_r+0x14>
 800378e:	2316      	movs	r3, #22
 8003790:	6003      	str	r3, [r0, #0]
 8003792:	f04f 30ff 	mov.w	r0, #4294967295
 8003796:	bd38      	pop	{r3, r4, r5, pc}
 8003798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800379a:	b112      	cbz	r2, 80037a2 <_raise_r+0x1e>
 800379c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80037a0:	b94b      	cbnz	r3, 80037b6 <_raise_r+0x32>
 80037a2:	4620      	mov	r0, r4
 80037a4:	f000 f830 	bl	8003808 <_getpid_r>
 80037a8:	462a      	mov	r2, r5
 80037aa:	4601      	mov	r1, r0
 80037ac:	4620      	mov	r0, r4
 80037ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037b2:	f000 b817 	b.w	80037e4 <_kill_r>
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d00a      	beq.n	80037d0 <_raise_r+0x4c>
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	d103      	bne.n	80037c6 <_raise_r+0x42>
 80037be:	2316      	movs	r3, #22
 80037c0:	6003      	str	r3, [r0, #0]
 80037c2:	2001      	movs	r0, #1
 80037c4:	e7e7      	b.n	8003796 <_raise_r+0x12>
 80037c6:	2400      	movs	r4, #0
 80037c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80037cc:	4628      	mov	r0, r5
 80037ce:	4798      	blx	r3
 80037d0:	2000      	movs	r0, #0
 80037d2:	e7e0      	b.n	8003796 <_raise_r+0x12>

080037d4 <raise>:
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <raise+0xc>)
 80037d6:	4601      	mov	r1, r0
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	f7ff bfd3 	b.w	8003784 <_raise_r>
 80037de:	bf00      	nop
 80037e0:	24000000 	.word	0x24000000

080037e4 <_kill_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d07      	ldr	r5, [pc, #28]	; (8003804 <_kill_r+0x20>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	602b      	str	r3, [r5, #0]
 80037f2:	f7fe ff7f 	bl	80026f4 <_kill>
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	d102      	bne.n	8003800 <_kill_r+0x1c>
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	b103      	cbz	r3, 8003800 <_kill_r+0x1c>
 80037fe:	6023      	str	r3, [r4, #0]
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	240000f0 	.word	0x240000f0

08003808 <_getpid_r>:
 8003808:	f7fe bf6c 	b.w	80026e4 <_getpid>

0800380c <__sread>:
 800380c:	b510      	push	{r4, lr}
 800380e:	460c      	mov	r4, r1
 8003810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003814:	f000 f894 	bl	8003940 <_read_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	bfab      	itete	ge
 800381c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800381e:	89a3      	ldrhlt	r3, [r4, #12]
 8003820:	181b      	addge	r3, r3, r0
 8003822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003826:	bfac      	ite	ge
 8003828:	6563      	strge	r3, [r4, #84]	; 0x54
 800382a:	81a3      	strhlt	r3, [r4, #12]
 800382c:	bd10      	pop	{r4, pc}

0800382e <__swrite>:
 800382e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003832:	461f      	mov	r7, r3
 8003834:	898b      	ldrh	r3, [r1, #12]
 8003836:	05db      	lsls	r3, r3, #23
 8003838:	4605      	mov	r5, r0
 800383a:	460c      	mov	r4, r1
 800383c:	4616      	mov	r6, r2
 800383e:	d505      	bpl.n	800384c <__swrite+0x1e>
 8003840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003844:	2302      	movs	r3, #2
 8003846:	2200      	movs	r2, #0
 8003848:	f000 f868 	bl	800391c <_lseek_r>
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	4632      	mov	r2, r6
 800385a:	463b      	mov	r3, r7
 800385c:	4628      	mov	r0, r5
 800385e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003862:	f000 b817 	b.w	8003894 <_write_r>

08003866 <__sseek>:
 8003866:	b510      	push	{r4, lr}
 8003868:	460c      	mov	r4, r1
 800386a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386e:	f000 f855 	bl	800391c <_lseek_r>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	bf15      	itete	ne
 8003878:	6560      	strne	r0, [r4, #84]	; 0x54
 800387a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800387e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003882:	81a3      	strheq	r3, [r4, #12]
 8003884:	bf18      	it	ne
 8003886:	81a3      	strhne	r3, [r4, #12]
 8003888:	bd10      	pop	{r4, pc}

0800388a <__sclose>:
 800388a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388e:	f000 b813 	b.w	80038b8 <_close_r>
	...

08003894 <_write_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4d07      	ldr	r5, [pc, #28]	; (80038b4 <_write_r+0x20>)
 8003898:	4604      	mov	r4, r0
 800389a:	4608      	mov	r0, r1
 800389c:	4611      	mov	r1, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	602a      	str	r2, [r5, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f7fe ff5d 	bl	8002762 <_write>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_write_r+0x1e>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_write_r+0x1e>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	240000f0 	.word	0x240000f0

080038b8 <_close_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4d06      	ldr	r5, [pc, #24]	; (80038d4 <_close_r+0x1c>)
 80038bc:	2300      	movs	r3, #0
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	602b      	str	r3, [r5, #0]
 80038c4:	f7fe ff69 	bl	800279a <_close>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_close_r+0x1a>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_close_r+0x1a>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	240000f0 	.word	0x240000f0

080038d8 <_fstat_r>:
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4d07      	ldr	r5, [pc, #28]	; (80038f8 <_fstat_r+0x20>)
 80038dc:	2300      	movs	r3, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	f7fe ff64 	bl	80027b2 <_fstat>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d102      	bne.n	80038f4 <_fstat_r+0x1c>
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	b103      	cbz	r3, 80038f4 <_fstat_r+0x1c>
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	240000f0 	.word	0x240000f0

080038fc <_isatty_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4d06      	ldr	r5, [pc, #24]	; (8003918 <_isatty_r+0x1c>)
 8003900:	2300      	movs	r3, #0
 8003902:	4604      	mov	r4, r0
 8003904:	4608      	mov	r0, r1
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	f7fe ff63 	bl	80027d2 <_isatty>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d102      	bne.n	8003916 <_isatty_r+0x1a>
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	b103      	cbz	r3, 8003916 <_isatty_r+0x1a>
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	bd38      	pop	{r3, r4, r5, pc}
 8003918:	240000f0 	.word	0x240000f0

0800391c <_lseek_r>:
 800391c:	b538      	push	{r3, r4, r5, lr}
 800391e:	4d07      	ldr	r5, [pc, #28]	; (800393c <_lseek_r+0x20>)
 8003920:	4604      	mov	r4, r0
 8003922:	4608      	mov	r0, r1
 8003924:	4611      	mov	r1, r2
 8003926:	2200      	movs	r2, #0
 8003928:	602a      	str	r2, [r5, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	f7fe ff5c 	bl	80027e8 <_lseek>
 8003930:	1c43      	adds	r3, r0, #1
 8003932:	d102      	bne.n	800393a <_lseek_r+0x1e>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	b103      	cbz	r3, 800393a <_lseek_r+0x1e>
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	240000f0 	.word	0x240000f0

08003940 <_read_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d07      	ldr	r5, [pc, #28]	; (8003960 <_read_r+0x20>)
 8003944:	4604      	mov	r4, r0
 8003946:	4608      	mov	r0, r1
 8003948:	4611      	mov	r1, r2
 800394a:	2200      	movs	r2, #0
 800394c:	602a      	str	r2, [r5, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	f7fe feea 	bl	8002728 <_read>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_read_r+0x1e>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_read_r+0x1e>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	240000f0 	.word	0x240000f0

08003964 <_init>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

08003970 <_fini>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	bf00      	nop
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr
