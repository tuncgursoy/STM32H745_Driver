
driver_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000840  08000848  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000840  08000840  00010848  2**0
                  CONTENTS
  4 .ARM          00000000  08000840  08000840  00010848  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000840  08000848  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000840  08000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000844  08000844  00010844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  24000000  24000000  00010848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  24000000  08000848  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400001c  08000848  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f52  00000000  00000000  00010876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000472  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00011c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00011d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028669  00000000  00000000  00011e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c82  00000000  00000000  0003a501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7d8  00000000  00000000  0003c183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012795b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003dc  00000000  00000000  001279b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000828 	.word	0x08000828

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08000828 	.word	0x08000828

080002d8 <enanblePORT>:
#define GPIOJEN (1U<<9)
#define GPIOKEN (1U<<10)


void enanblePORT(GPIO_TypeDef* Port)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (Port==GPIOA) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a75      	ldr	r2, [pc, #468]	; (80004b8 <enanblePORT+0x1e0>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d110      	bne.n	800030a <enanblePORT+0x32>
		RCC->AHB4ENR |= GPIOAEN;
 80002e8:	4b74      	ldr	r3, [pc, #464]	; (80004bc <enanblePORT+0x1e4>)
 80002ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002ee:	4a73      	ldr	r2, [pc, #460]	; (80004bc <enanblePORT+0x1e4>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		//Making sure bit is changed
		while(!(RCC->AHB4ENR & GPIOAEN));
 80002f8:	bf00      	nop
 80002fa:	4b70      	ldr	r3, [pc, #448]	; (80004bc <enanblePORT+0x1e4>)
 80002fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f8      	beq.n	80002fa <enanblePORT+0x22>
		while(!(RCC->AHB4ENR & GPIOKEN));

	}else
	{
	}
}
 8000308:	e0d0      	b.n	80004ac <enanblePORT+0x1d4>
	} else if(Port==GPIOB) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a6c      	ldr	r2, [pc, #432]	; (80004c0 <enanblePORT+0x1e8>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d110      	bne.n	8000334 <enanblePORT+0x5c>
		RCC->AHB4ENR |= GPIOBEN;
 8000312:	4b6a      	ldr	r3, [pc, #424]	; (80004bc <enanblePORT+0x1e4>)
 8000314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000318:	4a68      	ldr	r2, [pc, #416]	; (80004bc <enanblePORT+0x1e4>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOBEN));
 8000322:	bf00      	nop
 8000324:	4b65      	ldr	r3, [pc, #404]	; (80004bc <enanblePORT+0x1e4>)
 8000326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800032a:	f003 0302 	and.w	r3, r3, #2
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f8      	beq.n	8000324 <enanblePORT+0x4c>
}
 8000332:	e0bb      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOC) {
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a63      	ldr	r2, [pc, #396]	; (80004c4 <enanblePORT+0x1ec>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d110      	bne.n	800035e <enanblePORT+0x86>
		RCC->AHB4ENR |= GPIOCEN;
 800033c:	4b5f      	ldr	r3, [pc, #380]	; (80004bc <enanblePORT+0x1e4>)
 800033e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000342:	4a5e      	ldr	r2, [pc, #376]	; (80004bc <enanblePORT+0x1e4>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOCEN));
 800034c:	bf00      	nop
 800034e:	4b5b      	ldr	r3, [pc, #364]	; (80004bc <enanblePORT+0x1e4>)
 8000350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f8      	beq.n	800034e <enanblePORT+0x76>
}
 800035c:	e0a6      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOD) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a59      	ldr	r2, [pc, #356]	; (80004c8 <enanblePORT+0x1f0>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d110      	bne.n	8000388 <enanblePORT+0xb0>
		RCC->AHB4ENR |= GPIODEN;
 8000366:	4b55      	ldr	r3, [pc, #340]	; (80004bc <enanblePORT+0x1e4>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a53      	ldr	r2, [pc, #332]	; (80004bc <enanblePORT+0x1e4>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIODEN));
 8000376:	bf00      	nop
 8000378:	4b50      	ldr	r3, [pc, #320]	; (80004bc <enanblePORT+0x1e4>)
 800037a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037e:	f003 0308 	and.w	r3, r3, #8
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0f8      	beq.n	8000378 <enanblePORT+0xa0>
}
 8000386:	e091      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOE) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a50      	ldr	r2, [pc, #320]	; (80004cc <enanblePORT+0x1f4>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d110      	bne.n	80003b2 <enanblePORT+0xda>
		RCC->AHB4ENR |= GPIOEEN;
 8000390:	4b4a      	ldr	r3, [pc, #296]	; (80004bc <enanblePORT+0x1e4>)
 8000392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000396:	4a49      	ldr	r2, [pc, #292]	; (80004bc <enanblePORT+0x1e4>)
 8000398:	f043 0310 	orr.w	r3, r3, #16
 800039c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOEEN));
 80003a0:	bf00      	nop
 80003a2:	4b46      	ldr	r3, [pc, #280]	; (80004bc <enanblePORT+0x1e4>)
 80003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f8      	beq.n	80003a2 <enanblePORT+0xca>
}
 80003b0:	e07c      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOF) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a46      	ldr	r2, [pc, #280]	; (80004d0 <enanblePORT+0x1f8>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d110      	bne.n	80003dc <enanblePORT+0x104>
		RCC->AHB4ENR |= GPIOFEN;
 80003ba:	4b40      	ldr	r3, [pc, #256]	; (80004bc <enanblePORT+0x1e4>)
 80003bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c0:	4a3e      	ldr	r2, [pc, #248]	; (80004bc <enanblePORT+0x1e4>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOFEN));
 80003ca:	bf00      	nop
 80003cc:	4b3b      	ldr	r3, [pc, #236]	; (80004bc <enanblePORT+0x1e4>)
 80003ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003d2:	f003 0320 	and.w	r3, r3, #32
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f8      	beq.n	80003cc <enanblePORT+0xf4>
}
 80003da:	e067      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOG) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a3d      	ldr	r2, [pc, #244]	; (80004d4 <enanblePORT+0x1fc>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d110      	bne.n	8000406 <enanblePORT+0x12e>
		RCC->AHB4ENR |= GPIOGEN;
 80003e4:	4b35      	ldr	r3, [pc, #212]	; (80004bc <enanblePORT+0x1e4>)
 80003e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ea:	4a34      	ldr	r2, [pc, #208]	; (80004bc <enanblePORT+0x1e4>)
 80003ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOGEN));
 80003f4:	bf00      	nop
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <enanblePORT+0x1e4>)
 80003f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f8      	beq.n	80003f6 <enanblePORT+0x11e>
}
 8000404:	e052      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOH) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a33      	ldr	r2, [pc, #204]	; (80004d8 <enanblePORT+0x200>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d110      	bne.n	8000430 <enanblePORT+0x158>
		RCC->AHB4ENR |= GPIOHEN;
 800040e:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <enanblePORT+0x1e4>)
 8000410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <enanblePORT+0x1e4>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOHEN));
 800041e:	bf00      	nop
 8000420:	4b26      	ldr	r3, [pc, #152]	; (80004bc <enanblePORT+0x1e4>)
 8000422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f8      	beq.n	8000420 <enanblePORT+0x148>
}
 800042e:	e03d      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOI) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2a      	ldr	r2, [pc, #168]	; (80004dc <enanblePORT+0x204>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d110      	bne.n	800045a <enanblePORT+0x182>
		RCC->AHB4ENR |= GPIOIEN;
 8000438:	4b20      	ldr	r3, [pc, #128]	; (80004bc <enanblePORT+0x1e4>)
 800043a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043e:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <enanblePORT+0x1e4>)
 8000440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOIEN));
 8000448:	bf00      	nop
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <enanblePORT+0x1e4>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f8      	beq.n	800044a <enanblePORT+0x172>
}
 8000458:	e028      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOJ) {
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <enanblePORT+0x208>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d110      	bne.n	8000484 <enanblePORT+0x1ac>
		RCC->AHB4ENR |= GPIOJEN;
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <enanblePORT+0x1e4>)
 8000464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <enanblePORT+0x1e4>)
 800046a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOJEN));
 8000472:	bf00      	nop
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <enanblePORT+0x1e4>)
 8000476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f8      	beq.n	8000474 <enanblePORT+0x19c>
}
 8000482:	e013      	b.n	80004ac <enanblePORT+0x1d4>
	}else if(Port==GPIOK) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <enanblePORT+0x20c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d10f      	bne.n	80004ac <enanblePORT+0x1d4>
		RCC->AHB4ENR |= GPIOKEN;
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <enanblePORT+0x1e4>)
 800048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <enanblePORT+0x1e4>)
 8000494:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOKEN));
 800049c:	bf00      	nop
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <enanblePORT+0x1e4>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0f8      	beq.n	800049e <enanblePORT+0x1c6>
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	58020000 	.word	0x58020000
 80004bc:	58024400 	.word	0x58024400
 80004c0:	58020400 	.word	0x58020400
 80004c4:	58020800 	.word	0x58020800
 80004c8:	58020c00 	.word	0x58020c00
 80004cc:	58021000 	.word	0x58021000
 80004d0:	58021400 	.word	0x58021400
 80004d4:	58021800 	.word	0x58021800
 80004d8:	58021c00 	.word	0x58021c00
 80004dc:	58022000 	.word	0x58022000
 80004e0:	58022400 	.word	0x58022400
 80004e4:	58022800 	.word	0x58022800

080004e8 <Set_GPIO_MODER>:
 * 2: Alternate function mode
 * 3: Analog mode (reset state)
 * Note : If type argument is entered wrong pin configuration is becomes Input mode
 * */
void Set_GPIO_MODER(GPIO_TypeDef* Port,short Pin,short type)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	807b      	strh	r3, [r7, #2]
 80004f4:	4613      	mov	r3, r2
 80004f6:	803b      	strh	r3, [r7, #0]
	bool bit_0, bit_1 ;
	switch(type)
 80004f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d81f      	bhi.n	8000540 <Set_GPIO_MODER+0x58>
 8000500:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <Set_GPIO_MODER+0x20>)
 8000502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000506:	bf00      	nop
 8000508:	08000519 	.word	0x08000519
 800050c:	08000523 	.word	0x08000523
 8000510:	0800052d 	.word	0x0800052d
 8000514:	08000537 	.word	0x08000537
	{
	case 0 :
		bit_0 = false ;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800051c:	2300      	movs	r3, #0
 800051e:	73bb      	strb	r3, [r7, #14]
		break ;
 8000520:	e012      	b.n	8000548 <Set_GPIO_MODER+0x60>
	case 1 :
		bit_0 =  true ;
 8000522:	2301      	movs	r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8000526:	2300      	movs	r3, #0
 8000528:	73bb      	strb	r3, [r7, #14]
		break;
 800052a:	e00d      	b.n	8000548 <Set_GPIO_MODER+0x60>
	case 2 :
		bit_0 = false ;
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8000530:	2301      	movs	r3, #1
 8000532:	73bb      	strb	r3, [r7, #14]
		break;
 8000534:	e008      	b.n	8000548 <Set_GPIO_MODER+0x60>
	case 3 :
		bit_0 = true ;
 8000536:	2301      	movs	r3, #1
 8000538:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 800053a:	2301      	movs	r3, #1
 800053c:	73bb      	strb	r3, [r7, #14]
		break;
 800053e:	e003      	b.n	8000548 <Set_GPIO_MODER+0x60>
	default:
		bit_0 = false;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
		bit_1 = false;
 8000544:	2300      	movs	r3, #0
 8000546:	73bb      	strb	r3, [r7, #14]
	}
	if(bit_0)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00b      	beq.n	8000566 <Set_GPIO_MODER+0x7e>
	{
		Port->MODER |= (1U<<(Pin*2));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	2101      	movs	r1, #1
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	431a      	orrs	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	e00b      	b.n	800057e <Set_GPIO_MODER+0x96>
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
	}
	if(bit_1)
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00c      	beq.n	800059e <Set_GPIO_MODER+0xb6>
	{
		Port->MODER |= (1U<<((Pin*2)+1));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	3301      	adds	r3, #1
 8000590:	2101      	movs	r1, #1
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	601a      	str	r2, [r3, #0]
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)+1));
	}
}
 800059c:	e00c      	b.n	80005b8 <Set_GPIO_MODER+0xd0>
		Port->MODER &= ~(1U<<((Pin*2)+1));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	3301      	adds	r3, #1
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	401a      	ands	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <Set_GPIO_BSRR>:
 * isReset Type : boolean{true(1), false(0)}
 * 0: No action on the corresponding ODRx bit
 * 1: Resets/Sets the corresponding ODRx bit
 */
void Set_GPIO_BSRR(GPIO_TypeDef* Port,short pin, bool isItReset)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	807b      	strh	r3, [r7, #2]
 80005d0:	4613      	mov	r3, r2
 80005d2:	707b      	strb	r3, [r7, #1]
	if(isItReset)
 80005d4:	787b      	ldrb	r3, [r7, #1]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00b      	beq.n	80005f2 <Set_GPIO_BSRR+0x2e>
	{
		Port->BSRR |= (1U<<(pin+16));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005e2:	3310      	adds	r3, #16
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	431a      	orrs	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	619a      	str	r2, [r3, #24]
	}else
	{
		Port->BSRR |= (1U<<(pin));
	}
}
 80005f0:	e009      	b.n	8000606 <Set_GPIO_BSRR+0x42>
		Port->BSRR |= (1U<<(pin));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005fa:	2101      	movs	r1, #1
 80005fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000600:	431a      	orrs	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	619a      	str	r2, [r3, #24]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <systickDelayMs>:
#define CTRL_ENABLE		 (1U<<0)
#define CTRL_CLKSRC		 (1U<<2)
#define CTRL_COUNTFLAG	 (1U<<16)

void systickDelayMs(int delay)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	/*Configure systick*/
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD =SYSTICK_LOAD_VAL;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <systickDelayMs+0x50>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <systickDelayMs+0x54>)
 8000620:	605a      	str	r2, [r3, #4]
	/*Clear systick current value register*/
	SysTick->VAL = 0 ;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <systickDelayMs+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
	/*Enable systick and select clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <systickDelayMs+0x50>)
 800062a:	2205      	movs	r2, #5
 800062c:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i<delay ; i++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e009      	b.n	8000648 <systickDelayMs+0x34>
	{
		//Wait until CountFlag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 );
 8000634:	bf00      	nop
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <systickDelayMs+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <systickDelayMs+0x22>
	for(int i = 0 ; i<delay ; i++)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	3301      	adds	r3, #1
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf1      	blt.n	8000634 <systickDelayMs+0x20>
	}
	SysTick->CTRL = 0 ;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <systickDelayMs+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010
 8000668:	0009c400 	.word	0x0009c400

0800066c <ld1_init>:
#include <User_led.h>
#include "stm32h745xx.h"
#include <stdbool.h>

void ld1_init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	enanblePORT(GPIOB);
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <ld1_init+0x18>)
 8000672:	f7ff fe31 	bl	80002d8 <enanblePORT>
	Set_GPIO_MODER(GPIOB, 0,1);
 8000676:	2201      	movs	r2, #1
 8000678:	2100      	movs	r1, #0
 800067a:	4802      	ldr	r0, [pc, #8]	; (8000684 <ld1_init+0x18>)
 800067c:	f7ff ff34 	bl	80004e8 <Set_GPIO_MODER>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58020400 	.word	0x58020400

08000688 <ld2_init>:
void ld2_init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	enanblePORT(GPIOE);
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <ld2_init+0x18>)
 800068e:	f7ff fe23 	bl	80002d8 <enanblePORT>
	Set_GPIO_MODER(GPIOE, 1, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	2101      	movs	r1, #1
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <ld2_init+0x18>)
 8000698:	f7ff ff26 	bl	80004e8 <Set_GPIO_MODER>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58021000 	.word	0x58021000

080006a4 <ld3_init>:
void ld3_init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	enanblePORT(GPIOB);
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <ld3_init+0x18>)
 80006aa:	f7ff fe15 	bl	80002d8 <enanblePORT>
	Set_GPIO_MODER(GPIOB, 14, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	210e      	movs	r1, #14
 80006b2:	4802      	ldr	r0, [pc, #8]	; (80006bc <ld3_init+0x18>)
 80006b4:	f7ff ff18 	bl	80004e8 <Set_GPIO_MODER>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58020400 	.word	0x58020400

080006c0 <ld1_on>:
void ld1_on(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 0, false);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	4802      	ldr	r0, [pc, #8]	; (80006d4 <ld1_on+0x14>)
 80006ca:	f7ff ff7b 	bl	80005c4 <Set_GPIO_BSRR>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400

080006d8 <ld2_on>:
void ld2_on(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOE, 1, false);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <ld2_on+0x14>)
 80006e2:	f7ff ff6f 	bl	80005c4 <Set_GPIO_BSRR>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58021000 	.word	0x58021000

080006f0 <ld3_on>:

void ld3_on(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 14, false);
 80006f4:	2200      	movs	r2, #0
 80006f6:	210e      	movs	r1, #14
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <ld3_on+0x14>)
 80006fa:	f7ff ff63 	bl	80005c4 <Set_GPIO_BSRR>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	58020400 	.word	0x58020400

08000708 <ld1_off>:
void ld1_off(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 0, true);
 800070c:	2201      	movs	r2, #1
 800070e:	2100      	movs	r1, #0
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <ld1_off+0x14>)
 8000712:	f7ff ff57 	bl	80005c4 <Set_GPIO_BSRR>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58020400 	.word	0x58020400

08000720 <ld2_off>:
void ld2_off(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOE, 1, true);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	4802      	ldr	r0, [pc, #8]	; (8000734 <ld2_off+0x14>)
 800072a:	f7ff ff4b 	bl	80005c4 <Set_GPIO_BSRR>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58021000 	.word	0x58021000

08000738 <ld3_off>:

void ld3_off(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	Set_GPIO_BSRR(GPIOB, 14, true);
 800073c:	2201      	movs	r2, #1
 800073e:	210e      	movs	r1, #14
 8000740:	4802      	ldr	r0, [pc, #8]	; (800074c <ld3_off+0x14>)
 8000742:	f7ff ff3f 	bl	80005c4 <Set_GPIO_BSRR>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58020400 	.word	0x58020400

08000750 <main>:
#include "User_led.h"
#include "Systick.h"
#include "stm32h745xx.h"

int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	ld1_init();
 8000754:	f7ff ff8a 	bl	800066c <ld1_init>
	ld2_init();
 8000758:	f7ff ff96 	bl	8000688 <ld2_init>
	ld3_init();
 800075c:	f7ff ffa2 	bl	80006a4 <ld3_init>

	while(1)
	{
		ld1_on();
 8000760:	f7ff ffae 	bl	80006c0 <ld1_on>
		systickDelayMs(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f7ff ff55 	bl	8000614 <systickDelayMs>
		ld1_off();
 800076a:	f7ff ffcd 	bl	8000708 <ld1_off>
		ld2_on();
 800076e:	f7ff ffb3 	bl	80006d8 <ld2_on>
		systickDelayMs(100);
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f7ff ff4e 	bl	8000614 <systickDelayMs>
		ld2_off();
 8000778:	f7ff ffd2 	bl	8000720 <ld2_off>
		ld3_on();
 800077c:	f7ff ffb8 	bl	80006f0 <ld3_on>
		systickDelayMs(100);
 8000780:	2064      	movs	r0, #100	; 0x64
 8000782:	f7ff ff47 	bl	8000614 <systickDelayMs>
		ld3_off();
 8000786:	f7ff ffd7 	bl	8000738 <ld3_off>
		ld1_on();
 800078a:	e7e9      	b.n	8000760 <main+0x10>

0800078c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800078e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000790:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490d      	ldr	r1, [pc, #52]	; (80007cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0a      	ldr	r4, [pc, #40]	; (80007d8 <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ba:	f000 f811 	bl	80007e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff ffc7 	bl	8000750 <main>

080007c2 <LoopForever>:

LoopForever:
    b LoopForever
 80007c2:	e7fe      	b.n	80007c2 <LoopForever>
  ldr   r0, =_estack
 80007c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007cc:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 80007d0:	08000848 	.word	0x08000848
  ldr r2, =_sbss
 80007d4:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 80007d8:	2400001c 	.word	0x2400001c

080007dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007dc:	e7fe      	b.n	80007dc <ADC1_2_IRQHandler>
	...

080007e0 <__libc_init_array>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	4d0d      	ldr	r5, [pc, #52]	; (8000818 <__libc_init_array+0x38>)
 80007e4:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__libc_init_array+0x3c>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	2600      	movs	r6, #0
 80007ec:	42a6      	cmp	r6, r4
 80007ee:	d109      	bne.n	8000804 <__libc_init_array+0x24>
 80007f0:	4d0b      	ldr	r5, [pc, #44]	; (8000820 <__libc_init_array+0x40>)
 80007f2:	4c0c      	ldr	r4, [pc, #48]	; (8000824 <__libc_init_array+0x44>)
 80007f4:	f000 f818 	bl	8000828 <_init>
 80007f8:	1b64      	subs	r4, r4, r5
 80007fa:	10a4      	asrs	r4, r4, #2
 80007fc:	2600      	movs	r6, #0
 80007fe:	42a6      	cmp	r6, r4
 8000800:	d105      	bne.n	800080e <__libc_init_array+0x2e>
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f855 3b04 	ldr.w	r3, [r5], #4
 8000808:	4798      	blx	r3
 800080a:	3601      	adds	r6, #1
 800080c:	e7ee      	b.n	80007ec <__libc_init_array+0xc>
 800080e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000812:	4798      	blx	r3
 8000814:	3601      	adds	r6, #1
 8000816:	e7f2      	b.n	80007fe <__libc_init_array+0x1e>
 8000818:	08000840 	.word	0x08000840
 800081c:	08000840 	.word	0x08000840
 8000820:	08000840 	.word	0x08000840
 8000824:	08000844 	.word	0x08000844

08000828 <_init>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	bf00      	nop
 800082c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800082e:	bc08      	pop	{r3}
 8000830:	469e      	mov	lr, r3
 8000832:	4770      	bx	lr

08000834 <_fini>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr
