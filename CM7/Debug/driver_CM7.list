
driver_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001e18  08001e20  00011e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001e18  08001e18  00011e20  2**0
                  CONTENTS
  4 .ARM          00000000  08001e18  08001e18  00011e20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e18  08001e20  00011e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e18  08001e18  00011e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  24000000  24000000  00011e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  24000000  08001e20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400001c  08001e20  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011e20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000312d  00000000  00000000  00011e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e0  00000000  00000000  00014f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00015960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00015c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a05a  00000000  00000000  00015f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003009  00000000  00000000  0003ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f01bb  00000000  00000000  00042fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c18  00000000  00000000  001331cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001e00 	.word	0x08001e00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08001e00 	.word	0x08001e00

080002d8 <decimalToBinary>:

#define HSEON	(1U<<16) // HSE clock enable
#define HSERDY	(1U<<17) // HSE clock ready flag

long decimalToBinary(int decimalnum)
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    long binarynum = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
    int rem, temp = 1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]

    while (decimalnum!=0)
 80002e8:	e019      	b.n	800031e <decimalToBinary+0x46>
    {
        rem = decimalnum%2;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	bfb8      	it	lt
 80002f4:	425b      	neglt	r3, r3
 80002f6:	60fb      	str	r3, [r7, #12]
        decimalnum = decimalnum / 2;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	da00      	bge.n	8000300 <decimalToBinary+0x28>
 80002fe:	3301      	adds	r3, #1
 8000300:	105b      	asrs	r3, r3, #1
 8000302:	607b      	str	r3, [r7, #4]
        binarynum = binarynum + rem*temp;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	693a      	ldr	r2, [r7, #16]
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	4413      	add	r3, r2
 8000310:	617b      	str	r3, [r7, #20]
        temp = temp * 10;
 8000312:	693a      	ldr	r2, [r7, #16]
 8000314:	4613      	mov	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	613b      	str	r3, [r7, #16]
    while (decimalnum!=0)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1e2      	bne.n	80002ea <decimalToBinary+0x12>
    }
    return binarynum;
 8000324:	697b      	ldr	r3, [r7, #20]
}
 8000326:	4618      	mov	r0, r3
 8000328:	371c      	adds	r7, #28
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
	...

08000334 <PLLSRC_Select>:
 * 2: HSE selected as PLL clock (hse_ck)
 * 3: No clock send to DIVMx divider and PLLs
 *
 */
void PLLSRC_Select(short select)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	80fb      	strh	r3, [r7, #6]
	if(select== 0)
 800033e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10c      	bne.n	8000360 <PLLSRC_Select+0x2c>
	{
		RCC->PLLCKSELR &= ~(1U<<0);
 8000346:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <PLLSRC_Select+0x94>)
 8000348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800034a:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <PLLSRC_Select+0x94>)
 800034c:	f023 0301 	bic.w	r3, r3, #1
 8000350:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <PLLSRC_Select+0x94>)
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <PLLSRC_Select+0x94>)
 8000358:	f023 0302 	bic.w	r3, r3, #2
 800035c:	6293      	str	r3, [r2, #40]	; 0x28
	}else
	{
		RCC->PLLCKSELR |=  (1U<<0);
		RCC->PLLCKSELR |=  (1U<<1);
	}
}
 800035e:	e02d      	b.n	80003bc <PLLSRC_Select+0x88>
	}else if(select ==1)
 8000360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d10c      	bne.n	8000382 <PLLSRC_Select+0x4e>
		RCC->PLLCKSELR |=  (1U<<0);
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <PLLSRC_Select+0x94>)
 800036a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <PLLSRC_Select+0x94>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR &= ~(1U<<1);
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <PLLSRC_Select+0x94>)
 8000376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <PLLSRC_Select+0x94>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000380:	e01c      	b.n	80003bc <PLLSRC_Select+0x88>
	}else if(select == 2)
 8000382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000386:	2b02      	cmp	r3, #2
 8000388:	d10c      	bne.n	80003a4 <PLLSRC_Select+0x70>
		RCC->PLLCKSELR &= ~(1U<<0);
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <PLLSRC_Select+0x94>)
 800038c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <PLLSRC_Select+0x94>)
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <PLLSRC_Select+0x94>)
 8000398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039a:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <PLLSRC_Select+0x94>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80003a2:	e00b      	b.n	80003bc <PLLSRC_Select+0x88>
		RCC->PLLCKSELR |=  (1U<<0);
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <PLLSRC_Select+0x94>)
 80003a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <PLLSRC_Select+0x94>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6293      	str	r3, [r2, #40]	; 0x28
		RCC->PLLCKSELR |=  (1U<<1);
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <PLLSRC_Select+0x94>)
 80003b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <PLLSRC_Select+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6293      	str	r3, [r2, #40]	; 0x28
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	58024400 	.word	0x58024400

080003cc <DIVM1>:
 * 32: division by 32 (default after reset)
 * ...
 * 63: division by 63
 */
void DIVM1(short prescaler)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	80fb      	strh	r3, [r7, #6]
	long temp = decimalToBinary(prescaler);
 80003d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff7c 	bl	80002d8 <decimalToBinary>
 80003e0:	6178      	str	r0, [r7, #20]
	for(int i = 4 ; i<10; i++)
 80003e2:	2304      	movs	r3, #4
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	e030      	b.n	800044a <DIVM1+0x7e>
	{
		short s =  ( temp % 10);
 80003e8:	697a      	ldr	r2, [r7, #20]
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <DIVM1+0x90>)
 80003ec:	fb83 1302 	smull	r1, r3, r3, r2
 80003f0:	1099      	asrs	r1, r3, #2
 80003f2:	17d3      	asrs	r3, r2, #31
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	460b      	mov	r3, r1
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	440b      	add	r3, r1
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	1ad1      	subs	r1, r2, r3
 8000400:	460b      	mov	r3, r1
 8000402:	81fb      	strh	r3, [r7, #14]
		if(s==1)
 8000404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d109      	bne.n	8000420 <DIVM1+0x54>
		{
			RCC->PLLCKSELR |= (1U<<i);
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <DIVM1+0x94>)
 800040e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000410:	2101      	movs	r1, #1
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	fa01 f303 	lsl.w	r3, r1, r3
 8000418:	4911      	ldr	r1, [pc, #68]	; (8000460 <DIVM1+0x94>)
 800041a:	4313      	orrs	r3, r2
 800041c:	628b      	str	r3, [r1, #40]	; 0x28
 800041e:	e009      	b.n	8000434 <DIVM1+0x68>
		}else
		{
			RCC->PLLCKSELR &= ~(1U<<i);
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <DIVM1+0x94>)
 8000422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000424:	2101      	movs	r1, #1
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	490c      	ldr	r1, [pc, #48]	; (8000460 <DIVM1+0x94>)
 8000430:	4013      	ands	r3, r2
 8000432:	628b      	str	r3, [r1, #40]	; 0x28
		}
		temp /= 10;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <DIVM1+0x90>)
 8000438:	fb82 1203 	smull	r1, r2, r2, r3
 800043c:	1092      	asrs	r2, r2, #2
 800043e:	17db      	asrs	r3, r3, #31
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	617b      	str	r3, [r7, #20]
	for(int i = 4 ; i<10; i++)
 8000444:	693b      	ldr	r3, [r7, #16]
 8000446:	3301      	adds	r3, #1
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	2b09      	cmp	r3, #9
 800044e:	ddcb      	ble.n	80003e8 <DIVM1+0x1c>
	}

}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	66666667 	.word	0x66666667
 8000460:	58024400 	.word	0x58024400

08000464 <SystemClockStatus>:
 * 2: HSE used as system clock (hse_ck)
 * 3: PLL1 used as system clock (pll1_p_ck)
 * others: Reserved
 */
void  SystemClockStatus(short CFGR)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]
	RCC->CFGR &= ~(1U<<2);
 800046e:	4b50      	ldr	r3, [pc, #320]	; (80005b0 <SystemClockStatus+0x14c>)
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	4a4f      	ldr	r2, [pc, #316]	; (80005b0 <SystemClockStatus+0x14c>)
 8000474:	f023 0304 	bic.w	r3, r3, #4
 8000478:	6113      	str	r3, [r2, #16]
	bool bit_0, bit_1;
	switch(CFGR)
 800047a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047e:	2b03      	cmp	r3, #3
 8000480:	d81e      	bhi.n	80004c0 <SystemClockStatus+0x5c>
 8000482:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <SystemClockStatus+0x24>)
 8000484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000488:	08000499 	.word	0x08000499
 800048c:	080004a3 	.word	0x080004a3
 8000490:	080004ad 	.word	0x080004ad
 8000494:	080004b7 	.word	0x080004b7
	{
	case 0:
		bit_0 = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	73bb      	strb	r3, [r7, #14]
		break;
 80004a0:	e013      	b.n	80004ca <SystemClockStatus+0x66>
	case 1:
		bit_0 = 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73bb      	strb	r3, [r7, #14]
		break;
 80004aa:	e00e      	b.n	80004ca <SystemClockStatus+0x66>
	case 2:
		bit_0 = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73bb      	strb	r3, [r7, #14]
			break;
 80004b4:	e009      	b.n	80004ca <SystemClockStatus+0x66>
	case 3:
		bit_0 = 1;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
		bit_1 = 1;
 80004ba:	2301      	movs	r3, #1
 80004bc:	73bb      	strb	r3, [r7, #14]
			break;
 80004be:	e004      	b.n	80004ca <SystemClockStatus+0x66>
	default:
		bit_0 = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
		bit_1 = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	73bb      	strb	r3, [r7, #14]
			break;
 80004c8:	bf00      	nop

	}


	if(bit_0)
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d006      	beq.n	80004de <SystemClockStatus+0x7a>
	{
		RCC-> CFGR |= (1U<<0);
 80004d0:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <SystemClockStatus+0x14c>)
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	4a36      	ldr	r2, [pc, #216]	; (80005b0 <SystemClockStatus+0x14c>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6113      	str	r3, [r2, #16]
 80004dc:	e005      	b.n	80004ea <SystemClockStatus+0x86>
	}else
	{
		RCC-> CFGR &= ~(1U<<0);
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <SystemClockStatus+0x14c>)
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	4a33      	ldr	r2, [pc, #204]	; (80005b0 <SystemClockStatus+0x14c>)
 80004e4:	f023 0301 	bic.w	r3, r3, #1
 80004e8:	6113      	str	r3, [r2, #16]

	}
	if(bit_1)
 80004ea:	7bbb      	ldrb	r3, [r7, #14]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d006      	beq.n	80004fe <SystemClockStatus+0x9a>
		{
			RCC-> CFGR |= (1U<<1);
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <SystemClockStatus+0x14c>)
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <SystemClockStatus+0x14c>)
 80004f6:	f043 0302 	orr.w	r3, r3, #2
 80004fa:	6113      	str	r3, [r2, #16]
 80004fc:	e005      	b.n	800050a <SystemClockStatus+0xa6>
		}else
		{
			RCC-> CFGR &= ~(1U<<1);
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <SystemClockStatus+0x14c>)
 8000500:	691b      	ldr	r3, [r3, #16]
 8000502:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <SystemClockStatus+0x14c>)
 8000504:	f023 0302 	bic.w	r3, r3, #2
 8000508:	6113      	str	r3, [r2, #16]

		}
		if(bit_1==0){
 800050a:	7bbb      	ldrb	r3, [r7, #14]
 800050c:	f083 0301 	eor.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d024      	beq.n	8000560 <SystemClockStatus+0xfc>
			if(bit_0==0)
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f083 0301 	eor.w	r3, r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00f      	beq.n	8000542 <SystemClockStatus+0xde>
			{
			    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 8000522:	bf00      	nop
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClockStatus+0x14c>)
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	f003 0208 	and.w	r2, r3, #8
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	429a      	cmp	r2, r3
 8000530:	d1f8      	bne.n	8000524 <SystemClockStatus+0xc0>
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SystemClockStatus+0x14c>)
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	f003 0210 	and.w	r2, r3, #16
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	429a      	cmp	r2, r3
 800053e:	d1f1      	bne.n	8000524 <SystemClockStatus+0xc0>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));

						}
		}

}
 8000540:	e030      	b.n	80005a4 <SystemClockStatus+0x140>
			    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==bit_1)))));
 8000542:	bf00      	nop
 8000544:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <SystemClockStatus+0x14c>)
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	2b08      	cmp	r3, #8
 800054e:	d1f9      	bne.n	8000544 <SystemClockStatus+0xe0>
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <SystemClockStatus+0x14c>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	f003 0210 	and.w	r2, r3, #16
 8000558:	7bbb      	ldrb	r3, [r7, #14]
 800055a:	429a      	cmp	r2, r3
 800055c:	d1f2      	bne.n	8000544 <SystemClockStatus+0xe0>
}
 800055e:	e021      	b.n	80005a4 <SystemClockStatus+0x140>
			if(bit_0==0)
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f083 0301 	eor.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00e      	beq.n	800058a <SystemClockStatus+0x126>
						    while (!(((((RCC->CFGR & (1U<<3))==bit_0) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 800056c:	bf00      	nop
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <SystemClockStatus+0x14c>)
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	f003 0208 	and.w	r2, r3, #8
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	429a      	cmp	r2, r3
 800057a:	d1f8      	bne.n	800056e <SystemClockStatus+0x10a>
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <SystemClockStatus+0x14c>)
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	f003 0310 	and.w	r3, r3, #16
 8000584:	2b10      	cmp	r3, #16
 8000586:	d1f2      	bne.n	800056e <SystemClockStatus+0x10a>
}
 8000588:	e00c      	b.n	80005a4 <SystemClockStatus+0x140>
						    while (!(((((RCC->CFGR & (1U<<3))==(1U<<3)) && ((RCC->CFGR & (1U<<4))==(1U<<4))))));
 800058a:	bf00      	nop
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <SystemClockStatus+0x14c>)
 800058e:	691b      	ldr	r3, [r3, #16]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	2b08      	cmp	r3, #8
 8000596:	d1f9      	bne.n	800058c <SystemClockStatus+0x128>
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <SystemClockStatus+0x14c>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	2b10      	cmp	r3, #16
 80005a2:	d1f3      	bne.n	800058c <SystemClockStatus+0x128>
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	58024400 	.word	0x58024400

080005b4 <PLL1DIVR>:
 * 3: pll1_q_ck = vco1_ck / 4
 * ...
 * 127: pll1_q_ck = vco1_ck / 128
 */
void PLL1DIVR(uint8_t DIVN1, short DIVP1, short DIVQ1, short DIVR1)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
	if(DIVN1<=0x1FF && DIVN1>=0x000){
	RCC->PLL1DIVR  = DIVN1  ;
 80005d2:	4a5f      	ldr	r2, [pc, #380]	; (8000750 <PLL1DIVR+0x19c>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
	long temp = decimalToBinary(DIVP1);
 80005d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe7b 	bl	80002d8 <decimalToBinary>
 80005e2:	61f8      	str	r0, [r7, #28]
		for(int i = 9 ; i<16; i++)
 80005e4:	2309      	movs	r3, #9
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	e030      	b.n	800064c <PLL1DIVR+0x98>
		{
			short s =  ( temp % 10);
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	4b59      	ldr	r3, [pc, #356]	; (8000754 <PLL1DIVR+0x1a0>)
 80005ee:	fb83 1302 	smull	r1, r3, r3, r2
 80005f2:	1099      	asrs	r1, r3, #2
 80005f4:	17d3      	asrs	r3, r2, #31
 80005f6:	1ac9      	subs	r1, r1, r3
 80005f8:	460b      	mov	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1ad1      	subs	r1, r2, r3
 8000602:	460b      	mov	r3, r1
 8000604:	817b      	strh	r3, [r7, #10]
			if(s==1)
 8000606:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d109      	bne.n	8000622 <PLL1DIVR+0x6e>
			{
				RCC->PLL1DIVR |= (1U<<i);
 800060e:	4b50      	ldr	r3, [pc, #320]	; (8000750 <PLL1DIVR+0x19c>)
 8000610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000612:	2101      	movs	r1, #1
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	494d      	ldr	r1, [pc, #308]	; (8000750 <PLL1DIVR+0x19c>)
 800061c:	4313      	orrs	r3, r2
 800061e:	630b      	str	r3, [r1, #48]	; 0x30
 8000620:	e009      	b.n	8000636 <PLL1DIVR+0x82>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <PLL1DIVR+0x19c>)
 8000624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000626:	2101      	movs	r1, #1
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43db      	mvns	r3, r3
 8000630:	4947      	ldr	r1, [pc, #284]	; (8000750 <PLL1DIVR+0x19c>)
 8000632:	4013      	ands	r3, r2
 8000634:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	4a46      	ldr	r2, [pc, #280]	; (8000754 <PLL1DIVR+0x1a0>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1092      	asrs	r2, r2, #2
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	61fb      	str	r3, [r7, #28]
		for(int i = 9 ; i<16; i++)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3301      	adds	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	2b0f      	cmp	r3, #15
 8000650:	ddcb      	ble.n	80005ea <PLL1DIVR+0x36>
		}
	temp = decimalToBinary(DIVQ1);
 8000652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff fe3e 	bl	80002d8 <decimalToBinary>
 800065c:	61f8      	str	r0, [r7, #28]
		for(int i = 16; i<23; i++)
 800065e:	2310      	movs	r3, #16
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e030      	b.n	80006c6 <PLL1DIVR+0x112>
		{
			short s =  ( temp % 10);
 8000664:	69fa      	ldr	r2, [r7, #28]
 8000666:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <PLL1DIVR+0x1a0>)
 8000668:	fb83 1302 	smull	r1, r3, r3, r2
 800066c:	1099      	asrs	r1, r3, #2
 800066e:	17d3      	asrs	r3, r2, #31
 8000670:	1ac9      	subs	r1, r1, r3
 8000672:	460b      	mov	r3, r1
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	440b      	add	r3, r1
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	1ad1      	subs	r1, r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	81bb      	strh	r3, [r7, #12]
			if(s==1)
 8000680:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d109      	bne.n	800069c <PLL1DIVR+0xe8>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000688:	4b31      	ldr	r3, [pc, #196]	; (8000750 <PLL1DIVR+0x19c>)
 800068a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068c:	2101      	movs	r1, #1
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	492e      	ldr	r1, [pc, #184]	; (8000750 <PLL1DIVR+0x19c>)
 8000696:	4313      	orrs	r3, r2
 8000698:	630b      	str	r3, [r1, #48]	; 0x30
 800069a:	e009      	b.n	80006b0 <PLL1DIVR+0xfc>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <PLL1DIVR+0x19c>)
 800069e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a0:	2101      	movs	r1, #1
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4929      	ldr	r1, [pc, #164]	; (8000750 <PLL1DIVR+0x19c>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <PLL1DIVR+0x1a0>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1092      	asrs	r2, r2, #2
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	61fb      	str	r3, [r7, #28]
		for(int i = 16; i<23; i++)
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	3301      	adds	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b16      	cmp	r3, #22
 80006ca:	ddcb      	ble.n	8000664 <PLL1DIVR+0xb0>
		}
	temp = decimalToBinary(DIVR1);
 80006cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe01 	bl	80002d8 <decimalToBinary>
 80006d6:	61f8      	str	r0, [r7, #28]
		for(int i =24 ; i<31; i++)
 80006d8:	2318      	movs	r3, #24
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	e030      	b.n	8000740 <PLL1DIVR+0x18c>
		{
			short s =  ( temp % 10);
 80006de:	69fa      	ldr	r2, [r7, #28]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <PLL1DIVR+0x1a0>)
 80006e2:	fb83 1302 	smull	r1, r3, r3, r2
 80006e6:	1099      	asrs	r1, r3, #2
 80006e8:	17d3      	asrs	r3, r2, #31
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	460b      	mov	r3, r1
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	1ad1      	subs	r1, r2, r3
 80006f6:	460b      	mov	r3, r1
 80006f8:	81fb      	strh	r3, [r7, #14]
			if(s==1)
 80006fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d109      	bne.n	8000716 <PLL1DIVR+0x162>
			{
				RCC->PLL1DIVR |= (1U<<i);
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <PLL1DIVR+0x19c>)
 8000704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000706:	2101      	movs	r1, #1
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	4910      	ldr	r1, [pc, #64]	; (8000750 <PLL1DIVR+0x19c>)
 8000710:	4313      	orrs	r3, r2
 8000712:	630b      	str	r3, [r1, #48]	; 0x30
 8000714:	e009      	b.n	800072a <PLL1DIVR+0x176>
			}else
			{
				RCC->PLL1DIVR &= ~(1U<<i);
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <PLL1DIVR+0x19c>)
 8000718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071a:	2101      	movs	r1, #1
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	490a      	ldr	r1, [pc, #40]	; (8000750 <PLL1DIVR+0x19c>)
 8000726:	4013      	ands	r3, r2
 8000728:	630b      	str	r3, [r1, #48]	; 0x30
			}
			temp /= 10;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <PLL1DIVR+0x1a0>)
 800072e:	fb82 1203 	smull	r1, r2, r2, r3
 8000732:	1092      	asrs	r2, r2, #2
 8000734:	17db      	asrs	r3, r3, #31
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	61fb      	str	r3, [r7, #28]
		for(int i =24 ; i<31; i++)
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3301      	adds	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2b1e      	cmp	r3, #30
 8000744:	ddcb      	ble.n	80006de <PLL1DIVR+0x12a>
	{
		//Wrong Configuration
		while(1);
	}

}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3724      	adds	r7, #36	; 0x24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	58024400 	.word	0x58024400
 8000754:	66666667 	.word	0x66666667

08000758 <input_frequency_range>:
 *  1: The PLL1 input (ref1_ck) clock range frequency is between 2 and 4 MHz
 *  2: The PLL1 input (ref1_ck) clock range frequency is between 4 and 8 MHz
 *  3: The PLL1 input (ref1_ck) clock range frequency is between 8 and 16 MHz
 */
void input_frequency_range (short PLL1RGE)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	switch(PLL1RGE)
 8000762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d83d      	bhi.n	80007e6 <input_frequency_range+0x8e>
 800076a:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <input_frequency_range+0x18>)
 800076c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000770:	08000781 	.word	0x08000781
 8000774:	0800079b 	.word	0x0800079b
 8000778:	080007b5 	.word	0x080007b5
 800077c:	080007cf 	.word	0x080007cf
	{
	case 0 :
		RCC->PLLCFGR &= ~(1U<<2);
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <input_frequency_range+0xb4>)
 8000782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <input_frequency_range+0xb4>)
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <input_frequency_range+0xb4>)
 800078e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000790:	4a1e      	ldr	r2, [pc, #120]	; (800080c <input_frequency_range+0xb4>)
 8000792:	f023 0308 	bic.w	r3, r3, #8
 8000796:	62d3      	str	r3, [r2, #44]	; 0x2c
		break ;
 8000798:	e032      	b.n	8000800 <input_frequency_range+0xa8>
	case 1 :
		RCC->PLLCFGR |= (1U<<2);
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <input_frequency_range+0xb4>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <input_frequency_range+0xb4>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <input_frequency_range+0xb4>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <input_frequency_range+0xb4>)
 80007ac:	f023 0308 	bic.w	r3, r3, #8
 80007b0:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80007b2:	e025      	b.n	8000800 <input_frequency_range+0xa8>
	case 2 :
		RCC->PLLCFGR |= (1U<<3);
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <input_frequency_range+0xb4>)
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <input_frequency_range+0xb4>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<2);
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <input_frequency_range+0xb4>)
 80007c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c4:	4a11      	ldr	r2, [pc, #68]	; (800080c <input_frequency_range+0xb4>)
 80007c6:	f023 0304 	bic.w	r3, r3, #4
 80007ca:	62d3      	str	r3, [r2, #44]	; 0x2c
		break;
 80007cc:	e018      	b.n	8000800 <input_frequency_range+0xa8>
	case 3 :
		RCC->PLLCFGR |= (1U<<3);
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <input_frequency_range+0xb4>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <input_frequency_range+0xb4>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR |= (1U<<2);
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <input_frequency_range+0xb4>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <input_frequency_range+0xb4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	default:
		RCC->PLLCFGR &= ~(1U<<2);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <input_frequency_range+0xb4>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <input_frequency_range+0xb4>)
 80007ec:	f023 0304 	bic.w	r3, r3, #4
 80007f0:	62d3      	str	r3, [r2, #44]	; 0x2c
		RCC->PLLCFGR &= ~(1U<<3);
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <input_frequency_range+0xb4>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <input_frequency_range+0xb4>)
 80007f8:	f023 0308 	bic.w	r3, r3, #8
 80007fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58024400 	.word	0x58024400

08000810 <PLL1VCOSEL>:
 * These bits must be written before enabling the PLL1.
 * 0: Wide VCO range: 192 to 836 MHz (default after reset)
 * 1: Medium VCO range: 150 to 420 MHz
 */
void PLL1VCOSEL(bool wideOrMedium)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	if(wideOrMedium)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d006      	beq.n	800082e <PLL1VCOSEL+0x1e>
	{
		RCC->PLLCFGR |= (1U<<1);
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <PLL1VCOSEL+0x38>)
 8000822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000824:	4a08      	ldr	r2, [pc, #32]	; (8000848 <PLL1VCOSEL+0x38>)
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	62d3      	str	r3, [r2, #44]	; 0x2c
	}else
	{
		RCC->PLLCFGR &= ~(1U<<1);
	}
}
 800082c:	e005      	b.n	800083a <PLL1VCOSEL+0x2a>
		RCC->PLLCFGR &= ~(1U<<1);
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <PLL1VCOSEL+0x38>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <PLL1VCOSEL+0x38>)
 8000834:	f023 0302 	bic.w	r3, r3, #2
 8000838:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400

0800084c <enable_PLL1_OutputDividers>:
void enable_PLL1_OutputDividers(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<16) ;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 8000852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 8000856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<17) ;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 800085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000866:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC ->PLLCFGR |= (1U<<18) ;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <enable_PLL1_OutputDividers+0x34>)
 800086e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000872:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400

08000884 <enable_PLL1_FractionalDivider>:
void enable_PLL1_FractionalDivider(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	RCC ->PLLCFGR |= (1U<<0) ;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <enable_PLL1_FractionalDivider+0x1c>)
 800088a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <enable_PLL1_FractionalDivider+0x1c>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	58024400 	.word	0x58024400

080008a4 <StartPLL1>:
void StartPLL1(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	RCC->CR |= (1U<<24); //Start PLL1
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <StartPLL1+0x2c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <StartPLL1+0x2c>)
 80008ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b2:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR &(1U<<25))); //Wait until ON
 80008b4:	bf00      	nop
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <StartPLL1+0x2c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <StartPLL1+0x12>
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	58024400 	.word	0x58024400

080008d4 <D1CFGR_D1CPRE>:
 * 6: sys_ck divided by 128
 * 7: sys_ck divided by 256
 * 8: sys_ck divided by 512
 */
void D1CFGR_D1CPRE(short D1CPRE)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	switch(D1CPRE)
 80008de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	f200 80f7 	bhi.w	8000ad6 <D1CFGR_D1CPRE+0x202>
 80008e8:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <D1CFGR_D1CPRE+0x1c>)
 80008ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ee:	bf00      	nop
 80008f0:	08000915 	.word	0x08000915
 80008f4:	08000947 	.word	0x08000947
 80008f8:	08000979 	.word	0x08000979
 80008fc:	080009ab 	.word	0x080009ab
 8000900:	080009dd 	.word	0x080009dd
 8000904:	08000a0f 	.word	0x08000a0f
 8000908:	08000a41 	.word	0x08000a41
 800090c:	08000a73 	.word	0x08000a73
 8000910:	08000aa5 	.word	0x08000aa5
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<8);
 8000914:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a7e      	ldr	r2, [pc, #504]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800091a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800091e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000920:	4b7c      	ldr	r3, [pc, #496]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a7b      	ldr	r2, [pc, #492]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000926:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800092a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 800092c:	4b79      	ldr	r3, [pc, #484]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a78      	ldr	r2, [pc, #480]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000936:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 8000938:	4b76      	ldr	r3, [pc, #472]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a75      	ldr	r2, [pc, #468]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800093e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000942:	6193      	str	r3, [r2, #24]
		break;
 8000944:	e0e0      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<8);
 8000946:	4b73      	ldr	r3, [pc, #460]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a72      	ldr	r2, [pc, #456]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800094c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000950:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000952:	4b70      	ldr	r3, [pc, #448]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a6f      	ldr	r2, [pc, #444]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800095c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 800095e:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a6c      	ldr	r2, [pc, #432]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000968:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 800096a:	4b6a      	ldr	r3, [pc, #424]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a69      	ldr	r2, [pc, #420]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000974:	6193      	str	r3, [r2, #24]
	    break;
 8000976:	e0c7      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<8);
 8000978:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a65      	ldr	r2, [pc, #404]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000984:	4b63      	ldr	r3, [pc, #396]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a62      	ldr	r2, [pc, #392]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800098a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800098e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000990:	4b60      	ldr	r3, [pc, #384]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a5f      	ldr	r2, [pc, #380]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800099a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 800099c:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a5c      	ldr	r2, [pc, #368]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a6:	6193      	str	r3, [r2, #24]
	    break;
 80009a8:	e0ae      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<8);
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a59      	ldr	r2, [pc, #356]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 80009b6:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a56      	ldr	r2, [pc, #344]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009cc:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d8:	6193      	str	r3, [r2, #24]
	    break;
 80009da:	e095      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<8);
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 80009f4:	4b47      	ldr	r3, [pc, #284]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 80009fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009fe:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000a00:	4b44      	ldr	r3, [pc, #272]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a43      	ldr	r2, [pc, #268]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a0a:	6193      	str	r3, [r2, #24]
		break;
 8000a0c:	e07c      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<8);
 8000a0e:	4b41      	ldr	r3, [pc, #260]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a18:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000a1a:	4b3e      	ldr	r3, [pc, #248]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4a3d      	ldr	r2, [pc, #244]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a24:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000a26:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a30:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a3c:	6193      	str	r3, [r2, #24]
		break;
 8000a3e:	e063      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<8);
 8000a40:	4b34      	ldr	r3, [pc, #208]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a56:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000a58:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a2d      	ldr	r2, [pc, #180]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a2a      	ldr	r2, [pc, #168]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a6e:	6193      	str	r3, [r2, #24]
		break;
 8000a70:	e04a      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<8);
 8000a72:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a7c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a88:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a94:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa0:	6193      	str	r3, [r2, #24]
		break;
 8000aa2:	e031      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<8);
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aae:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<9);
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<10);
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<11);
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ace:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad2:	6193      	str	r3, [r2, #24]
		break;
 8000ad4:	e018      	b.n	8000b08 <D1CFGR_D1CPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<8);
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<9);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aec:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<10);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000af4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000af8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<11);
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <D1CFGR_D1CPRE+0x240>)
 8000b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b04:	6193      	str	r3, [r2, #24]
		break;
 8000b06:	bf00      	nop
	}
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	58024400 	.word	0x58024400

08000b18 <D1CFGR_HPRE>:
 * Note: The clocks are divided by the new prescaler factor from1 to 16 periods of the slowest APB
 * clock among rcc_pclk[4:1] after HPRE update.
 * Note: Note also that rcc_hclk3 = rcc_aclk.
 */
void D1CFGR_HPRE(short HPRE)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
	switch(HPRE)
 8000b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	f200 80f7 	bhi.w	8000d1a <D1CFGR_HPRE+0x202>
 8000b2c:	a201      	add	r2, pc, #4	; (adr r2, 8000b34 <D1CFGR_HPRE+0x1c>)
 8000b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b32:	bf00      	nop
 8000b34:	08000b59 	.word	0x08000b59
 8000b38:	08000b8b 	.word	0x08000b8b
 8000b3c:	08000bbd 	.word	0x08000bbd
 8000b40:	08000bef 	.word	0x08000bef
 8000b44:	08000c21 	.word	0x08000c21
 8000b48:	08000c53 	.word	0x08000c53
 8000b4c:	08000c85 	.word	0x08000c85
 8000b50:	08000cb7 	.word	0x08000cb7
 8000b54:	08000ce9 	.word	0x08000ce9
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<0);
 8000b58:	4b7f      	ldr	r3, [pc, #508]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a7e      	ldr	r2, [pc, #504]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000b64:	4b7c      	ldr	r3, [pc, #496]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a7b      	ldr	r2, [pc, #492]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b6a:	f023 0302 	bic.w	r3, r3, #2
 8000b6e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000b70:	4b79      	ldr	r3, [pc, #484]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a78      	ldr	r2, [pc, #480]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b76:	f023 0304 	bic.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 8000b7c:	4b76      	ldr	r3, [pc, #472]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a75      	ldr	r2, [pc, #468]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b82:	f023 0308 	bic.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
		break;
 8000b88:	e0e0      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 1 :
		RCC->D1CFGR &= ~(1U<<0);
 8000b8a:	4b73      	ldr	r3, [pc, #460]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a72      	ldr	r2, [pc, #456]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000b96:	4b70      	ldr	r3, [pc, #448]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a6f      	ldr	r2, [pc, #444]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000b9c:	f023 0302 	bic.w	r3, r3, #2
 8000ba0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000ba2:	4b6d      	ldr	r3, [pc, #436]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a6c      	ldr	r2, [pc, #432]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000bae:	4b6a      	ldr	r3, [pc, #424]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a69      	ldr	r2, [pc, #420]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6193      	str	r3, [r2, #24]
	    break;
 8000bba:	e0c7      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 2:
		RCC->D1CFGR |= (1U<<0);
 8000bbc:	4b66      	ldr	r3, [pc, #408]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a65      	ldr	r2, [pc, #404]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a62      	ldr	r2, [pc, #392]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bce:	f023 0302 	bic.w	r3, r3, #2
 8000bd2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000bd4:	4b60      	ldr	r3, [pc, #384]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a5f      	ldr	r2, [pc, #380]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bda:	f023 0304 	bic.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000be0:	4b5d      	ldr	r3, [pc, #372]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a5c      	ldr	r2, [pc, #368]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
	    break;
 8000bec:	e0ae      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 3:
		RCC->D1CFGR &= ~(1U<<0);
 8000bee:	4b5a      	ldr	r3, [pc, #360]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a59      	ldr	r2, [pc, #356]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a56      	ldr	r2, [pc, #344]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c0c:	f023 0304 	bic.w	r3, r3, #4
 8000c10:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000c12:	4b51      	ldr	r3, [pc, #324]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a50      	ldr	r2, [pc, #320]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6193      	str	r3, [r2, #24]
	    break;
 8000c1e:	e095      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 4:
		RCC->D1CFGR |= (1U<<0);
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a4c      	ldr	r2, [pc, #304]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a49      	ldr	r2, [pc, #292]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a46      	ldr	r2, [pc, #280]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c3e:	f023 0304 	bic.w	r3, r3, #4
 8000c42:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
		break;
 8000c50:	e07c      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 5 :
		RCC->D1CFGR &= ~(1U<<0);
 8000c52:	4b41      	ldr	r3, [pc, #260]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a40      	ldr	r2, [pc, #256]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000c5e:	4b3e      	ldr	r3, [pc, #248]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c64:	f023 0302 	bic.w	r3, r3, #2
 8000c68:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	4a3a      	ldr	r2, [pc, #232]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000c76:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a37      	ldr	r2, [pc, #220]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6193      	str	r3, [r2, #24]
		break;
 8000c82:	e063      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 6 :
		RCC->D1CFGR |= (1U<<0);
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
		break;
 8000cb4:	e04a      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 7 :
		RCC->D1CFGR &= ~(1U<<0);
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a27      	ldr	r2, [pc, #156]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6193      	str	r3, [r2, #24]
		break;
 8000ce6:	e031      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	case 8 :
		RCC->D1CFGR |= (1U<<0);
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<1);
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<2);
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<3);
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6193      	str	r3, [r2, #24]
		break;
 8000d18:	e018      	b.n	8000d4c <D1CFGR_HPRE+0x234>
	default:
		RCC->D1CFGR &= ~(1U<<0);
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<1);
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d2c:	f023 0302 	bic.w	r3, r3, #2
 8000d30:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<2);
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d38:	f023 0304 	bic.w	r3, r3, #4
 8000d3c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<3);
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <D1CFGR_HPRE+0x240>)
 8000d44:	f023 0308 	bic.w	r3, r3, #8
 8000d48:	6193      	str	r3, [r2, #24]
		break;
 8000d4a:	bf00      	nop
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58024400 	.word	0x58024400

08000d5c <D1PPRE>:
 * 2: rcc_pclk3 = rcc_hclk3 / 4
 * 3: rcc_pclk3 = rcc_hclk3 / 8
 * 4: rcc_pclk3 = rcc_hclk3 / 16
 */
void D1PPRE(short D1PPRE)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	switch (D1PPRE)
 8000d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d867      	bhi.n	8000e3e <D1PPRE+0xe2>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <D1PPRE+0x18>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000d89 	.word	0x08000d89
 8000d78:	08000daf 	.word	0x08000daf
 8000d7c:	08000dd3 	.word	0x08000dd3
 8000d80:	08000df7 	.word	0x08000df7
 8000d84:	08000e1b 	.word	0x08000e1b
	{
	case 0 :
		RCC->D1CFGR &= ~(1U<<4);
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <D1PPRE+0x114>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a38      	ldr	r2, [pc, #224]	; (8000e70 <D1PPRE+0x114>)
 8000d8e:	f023 0310 	bic.w	r3, r3, #16
 8000d92:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8000d94:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <D1PPRE+0x114>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <D1PPRE+0x114>)
 8000d9a:	f023 0320 	bic.w	r3, r3, #32
 8000d9e:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <D1PPRE+0x114>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a32      	ldr	r2, [pc, #200]	; (8000e70 <D1PPRE+0x114>)
 8000da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000daa:	6193      	str	r3, [r2, #24]
		break;
 8000dac:	e05a      	b.n	8000e64 <D1PPRE+0x108>
	case 1 :
		RCC->D1CFGR &= ~(1U<<4);
 8000dae:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <D1PPRE+0x114>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <D1PPRE+0x114>)
 8000db4:	f023 0310 	bic.w	r3, r3, #16
 8000db8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <D1PPRE+0x114>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a2c      	ldr	r2, [pc, #176]	; (8000e70 <D1PPRE+0x114>)
 8000dc0:	f023 0320 	bic.w	r3, r3, #32
 8000dc4:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <D1PPRE+0x114>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a29      	ldr	r2, [pc, #164]	; (8000e70 <D1PPRE+0x114>)
 8000dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd0:	6193      	str	r3, [r2, #24]
	case 2 :
		RCC->D1CFGR |= (1U<<4);
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <D1PPRE+0x114>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a26      	ldr	r2, [pc, #152]	; (8000e70 <D1PPRE+0x114>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <D1PPRE+0x114>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <D1PPRE+0x114>)
 8000de4:	f023 0320 	bic.w	r3, r3, #32
 8000de8:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <D1PPRE+0x114>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <D1PPRE+0x114>)
 8000df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df4:	6193      	str	r3, [r2, #24]
	case 3 :
		RCC->D1CFGR &= ~(1U<<4);
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <D1PPRE+0x114>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <D1PPRE+0x114>)
 8000dfc:	f023 0310 	bic.w	r3, r3, #16
 8000e00:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <D1PPRE+0x114>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <D1PPRE+0x114>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <D1PPRE+0x114>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <D1PPRE+0x114>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e18:	6193      	str	r3, [r2, #24]
	case 4 :
		RCC->D1CFGR |= (1U<<4);
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <D1PPRE+0x114>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <D1PPRE+0x114>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<5);
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <D1PPRE+0x114>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <D1PPRE+0x114>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR |= (1U<<6);
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <D1PPRE+0x114>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <D1PPRE+0x114>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3c:	6193      	str	r3, [r2, #24]
	default:
		RCC->D1CFGR &= ~(1U<<4);
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <D1PPRE+0x114>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <D1PPRE+0x114>)
 8000e44:	f023 0310 	bic.w	r3, r3, #16
 8000e48:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<5);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <D1PPRE+0x114>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <D1PPRE+0x114>)
 8000e50:	f023 0320 	bic.w	r3, r3, #32
 8000e54:	6193      	str	r3, [r2, #24]
		RCC->D1CFGR &= ~(1U<<6);
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <D1PPRE+0x114>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <D1PPRE+0x114>)
 8000e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e60:	6193      	str	r3, [r2, #24]
		break;
 8000e62:	bf00      	nop
	}
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	58024400 	.word	0x58024400

08000e74 <D2PPRE1>:
 *  3: rcc_pclk1 = rcc_hclk1 / 8
 *  4: rcc_pclk1 = rcc_hclk1 / 16
 *  Bits 3:0 Reserved, must be kept at reset value.
 */
void D2PPRE1(short D2PPRE1)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
	switch (D2PPRE1)
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d867      	bhi.n	8000f56 <D2PPRE1+0xe2>
 8000e86:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <D2PPRE1+0x18>)
 8000e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8c:	08000ea1 	.word	0x08000ea1
 8000e90:	08000ec7 	.word	0x08000ec7
 8000e94:	08000eeb 	.word	0x08000eeb
 8000e98:	08000f0f 	.word	0x08000f0f
 8000e9c:	08000f33 	.word	0x08000f33
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <D2PPRE1+0x114>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a38      	ldr	r2, [pc, #224]	; (8000f88 <D2PPRE1+0x114>)
 8000ea6:	f023 0310 	bic.w	r3, r3, #16
 8000eaa:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <D2PPRE1+0x114>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a35      	ldr	r2, [pc, #212]	; (8000f88 <D2PPRE1+0x114>)
 8000eb2:	f023 0320 	bic.w	r3, r3, #32
 8000eb6:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <D2PPRE1+0x114>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4a32      	ldr	r2, [pc, #200]	; (8000f88 <D2PPRE1+0x114>)
 8000ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec2:	61d3      	str	r3, [r2, #28]
		break;
 8000ec4:	e05a      	b.n	8000f7c <D2PPRE1+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <D2PPRE1+0x114>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <D2PPRE1+0x114>)
 8000ecc:	f023 0310 	bic.w	r3, r3, #16
 8000ed0:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <D2PPRE1+0x114>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <D2PPRE1+0x114>)
 8000ed8:	f023 0320 	bic.w	r3, r3, #32
 8000edc:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <D2PPRE1+0x114>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <D2PPRE1+0x114>)
 8000ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee8:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <D2PPRE1+0x114>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <D2PPRE1+0x114>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <D2PPRE1+0x114>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <D2PPRE1+0x114>)
 8000efc:	f023 0320 	bic.w	r3, r3, #32
 8000f00:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <D2PPRE1+0x114>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <D2PPRE1+0x114>)
 8000f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f0c:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <D2PPRE1+0x114>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <D2PPRE1+0x114>)
 8000f14:	f023 0310 	bic.w	r3, r3, #16
 8000f18:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <D2PPRE1+0x114>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <D2PPRE1+0x114>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <D2PPRE1+0x114>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <D2PPRE1+0x114>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <D2PPRE1+0x114>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <D2PPRE1+0x114>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <D2PPRE1+0x114>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <D2PPRE1+0x114>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <D2PPRE1+0x114>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <D2PPRE1+0x114>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f54:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <D2PPRE1+0x114>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <D2PPRE1+0x114>)
 8000f5c:	f023 0310 	bic.w	r3, r3, #16
 8000f60:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <D2PPRE1+0x114>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <D2PPRE1+0x114>)
 8000f68:	f023 0320 	bic.w	r3, r3, #32
 8000f6c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <D2PPRE1+0x114>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <D2PPRE1+0x114>)
 8000f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f78:	61d3      	str	r3, [r2, #28]
		break;
 8000f7a:	bf00      	nop
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	58024400 	.word	0x58024400

08000f8c <D3PPRE>:
110: rcc_pclk4 = rcc_hclk4 / 8
111: rcc_pclk4 = rcc_hclk4 / 16
Bits 3:0 Reserved, must be kept at reset value
 */
void D3PPRE(short D3PPRE)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	switch (D3PPRE)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d867      	bhi.n	800106e <D3PPRE+0xe2>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <D3PPRE+0x18>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb9 	.word	0x08000fb9
 8000fa8:	08000fdf 	.word	0x08000fdf
 8000fac:	08001003 	.word	0x08001003
 8000fb0:	08001027 	.word	0x08001027
 8000fb4:	0800104b 	.word	0x0800104b
	{
	case 0 :
		RCC->D2CFGR &= ~(1U<<4);
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <D3PPRE+0x114>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	4a38      	ldr	r2, [pc, #224]	; (80010a0 <D3PPRE+0x114>)
 8000fbe:	f023 0310 	bic.w	r3, r3, #16
 8000fc2:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <D3PPRE+0x114>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4a35      	ldr	r2, [pc, #212]	; (80010a0 <D3PPRE+0x114>)
 8000fca:	f023 0320 	bic.w	r3, r3, #32
 8000fce:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <D3PPRE+0x114>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <D3PPRE+0x114>)
 8000fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fda:	61d3      	str	r3, [r2, #28]
		break;
 8000fdc:	e05a      	b.n	8001094 <D3PPRE+0x108>
	case 1 :
		RCC->D2CFGR &= ~(1U<<4);
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <D3PPRE+0x114>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <D3PPRE+0x114>)
 8000fe4:	f023 0310 	bic.w	r3, r3, #16
 8000fe8:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <D3PPRE+0x114>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <D3PPRE+0x114>)
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <D3PPRE+0x114>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <D3PPRE+0x114>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	61d3      	str	r3, [r2, #28]
	case 2 :
		RCC->D2CFGR |= (1U<<4);
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <D3PPRE+0x114>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <D3PPRE+0x114>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <D3PPRE+0x114>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <D3PPRE+0x114>)
 8001014:	f023 0320 	bic.w	r3, r3, #32
 8001018:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <D3PPRE+0x114>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <D3PPRE+0x114>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	61d3      	str	r3, [r2, #28]
	case 3 :
		RCC->D2CFGR &= ~(1U<<4);
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <D3PPRE+0x114>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <D3PPRE+0x114>)
 800102c:	f023 0310 	bic.w	r3, r3, #16
 8001030:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <D3PPRE+0x114>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <D3PPRE+0x114>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <D3PPRE+0x114>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <D3PPRE+0x114>)
 8001044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001048:	61d3      	str	r3, [r2, #28]
	case 4 :
		RCC->D2CFGR |= (1U<<4);
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <D3PPRE+0x114>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <D3PPRE+0x114>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<5);
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <D3PPRE+0x114>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <D3PPRE+0x114>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR |= (1U<<6);
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <D3PPRE+0x114>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <D3PPRE+0x114>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	61d3      	str	r3, [r2, #28]
	default:
		RCC->D2CFGR &= ~(1U<<4);
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <D3PPRE+0x114>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <D3PPRE+0x114>)
 8001074:	f023 0310 	bic.w	r3, r3, #16
 8001078:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<5);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <D3PPRE+0x114>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <D3PPRE+0x114>)
 8001080:	f023 0320 	bic.w	r3, r3, #32
 8001084:	61d3      	str	r3, [r2, #28]
		RCC->D2CFGR &= ~(1U<<6);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <D3PPRE+0x114>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <D3PPRE+0x114>)
 800108c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001090:	61d3      	str	r3, [r2, #28]
		break;
 8001092:	bf00      	nop
	}
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	58024400 	.word	0x58024400

080010a4 <SysClockConfig>:
 * 		APB2 Timer Clocks: 240MHz
 * 		APB4 Peripheral Clocks: 120MHz
 * 		APB4 Timer Clocks: 240MHz
 */
void SysClockConfig(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	RCC->CR |= HSEON; //Enable  the HSE Clock
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <SysClockConfig+0x7c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <SysClockConfig+0x7c>)
 80010ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & HSERDY)); //Wait until HSE is ready
 80010b4:	bf00      	nop
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <SysClockConfig+0x7c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f9      	beq.n	80010b6 <SysClockConfig+0x12>
	//PLLSRC Source Mux
	PLLSRC_Select(2);
 80010c2:	2002      	movs	r0, #2
 80010c4:	f7ff f936 	bl	8000334 <PLLSRC_Select>
	//DIVM1 PPL1
	DIVM1(DIVM1_SC);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff f97f 	bl	80003cc <DIVM1>
	PLL1DIVR(DIVN1_SC, DIVP1_SC, DIVQ1_SC, DIVR1_SC);
 80010ce:	2301      	movs	r3, #1
 80010d0:	2201      	movs	r2, #1
 80010d2:	2101      	movs	r1, #1
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f7ff fa6d 	bl	80005b4 <PLL1DIVR>
	input_frequency_range(2);
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fb3c 	bl	8000758 <input_frequency_range>
	PLL1VCOSEL(0);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fb95 	bl	8000810 <PLL1VCOSEL>
	enable_PLL1_OutputDividers();
 80010e6:	f7ff fbb1 	bl	800084c <enable_PLL1_OutputDividers>
	enable_PLL1_FractionalDivider();
 80010ea:	f7ff fbcb 	bl	8000884 <enable_PLL1_FractionalDivider>
	StartPLL1();
 80010ee:	f7ff fbd9 	bl	80008a4 <StartPLL1>
	D1CFGR_HPRE(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff fd10 	bl	8000b18 <D1CFGR_HPRE>
	D1CFGR_D1CPRE(0);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fbeb 	bl	80008d4 <D1CFGR_D1CPRE>
	SystemClockStatus(3);
 80010fe:	2003      	movs	r0, #3
 8001100:	f7ff f9b0 	bl	8000464 <SystemClockStatus>
	D1PPRE(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fe29 	bl	8000d5c <D1PPRE>
	D2PPRE1(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff feb2 	bl	8000e74 <D2PPRE1>
	D2PPRE1(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff feaf 	bl	8000e74 <D2PPRE1>
	D3PPRE(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff ff38 	bl	8000f8c <D3PPRE>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400

08001124 <get_SYSCLK>:
unsigned long  get_SYSCLK()
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
	unsigned long SysClock =  8000000;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <get_SYSCLK+0x2c>)
 800112c:	607b      	str	r3, [r7, #4]
	SysClock /= DIVM1_SC ;
	SysClock *= DIVN1_SC ;
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	607b      	str	r3, [r7, #4]
	SysClock /= (DIVP1_SC+1) ;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	607b      	str	r3, [r7, #4]
	return SysClock;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	007a1200 	.word	0x007a1200

08001154 <SysClockAfter_D1Prescaler>:
unsigned long SysClockAfter_D1Prescaler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	unsigned long SysClock = get_SYSCLK();
 800115a:	f7ff ffe3 	bl	8001124 <get_SYSCLK>
 800115e:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D1CPRE_SC);
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
	unsigned long x = SysClock/s;
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	fbb2 f3f3 	udiv	r3, r2, r3
 800116c:	607b      	str	r3, [r7, #4]
	SysClock =x ;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]
	return SysClock;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <get_CPU1_Systick_Clock>:
{
	unsigned long SysClock =  SysClockAfter_D1Prescaler();
	return SysClock;
}
unsigned long  get_CPU1_Systick_Clock()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SYSCLK();
 8001182:	f7ff ffcf 	bl	8001124 <get_SYSCLK>
 8001186:	6078      	str	r0, [r7, #4]
	return SysClock;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <get_SysClock_AfterHPRE_Prescaler>:
unsigned long get_SysClock_AfterHPRE_Prescaler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
	unsigned long SysClock = SysClockAfter_D1Prescaler();
 8001198:	f7ff ffdc 	bl	8001154 <SysClockAfter_D1Prescaler>
 800119c:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)HPRE_SC);
 800119e:	2302      	movs	r3, #2
 80011a0:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	607b      	str	r3, [r7, #4]
		SysClock =x ;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60fb      	str	r3, [r7, #12]
	return SysClock;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <get_APB1_Preipheral_Clock>:
{
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
	return SysClock;
}
unsigned long get_APB1_Preipheral_Clock()
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 80011c0:	f7ff ffe7 	bl	8001192 <get_SysClock_AfterHPRE_Prescaler>
 80011c4:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE1_SC);
 80011c6:	2302      	movs	r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <get_APB2_Preipheral_Clock>:
			SysClock =x ;
	SysClock *= 2;
	return SysClock;
}
unsigned long get_APB2_Preipheral_Clock()
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b084      	sub	sp, #16
 80011e6:	af00      	add	r7, sp, #0
	unsigned long SysClock =  get_SysClock_AfterHPRE_Prescaler();
 80011e8:	f7ff ffd3 	bl	8001192 <get_SysClock_AfterHPRE_Prescaler>
 80011ec:	60f8      	str	r0, [r7, #12]
	unsigned long s = (unsigned long)pow((double)2,(double)D2PPRE2_SC);
 80011ee:	2302      	movs	r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
		unsigned long x = SysClock/s;
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	607b      	str	r3, [r7, #4]
		SysClock =x ;	return SysClock;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <enablePORT>:
#define GPIOJEN (1U<<9)
#define GPIOKEN (1U<<10)


void enablePORT(GPIO_TypeDef* Port)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	if (Port==GPIOA) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a75      	ldr	r2, [pc, #468]	; (80013ec <enablePORT+0x1e0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d110      	bne.n	800123e <enablePORT+0x32>
		RCC->AHB4ENR |= GPIOAEN;
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <enablePORT+0x1e4>)
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <enablePORT+0x1e4>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		//Making sure bit is changed
		while(!(RCC->AHB4ENR & GPIOAEN));
 800122c:	bf00      	nop
 800122e:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <enablePORT+0x1e4>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f8      	beq.n	800122e <enablePORT+0x22>
		while(!(RCC->AHB4ENR & GPIOKEN));

	}else
	{
	}
}
 800123c:	e0d0      	b.n	80013e0 <enablePORT+0x1d4>
	} else if(Port==GPIOB) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a6c      	ldr	r2, [pc, #432]	; (80013f4 <enablePORT+0x1e8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d110      	bne.n	8001268 <enablePORT+0x5c>
		RCC->AHB4ENR |= GPIOBEN;
 8001246:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <enablePORT+0x1e4>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	4a68      	ldr	r2, [pc, #416]	; (80013f0 <enablePORT+0x1e4>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOBEN));
 8001256:	bf00      	nop
 8001258:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <enablePORT+0x1e4>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f8      	beq.n	8001258 <enablePORT+0x4c>
}
 8001266:	e0bb      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOC) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a63      	ldr	r2, [pc, #396]	; (80013f8 <enablePORT+0x1ec>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d110      	bne.n	8001292 <enablePORT+0x86>
		RCC->AHB4ENR |= GPIOCEN;
 8001270:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <enablePORT+0x1e4>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <enablePORT+0x1e4>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOCEN));
 8001280:	bf00      	nop
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <enablePORT+0x1e4>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f8      	beq.n	8001282 <enablePORT+0x76>
}
 8001290:	e0a6      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOD) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a59      	ldr	r2, [pc, #356]	; (80013fc <enablePORT+0x1f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d110      	bne.n	80012bc <enablePORT+0xb0>
		RCC->AHB4ENR |= GPIODEN;
 800129a:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <enablePORT+0x1e4>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a53      	ldr	r2, [pc, #332]	; (80013f0 <enablePORT+0x1e4>)
 80012a2:	f043 0308 	orr.w	r3, r3, #8
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIODEN));
 80012aa:	bf00      	nop
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <enablePORT+0x1e4>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f8      	beq.n	80012ac <enablePORT+0xa0>
}
 80012ba:	e091      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOE) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a50      	ldr	r2, [pc, #320]	; (8001400 <enablePORT+0x1f4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d110      	bne.n	80012e6 <enablePORT+0xda>
		RCC->AHB4ENR |= GPIOEEN;
 80012c4:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <enablePORT+0x1e4>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <enablePORT+0x1e4>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOEEN));
 80012d4:	bf00      	nop
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <enablePORT+0x1e4>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f8      	beq.n	80012d6 <enablePORT+0xca>
}
 80012e4:	e07c      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOF) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a46      	ldr	r2, [pc, #280]	; (8001404 <enablePORT+0x1f8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d110      	bne.n	8001310 <enablePORT+0x104>
		RCC->AHB4ENR |= GPIOFEN;
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <enablePORT+0x1e4>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <enablePORT+0x1e4>)
 80012f6:	f043 0320 	orr.w	r3, r3, #32
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOFEN));
 80012fe:	bf00      	nop
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <enablePORT+0x1e4>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <enablePORT+0xf4>
}
 800130e:	e067      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOG) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3d      	ldr	r2, [pc, #244]	; (8001408 <enablePORT+0x1fc>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d110      	bne.n	800133a <enablePORT+0x12e>
		RCC->AHB4ENR |= GPIOGEN;
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <enablePORT+0x1e4>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a34      	ldr	r2, [pc, #208]	; (80013f0 <enablePORT+0x1e4>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOGEN));
 8001328:	bf00      	nop
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <enablePORT+0x1e4>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f8      	beq.n	800132a <enablePORT+0x11e>
}
 8001338:	e052      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOH) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a33      	ldr	r2, [pc, #204]	; (800140c <enablePORT+0x200>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d110      	bne.n	8001364 <enablePORT+0x158>
		RCC->AHB4ENR |= GPIOHEN;
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <enablePORT+0x1e4>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <enablePORT+0x1e4>)
 800134a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOHEN));
 8001352:	bf00      	nop
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <enablePORT+0x1e4>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f8      	beq.n	8001354 <enablePORT+0x148>
}
 8001362:	e03d      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOI) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <enablePORT+0x204>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d110      	bne.n	800138e <enablePORT+0x182>
		RCC->AHB4ENR |= GPIOIEN;
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <enablePORT+0x1e4>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <enablePORT+0x1e4>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOIEN));
 800137c:	bf00      	nop
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <enablePORT+0x1e4>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f8      	beq.n	800137e <enablePORT+0x172>
}
 800138c:	e028      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOJ) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a20      	ldr	r2, [pc, #128]	; (8001414 <enablePORT+0x208>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d110      	bne.n	80013b8 <enablePORT+0x1ac>
		RCC->AHB4ENR |= GPIOJEN;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <enablePORT+0x1e4>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <enablePORT+0x1e4>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOJEN));
 80013a6:	bf00      	nop
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <enablePORT+0x1e4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f8      	beq.n	80013a8 <enablePORT+0x19c>
}
 80013b6:	e013      	b.n	80013e0 <enablePORT+0x1d4>
	}else if(Port==GPIOK) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a17      	ldr	r2, [pc, #92]	; (8001418 <enablePORT+0x20c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10f      	bne.n	80013e0 <enablePORT+0x1d4>
		RCC->AHB4ENR |= GPIOKEN;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <enablePORT+0x1e4>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <enablePORT+0x1e4>)
 80013c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
		while(!(RCC->AHB4ENR & GPIOKEN));
 80013d0:	bf00      	nop
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <enablePORT+0x1e4>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f8      	beq.n	80013d2 <enablePORT+0x1c6>
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	58020000 	.word	0x58020000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020400 	.word	0x58020400
 80013f8:	58020800 	.word	0x58020800
 80013fc:	58020c00 	.word	0x58020c00
 8001400:	58021000 	.word	0x58021000
 8001404:	58021400 	.word	0x58021400
 8001408:	58021800 	.word	0x58021800
 800140c:	58021c00 	.word	0x58021c00
 8001410:	58022000 	.word	0x58022000
 8001414:	58022400 	.word	0x58022400
 8001418:	58022800 	.word	0x58022800

0800141c <Set_GPIO_MODER>:
 * 2: Alternate function mode
 * 3: Analog mode (reset state)
 * Note : If type argument is entered wrong pin configuration is becomes Input mode
 * */
void Set_GPIO_MODER(GPIO_TypeDef* Port,short Pin,short type)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	803b      	strh	r3, [r7, #0]
	bool bit_0, bit_1 ;
	switch(type)
 800142c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d81f      	bhi.n	8001474 <Set_GPIO_MODER+0x58>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <Set_GPIO_MODER+0x20>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800144d 	.word	0x0800144d
 8001440:	08001457 	.word	0x08001457
 8001444:	08001461 	.word	0x08001461
 8001448:	0800146b 	.word	0x0800146b
	{
	case 0 :
		bit_0 = false ;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 8001450:	2300      	movs	r3, #0
 8001452:	73bb      	strb	r3, [r7, #14]
		break ;
 8001454:	e012      	b.n	800147c <Set_GPIO_MODER+0x60>
	case 1 :
		bit_0 =  true ;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800145a:	2300      	movs	r3, #0
 800145c:	73bb      	strb	r3, [r7, #14]
		break;
 800145e:	e00d      	b.n	800147c <Set_GPIO_MODER+0x60>
	case 2 :
		bit_0 = false ;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001464:	2301      	movs	r3, #1
 8001466:	73bb      	strb	r3, [r7, #14]
		break;
 8001468:	e008      	b.n	800147c <Set_GPIO_MODER+0x60>
	case 3 :
		bit_0 = true ;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 800146e:	2301      	movs	r3, #1
 8001470:	73bb      	strb	r3, [r7, #14]
		break;
 8001472:	e003      	b.n	800147c <Set_GPIO_MODER+0x60>
	default:
		bit_0 = false;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
		bit_1 = false;
 8001478:	2300      	movs	r3, #0
 800147a:	73bb      	strb	r3, [r7, #14]
	}
	if(bit_0)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <Set_GPIO_MODER+0x7e>
	{
		Port->MODER |= (1U<<(Pin*2));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e00b      	b.n	80014b2 <Set_GPIO_MODER+0x96>
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	601a      	str	r2, [r3, #0]
	}
	if(bit_1)
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00c      	beq.n	80014d2 <Set_GPIO_MODER+0xb6>
	{
		Port->MODER |= (1U<<((Pin*2)+1));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	3301      	adds	r3, #1
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
	}else
	{
		Port->MODER &= ~(1U<<((Pin*2)+1));
	}
}
 80014d0:	e00c      	b.n	80014ec <Set_GPIO_MODER+0xd0>
		Port->MODER &= ~(1U<<((Pin*2)+1));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	3301      	adds	r3, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <Set_GPIO_AFR>:
 *14: AF14
 *15: AF15
 * Note if Afx entered bigger than 15 AFx becomes AF0
 */
void Set_GPIO_AFR(GPIO_TypeDef* Port,short pin,short AFx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	807b      	strh	r3, [r7, #2]
 8001504:	4613      	mov	r3, r2
 8001506:	803b      	strh	r3, [r7, #0]
	bool bit_0,bit_1,bit_2,bit_3;
	switch(AFx)
 8001508:	f9b7 3000 	ldrsh.w	r3, [r7]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	f200 80b3 	bhi.w	8001678 <Set_GPIO_AFR+0x180>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <Set_GPIO_AFR+0x20>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001559 	.word	0x08001559
 800151c:	0800156b 	.word	0x0800156b
 8001520:	0800157d 	.word	0x0800157d
 8001524:	0800158f 	.word	0x0800158f
 8001528:	080015a1 	.word	0x080015a1
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015c5 	.word	0x080015c5
 8001534:	080015d7 	.word	0x080015d7
 8001538:	080015e9 	.word	0x080015e9
 800153c:	080015fb 	.word	0x080015fb
 8001540:	0800160d 	.word	0x0800160d
 8001544:	0800161f 	.word	0x0800161f
 8001548:	08001631 	.word	0x08001631
 800154c:	08001643 	.word	0x08001643
 8001550:	08001655 	.word	0x08001655
 8001554:	08001667 	.word	0x08001667
	{
	case 0:
		bit_0 = false ;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800155c:	2300      	movs	r3, #0
 800155e:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001560:	2300      	movs	r3, #0
 8001562:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001564:	2300      	movs	r3, #0
 8001566:	733b      	strb	r3, [r7, #12]
		break;
 8001568:	e08f      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 1:
		bit_0 = true  ;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800156e:	2300      	movs	r3, #0
 8001570:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001572:	2300      	movs	r3, #0
 8001574:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001576:	2300      	movs	r3, #0
 8001578:	733b      	strb	r3, [r7, #12]
		break;
 800157a:	e086      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 2:
		bit_0 = false ;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001580:	2301      	movs	r3, #1
 8001582:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001584:	2300      	movs	r3, #0
 8001586:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001588:	2300      	movs	r3, #0
 800158a:	733b      	strb	r3, [r7, #12]
		break;
 800158c:	e07d      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 3:
		bit_0 = true  ;
 800158e:	2301      	movs	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001592:	2301      	movs	r3, #1
 8001594:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001596:	2300      	movs	r3, #0
 8001598:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 800159a:	2300      	movs	r3, #0
 800159c:	733b      	strb	r3, [r7, #12]
		break;
 800159e:	e074      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 4:
		bit_0 = false ;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80015a8:	2301      	movs	r3, #1
 80015aa:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80015ac:	2300      	movs	r3, #0
 80015ae:	733b      	strb	r3, [r7, #12]
		break;
 80015b0:	e06b      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 5:
		bit_0 = true  ;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80015ba:	2301      	movs	r3, #1
 80015bc:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80015be:	2300      	movs	r3, #0
 80015c0:	733b      	strb	r3, [r7, #12]
		break;
 80015c2:	e062      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 6:
		bit_0 = false  ;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
		bit_1 = true ;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80015cc:	2301      	movs	r3, #1
 80015ce:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80015d0:	2300      	movs	r3, #0
 80015d2:	733b      	strb	r3, [r7, #12]
		break;
 80015d4:	e059      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 7:
		bit_0 = true  ;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 80015da:	2301      	movs	r3, #1
 80015dc:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 80015de:	2301      	movs	r3, #1
 80015e0:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 80015e2:	2300      	movs	r3, #0
 80015e4:	733b      	strb	r3, [r7, #12]
		break;
 80015e6:	e050      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 8:
		bit_0 = false  ;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 80015f0:	2300      	movs	r3, #0
 80015f2:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 80015f4:	2301      	movs	r3, #1
 80015f6:	733b      	strb	r3, [r7, #12]
		break;
 80015f8:	e047      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 9:
		bit_0 = true  ;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 80015fe:	2300      	movs	r3, #0
 8001600:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001602:	2300      	movs	r3, #0
 8001604:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001606:	2301      	movs	r3, #1
 8001608:	733b      	strb	r3, [r7, #12]
		break;
 800160a:	e03e      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 10:
		bit_0 = false  ;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 8001610:	2301      	movs	r3, #1
 8001612:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001614:	2300      	movs	r3, #0
 8001616:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 8001618:	2301      	movs	r3, #1
 800161a:	733b      	strb	r3, [r7, #12]
		break;
 800161c:	e035      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 11:
		bit_0 = true  ;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
		bit_1 = true   ;
 8001622:	2301      	movs	r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
		bit_2 = false  ;
 8001626:	2300      	movs	r3, #0
 8001628:	737b      	strb	r3, [r7, #13]
		bit_3 = true   ;
 800162a:	2301      	movs	r3, #1
 800162c:	733b      	strb	r3, [r7, #12]
		break;
 800162e:	e02c      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 12:
		bit_0 = false  ;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8001634:	2300      	movs	r3, #0
 8001636:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 8001638:	2301      	movs	r3, #1
 800163a:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 800163c:	2301      	movs	r3, #1
 800163e:	733b      	strb	r3, [r7, #12]
		break;
 8001640:	e023      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 13:
		bit_0 = true  ;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
		bit_1 = false  ;
 8001646:	2300      	movs	r3, #0
 8001648:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 800164a:	2301      	movs	r3, #1
 800164c:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 800164e:	2301      	movs	r3, #1
 8001650:	733b      	strb	r3, [r7, #12]
		break;
 8001652:	e01a      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 14:
		bit_0 = false  ;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 8001658:	2301      	movs	r3, #1
 800165a:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 800165c:	2301      	movs	r3, #1
 800165e:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001660:	2301      	movs	r3, #1
 8001662:	733b      	strb	r3, [r7, #12]
		break;
 8001664:	e011      	b.n	800168a <Set_GPIO_AFR+0x192>
	case 15:
		bit_0 = true;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
		bit_1 = true  ;
 800166a:	2301      	movs	r3, #1
 800166c:	73bb      	strb	r3, [r7, #14]
		bit_2 = true  ;
 800166e:	2301      	movs	r3, #1
 8001670:	737b      	strb	r3, [r7, #13]
		bit_3 = true ;
 8001672:	2301      	movs	r3, #1
 8001674:	733b      	strb	r3, [r7, #12]
		break;
 8001676:	e008      	b.n	800168a <Set_GPIO_AFR+0x192>
	default:
		bit_0 = false ;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
		bit_1 = false ;
 800167c:	2300      	movs	r3, #0
 800167e:	73bb      	strb	r3, [r7, #14]
		bit_2 = false ;
 8001680:	2300      	movs	r3, #0
 8001682:	737b      	strb	r3, [r7, #13]
		bit_3 = false ;
 8001684:	2300      	movs	r3, #0
 8001686:	733b      	strb	r3, [r7, #12]
		break;
 8001688:	bf00      	nop

	}
	if(pin<8&& pin >-1)
 800168a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800168e:	2b07      	cmp	r3, #7
 8001690:	dc76      	bgt.n	8001780 <Set_GPIO_AFR+0x288>
 8001692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db72      	blt.n	8001780 <Set_GPIO_AFR+0x288>
	{
		if(bit_0)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <Set_GPIO_AFR+0x1c0>
		{
			Port->AFR[0] |= (1U<<((pin*4)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	621a      	str	r2, [r3, #32]
 80016b6:	e00b      	b.n	80016d0 <Set_GPIO_AFR+0x1d8>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	621a      	str	r2, [r3, #32]
		}

		if(bit_1)
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00c      	beq.n	80016f0 <Set_GPIO_AFR+0x1f8>
		{
			Port->AFR[0] |= (1U<<((pin*4)+1));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1a      	ldr	r2, [r3, #32]
 80016da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	3301      	adds	r3, #1
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	621a      	str	r2, [r3, #32]
 80016ee:	e00c      	b.n	800170a <Set_GPIO_AFR+0x212>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+1));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	3301      	adds	r3, #1
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	621a      	str	r2, [r3, #32]
		}

		if(bit_2)
 800170a:	7b7b      	ldrb	r3, [r7, #13]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <Set_GPIO_AFR+0x232>
		{
			Port->AFR[0] |= (1U<<((pin*4)+2));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1a      	ldr	r2, [r3, #32]
 8001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	3302      	adds	r3, #2
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	e00c      	b.n	8001744 <Set_GPIO_AFR+0x24c>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+2));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	621a      	str	r2, [r3, #32]
		}
		if(bit_3)
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00c      	beq.n	8001764 <Set_GPIO_AFR+0x26c>
		{
			Port->AFR[0] |= (1U<<((pin*4)+3));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	3303      	adds	r3, #3
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	621a      	str	r2, [r3, #32]
		if(bit_3)
 8001762:	e090      	b.n	8001886 <Set_GPIO_AFR+0x38e>
		}else
		{
			Port->AFR[0] &= ~(1U<<((pin*4)+3));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	3303      	adds	r3, #3
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	621a      	str	r2, [r3, #32]
		if(bit_3)
 800177e:	e082      	b.n	8001886 <Set_GPIO_AFR+0x38e>
		}
	}else if(pin>7 &&pin<16)
 8001780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001784:	2b07      	cmp	r3, #7
 8001786:	dd7e      	ble.n	8001886 <Set_GPIO_AFR+0x38e>
 8001788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	dc7a      	bgt.n	8001886 <Set_GPIO_AFR+0x38e>
	{
		if(bit_0)
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <Set_GPIO_AFR+0x2b8>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800179e:	3b08      	subs	r3, #8
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
 80017ae:	e00c      	b.n	80017ca <Set_GPIO_AFR+0x2d2>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017b8:	3b08      	subs	r3, #8
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_1)
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00d      	beq.n	80017ec <Set_GPIO_AFR+0x2f4>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+1));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017d8:	3b08      	subs	r3, #8
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	3301      	adds	r3, #1
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ea:	e00d      	b.n	8001808 <Set_GPIO_AFR+0x310>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+1));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017f4:	3b08      	subs	r3, #8
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	3301      	adds	r3, #1
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
		}

		if(bit_2)
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <Set_GPIO_AFR+0x332>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+2));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001816:	3b08      	subs	r3, #8
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
 8001828:	e00d      	b.n	8001846 <Set_GPIO_AFR+0x34e>
		}else
		{
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+2));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001832:	3b08      	subs	r3, #8
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	401a      	ands	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(bit_3)
 8001846:	7b3b      	ldrb	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00d      	beq.n	8001868 <Set_GPIO_AFR+0x370>
		{
			Port->AFR[1] |= (1U<<(((pin-8)*4)+3));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001854:	3b08      	subs	r3, #8
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	3303      	adds	r3, #3
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}else
	{

	}
}
 8001866:	e00e      	b.n	8001886 <Set_GPIO_AFR+0x38e>
			Port->AFR[1] &= ~(1U<<(((pin-8)*4)+3));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001870:	3b08      	subs	r3, #8
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	3303      	adds	r3, #3
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001884:	e7ff      	b.n	8001886 <Set_GPIO_AFR+0x38e>
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <systickDelayMs>:
#define CTRL_CLKSRC		 (1U<<2)
#define CTRL_COUNTFLAG	 (1U<<16)
#define SYSTICK_LOAD_VAL (get_CPU1_Systick_Clock()/1000)
//#define SYSTICK_LOAD_VAL (64000000/1000)
void systickDelayMs(int delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	/*Configure systick*/
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD =SYSTICK_LOAD_VAL;
 800189c:	f7ff fc6e 	bl	800117c <get_CPU1_Systick_Clock>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <systickDelayMs+0x58>)
 80018a4:	4912      	ldr	r1, [pc, #72]	; (80018f0 <systickDelayMs+0x5c>)
 80018a6:	fba1 1303 	umull	r1, r3, r1, r3
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	6053      	str	r3, [r2, #4]
	/*Clear systick current value register*/
	SysTick->VAL = 0 ;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <systickDelayMs+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
	/*Enable systick and select clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <systickDelayMs+0x58>)
 80018b6:	2205      	movs	r2, #5
 80018b8:	601a      	str	r2, [r3, #0]

	for(int i = 0 ; i<delay ; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e009      	b.n	80018d4 <systickDelayMs+0x40>
	{
		//Wait until CountFlag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 );
 80018c0:	bf00      	nop
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <systickDelayMs+0x58>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f9      	beq.n	80018c2 <systickDelayMs+0x2e>
	for(int i = 0 ; i<delay ; i++)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <systickDelayMs+0x2c>
	}
	SysTick->CTRL = 0 ;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <systickDelayMs+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <get_PerihCLK>:

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PerihCLK,uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PerihCLK,uint32_t BaudRate);

unsigned long get_PerihCLK(USART_TypeDef *USARTx)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(USART1==USARTx || USART6 == USARTx)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <get_PerihCLK+0x30>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d003      	beq.n	800190c <get_PerihCLK+0x18>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <get_PerihCLK+0x34>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d103      	bne.n	8001914 <get_PerihCLK+0x20>
	{
		return APB2_CLK;
 800190c:	f7ff fc69 	bl	80011e2 <get_APB2_Preipheral_Clock>
 8001910:	4603      	mov	r3, r0
 8001912:	e002      	b.n	800191a <get_PerihCLK+0x26>
	}else
	{
		return APB1_CLK;
 8001914:	f7ff fc51 	bl	80011ba <get_APB1_Preipheral_Clock>
 8001918:	4603      	mov	r3, r0
	}
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40011000 	.word	0x40011000
 8001928:	40011400 	.word	0x40011400

0800192c <sampling_mode_and_FIFO>:

private void sampling_mode_and_FIFO (USART_TypeDef *USARTx, bool isitoversamplingby16,bool isit_FIFO)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
 8001938:	4613      	mov	r3, r2
 800193a:	70bb      	strb	r3, [r7, #2]
	if(isit_FIFO)
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <sampling_mode_and_FIFO+0x3c>
	{
		USARTx->CR1 |= (1U<<29);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
		if(!isitoversamplingby16)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d015      	beq.n	8001986 <sampling_mode_and_FIFO+0x5a>
		{
			USARTx->CR1 |= (1U<<15);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
			USARTx->CR1 |= (1U<<15);
		}
	}


}
 8001966:	e00e      	b.n	8001986 <sampling_mode_and_FIFO+0x5a>
		USARTx->CR1 &= ~(1U<<29);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	601a      	str	r2, [r3, #0]
		if(isitoversamplingby16)
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <sampling_mode_and_FIFO+0x5a>
			USARTx->CR1 |= (1U<<15);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <enable_USART1>:


private void enable_USART1(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART1 ;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <enable_USART1+0x20>)
 800199a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <enable_USART1+0x20>)
 80019a0:	f043 0310 	orr.w	r3, r3, #16
 80019a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	58024400 	.word	0x58024400

080019b8 <enable_USART2>:
private void enable_USART2(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART2 ;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <enable_USART2+0x20>)
 80019be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <enable_USART2+0x20>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	58024400 	.word	0x58024400

080019dc <enable_USART3>:
private void enable_USART3(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART3 ;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <enable_USART3+0x20>)
 80019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <enable_USART3+0x20>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400

08001a00 <enable_USART4>:
private void enable_USART4(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART4 ;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <enable_USART4+0x20>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <enable_USART4+0x20>)
 8001a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	58024400 	.word	0x58024400

08001a24 <enable_USART5>:
private void enable_USART5(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	RCC->APB1LENR |= ENRUSART5 ;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <enable_USART5+0x20>)
 8001a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <enable_USART5+0x20>)
 8001a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	58024400 	.word	0x58024400

08001a48 <enable_USART6>:
private void enable_USART6(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART6 ;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <enable_USART6+0x20>)
 8001a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <enable_USART6+0x20>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	58024400 	.word	0x58024400

08001a6c <enable_USART7>:
private void enable_USART7(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART7 ;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <enable_USART7+0x20>)
 8001a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <enable_USART7+0x20>)
 8001a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	58024400 	.word	0x58024400

08001a90 <enable_USART8>:
private void enable_USART8(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= ENRUSART8 ;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <enable_USART8+0x20>)
 8001a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <enable_USART8+0x20>)
 8001a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <selectedUART>:



private void selectedUART(USART_TypeDef* USART)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if(USART==USART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <selectedUART+0x90>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <selectedUART+0x16>
	{
		enable_USART1();
 8001ac4:	f7ff ff66 	bl	8001994 <enable_USART1>
		enable_USART8();
	}else {
		//USART is do not exists
		while(1);
	}
}
 8001ac8:	e038      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==USART2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <selectedUART+0x94>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d102      	bne.n	8001ad8 <selectedUART+0x24>
		enable_USART2();
 8001ad2:	f7ff ff71 	bl	80019b8 <enable_USART2>
}
 8001ad6:	e031      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==USART2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <selectedUART+0x94>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d102      	bne.n	8001ae6 <selectedUART+0x32>
		enable_USART2();
 8001ae0:	f7ff ff6a 	bl	80019b8 <enable_USART2>
}
 8001ae4:	e02a      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==USART3)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <selectedUART+0x98>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d102      	bne.n	8001af4 <selectedUART+0x40>
		enable_USART3();
 8001aee:	f7ff ff75 	bl	80019dc <enable_USART3>
}
 8001af2:	e023      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==UART4)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a16      	ldr	r2, [pc, #88]	; (8001b50 <selectedUART+0x9c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d102      	bne.n	8001b02 <selectedUART+0x4e>
		enable_USART4();
 8001afc:	f7ff ff80 	bl	8001a00 <enable_USART4>
}
 8001b00:	e01c      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==UART5)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <selectedUART+0xa0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d102      	bne.n	8001b10 <selectedUART+0x5c>
		enable_USART5();
 8001b0a:	f7ff ff8b 	bl	8001a24 <enable_USART5>
}
 8001b0e:	e015      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==USART6)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <selectedUART+0xa4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <selectedUART+0x6a>
		enable_USART6();
 8001b18:	f7ff ff96 	bl	8001a48 <enable_USART6>
}
 8001b1c:	e00e      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==UART7)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <selectedUART+0xa8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d102      	bne.n	8001b2c <selectedUART+0x78>
		enable_USART7();
 8001b26:	f7ff ffa1 	bl	8001a6c <enable_USART7>
}
 8001b2a:	e007      	b.n	8001b3c <selectedUART+0x88>
	}else if (USART==UART8)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <selectedUART+0xac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d102      	bne.n	8001b3a <selectedUART+0x86>
		enable_USART8();
 8001b34:	f7ff ffac 	bl	8001a90 <enable_USART8>
}
 8001b38:	e000      	b.n	8001b3c <selectedUART+0x88>
		while(1);
 8001b3a:	e7fe      	b.n	8001b3a <selectedUART+0x86>
}
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	40004800 	.word	0x40004800
 8001b50:	40004c00 	.word	0x40004c00
 8001b54:	40005000 	.word	0x40005000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	40007800 	.word	0x40007800
 8001b60:	40007c00 	.word	0x40007c00

08001b64 <do_bitConfiguration>:

private void do_bitConfiguration(USART_TypeDef* USART)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	USART->CR1 |= ENUE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]
	USART->CR1 |= ENRE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	601a      	str	r2, [r3, #0]
	USART->CR1 |= ENTE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f043 0208 	orr.w	r2, r3, #8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <enable_UART>:

private void enable_UART(GPIO_TypeDef* GPIOx,USART_TypeDef* USART,short TxPin,short RxPin,short AFx)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	460b      	mov	r3, r1
 8001bac:	80fb      	strh	r3, [r7, #6]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	80bb      	strh	r3, [r7, #4]
	if(!(USART->CR1 & ENUE))
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d133      	bne.n	8001c26 <enable_UART+0x8a>
	{
		selectedUART(USART);
 8001bbe:	68b8      	ldr	r0, [r7, #8]
 8001bc0:	f7ff ff78 	bl	8001ab4 <selectedUART>
		enablePORT(GPIOx);
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff fb21 	bl	800120c <enablePORT>
		Set_GPIO_MODER(GPIOx, TxPin, 2);//TX
 8001bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fc22 	bl	800141c <Set_GPIO_MODER>
		Set_GPIO_MODER(GPIOx, RxPin, 2); //RX
 8001bd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4619      	mov	r1, r3
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f7ff fc1b 	bl	800141c <Set_GPIO_MODER>
		Set_GPIO_AFR(GPIOx, TxPin, AFx);
 8001be6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fc81 	bl	80014f8 <Set_GPIO_AFR>
		Set_GPIO_AFR(GPIOx, RxPin, AFx);
 8001bf6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001bfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fc79 	bl	80014f8 <Set_GPIO_AFR>
		sampling_mode_and_FIFO(USART,false,false);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7ff fe8e 	bl	800192c <sampling_mode_and_FIFO>
		uart_set_baudrate(USART,get_PerihCLK(USART),UART_BaudRate);
 8001c10:	68b8      	ldr	r0, [r7, #8]
 8001c12:	f7ff fe6f 	bl	80018f4 <get_PerihCLK>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f000 f83e 	bl	8001ca0 <uart_set_baudrate>
 8001c24:	e000      	b.n	8001c28 <enable_UART+0x8c>

	}else
	{
		//That UART is already defined
		while(1);
 8001c26:	e7fe      	b.n	8001c26 <enable_UART+0x8a>
	}
	do_bitConfiguration(USART);
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f7ff ff9b 	bl	8001b64 <do_bitConfiguration>
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <enable_UART3>:
 * 				PB10  PB11   7
 * 				PC10  PC11	 7
 * 				PD8   PD9	 7
 */
public void enable_UART3(GPIO_TypeDef* GPIOx,short TxPin,short RxPin,short AFx)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
	enable_UART(GPIOx,USART3,TxPin, RxPin, AFx);
 8001c52:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001c56:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	460b      	mov	r3, r1
 8001c62:	4904      	ldr	r1, [pc, #16]	; (8001c74 <enable_UART3+0x3c>)
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff ff99 	bl	8001b9c <enable_UART>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40004800 	.word	0x40004800

08001c78 <uart_read>:
	enable_UART(GPIOx,UART8,TxPin, RxPin, AFx);
}


char uart_read(USART_TypeDef* USART)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	/*Make sure the receive data register is not empty*/
	while(!(USART->ISR & ISR_RXNE));
 8001c80:	bf00      	nop
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f9      	beq.n	8001c82 <uart_read+0xa>
	return (int)USART->RDR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	b2db      	uxtb	r3, r3

}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <uart_set_baudrate>:


}

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PerihCLK,uint32_t BaudRate)
		{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]

	if(((USARTx->CR1 & (1U<<15)) && !(USARTx->CR1 & (1U<<29)))||(!(USARTx->CR1 & (1U<<15)) && (USARTx->CR1 & (1U<<29))))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <uart_set_baudrate+0x24>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00b      	beq.n	8001cdc <uart_set_baudrate+0x3c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10f      	bne.n	8001cf0 <uart_set_baudrate+0x50>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <uart_set_baudrate+0x50>
	{
		USARTx->BRR = compute_uart_bd(PerihCLK,BaudRate)*2;
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	68b8      	ldr	r0, [r7, #8]
 8001ce0:	f000 f813 	bl	8001d0a <compute_uart_bd>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	e008      	b.n	8001d02 <uart_set_baudrate+0x62>

	}else
	{
		USARTx->BRR = (compute_uart_bd(PerihCLK,BaudRate));
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	68b8      	ldr	r0, [r7, #8]
 8001cf4:	f000 f809 	bl	8001d0a <compute_uart_bd>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	60da      	str	r2, [r3, #12]

	}



		}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PerihCLK,uint32_t BaudRate)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]

		return ((PerihCLK + (BaudRate/2U))/BaudRate);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	085a      	lsrs	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	b29b      	uxth	r3, r3

}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <main>:
#include "stm32h745xx.h"
#include "Clock.h"
#include "Uart.h"
uint8_t s ;
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	SysClockConfig();
 8001d36:	f7ff f9b5 	bl	80010a4 <SysClockConfig>
	enable_UART3(GPIOD, 8, 9, 7);
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	2209      	movs	r2, #9
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <main+0x2c>)
 8001d42:	f7ff ff79 	bl	8001c38 <enable_UART3>
	uint8_t s =' ';
 8001d46:	2320      	movs	r3, #32
 8001d48:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		s = uart_read(USART3);
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <main+0x30>)
 8001d4c:	f7ff ff94 	bl	8001c78 <uart_read>
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
		systickDelayMs(10);
 8001d54:	200a      	movs	r0, #10
 8001d56:	f7ff fd9d 	bl	8001894 <systickDelayMs>
		s = uart_read(USART3);
 8001d5a:	e7f6      	b.n	8001d4a <main+0x1a>
 8001d5c:	58020c00 	.word	0x58020c00
 8001d60:	40004800 	.word	0x40004800

08001d64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d66:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d68:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d92:	f000 f811 	bl	8001db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d96:	f7ff ffcb 	bl	8001d30 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   r0, =_estack
 8001d9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001da0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001da4:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8001da8:	08001e20 	.word	0x08001e20
  ldr r2, =_sbss
 8001dac:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8001db0:	2400001c 	.word	0x2400001c

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>
	...

08001db8 <__libc_init_array>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	4d0d      	ldr	r5, [pc, #52]	; (8001df0 <__libc_init_array+0x38>)
 8001dbc:	4c0d      	ldr	r4, [pc, #52]	; (8001df4 <__libc_init_array+0x3c>)
 8001dbe:	1b64      	subs	r4, r4, r5
 8001dc0:	10a4      	asrs	r4, r4, #2
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	42a6      	cmp	r6, r4
 8001dc6:	d109      	bne.n	8001ddc <__libc_init_array+0x24>
 8001dc8:	4d0b      	ldr	r5, [pc, #44]	; (8001df8 <__libc_init_array+0x40>)
 8001dca:	4c0c      	ldr	r4, [pc, #48]	; (8001dfc <__libc_init_array+0x44>)
 8001dcc:	f000 f818 	bl	8001e00 <_init>
 8001dd0:	1b64      	subs	r4, r4, r5
 8001dd2:	10a4      	asrs	r4, r4, #2
 8001dd4:	2600      	movs	r6, #0
 8001dd6:	42a6      	cmp	r6, r4
 8001dd8:	d105      	bne.n	8001de6 <__libc_init_array+0x2e>
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de0:	4798      	blx	r3
 8001de2:	3601      	adds	r6, #1
 8001de4:	e7ee      	b.n	8001dc4 <__libc_init_array+0xc>
 8001de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dea:	4798      	blx	r3
 8001dec:	3601      	adds	r6, #1
 8001dee:	e7f2      	b.n	8001dd6 <__libc_init_array+0x1e>
 8001df0:	08001e18 	.word	0x08001e18
 8001df4:	08001e18 	.word	0x08001e18
 8001df8:	08001e18 	.word	0x08001e18
 8001dfc:	08001e1c 	.word	0x08001e1c

08001e00 <_init>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr

08001e0c <_fini>:
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	bf00      	nop
 8001e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e12:	bc08      	pop	{r3}
 8001e14:	469e      	mov	lr, r3
 8001e16:	4770      	bx	lr
